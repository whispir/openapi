openapi: 3.0.0
info:
  description: 'Whispir Platform API for cross channel and multi channel communications. Documentation on each endpoint is available at https://developers.whispir.com.'
  x-release-please-start-version: true
  version: 1.3.0
  x-release-please-end: true
  title: Whispir Platform API
  termsOfService: 'https://www.whispir.com/terms-of-service'
  contact:
    email: support@whispir.com
    name: Whispir Support
    url: 'https://www.whispir.com/support'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
tags:
  - name: Messages
    description: Communications are the core of what the Whispir Platform API offers as a service to customers.
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjE0NDgyNjQ-message'
  - name: Resources
    description: 'Using Whispir’s API, one can submit data payloads to be stored by Whispir and used in various API calls. These files are uploaded through the /resources endpoint.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjI0NTEwMjA-resource'
  - name: Templates
    description: 'Using the Whispir Platform API, messages can be stored as Message Templates that can be easily referenced within your API calls.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM0ODAzNDA4-template'
  - name: Response Rules
    description: Using Response Rules in combination with Message Templates allows users to automatically group responses to messages into different response groups for reporting purposes.
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM4OTQzOTA1-response-rule'
  - name: Contacts
    description: 'Contacts form the core of the Whispir offerings. They make up the base data to which and from which all communications are performed. The Whispir API provides secure cloud based storage for your contact information. This can then easily be retrieved by any application or device that requires access, and has permission to do so.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM0ODAzNDA5-contact'
  - name: Keys
    description: Keys are used to manage user access.
  - name: Distribution Lists
    description: Whispir’s API allows users to categorise their contacts into different groups to simplify the distribution of messages.
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM4OTQzOTE5-distribution-list'
  - name: Scenarios
    description: 'Scenarios allows users to simplify the message delivery processes through automated one click communications. The process involves creating a fixed message or a message template combined with a contact or a distribution list. When the scenario is executed, the message is sent to the contacts.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM4OTQzOTIw-scenario'
  - name: Callbacks
    description: Whispir utilises API Callbacks to send simple notifications to different registered services in the event that some change has occurred on the Whispir Platform.
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM4OTQzOTIx-callback'
  - name: Workspaces
    description: 'Workspace allows application developers to create new work areas for the varying use cases of their application. They provides different functions that can be provided to users of the application, e.g. creating messages, executing scenarios, or viewing distribution lists.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM4OTQzOTI0-workspace'
  - name: Activities
    description: 'Activities are all the individual changes, tasks, calls, messages.. just about everything performed in a given company workspaces. Each Activity log entry contains information about the workspace, the module (message, email, IVR..), the user who performed it, time stamps, description of the activity, and its status (success, fail) etc.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjQ2MzAxMjM-activity'
  - name: Custom Lists
    description: Custom Lists are user specific translations or preferred options in the various list controls used in the platform tool. These provide the freedom for the user to customize the list options in various modules like Messages and Events. These custom list either can complement or completely overwrite the existing list items.
    externalDocs:
      url: 'https://developers.whispir.com/b3A6Mzg5NDM5NzY-list-custom-lists'
  - name: Users
    description: 'Access to use the Whispir API, Platform and its features is strictly limited to user permission set. One needs to have proper permissions to access all the features provided by the platform, and when using the API, have appropriate permissions to modify the user attributes of themselves or others in their company workspaces.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjU4ODQwOQ-user'
  - name: Events
    description: 'Whispir’s Events API allows users to capture, create and manage Events (including Incidents, Issues, Places, and Assets). Link multi-channel communications to each event to track report and disseminate information textually and Geo-spatially.'
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjY5MTI5NA-event'
  - name: Imports
    description: The Imports endpoint allows users to import a CSV/JSON/XML file of contacts (via /resources) to be added to the contacts database.
    externalDocs:
      url: 'https://developers.whispir.com/c2NoOjM4OTQzOTI4-import'
  - name: Auth
    description: The Auth endpoint allows users to retrieve and verify a JWT authentication token.
    externalDocs:
      url: 'https://developers.whispir.com/b3A6NDEyMTEzOA-create-an-auth-token'
  - name: Verify
    description: This service enables the API client to generate and send codes to the recipient and have it verified through another endpoint.
    externalDocs:
      url: 'https://developers.whispir.com/pk6eca8bz1c3k-send-code'
paths:
  '/workspaces/{workspaceId}/messages':
    post:
      tags:
        - Messages
      x-sdkOperation: create
      x-isPost: true
      summary: Send a message
      description: |-
        Communications are the core of what the Whispir Platform API offers as a service to customers.    
        Whispir has the ability to send communications across 7 different channels in a single API request:  
        - **SMS** - up to 1600 characters per message, premium routes, delivery receipts  
        - **Email** - free email messaging with HTML and Plain Text support 
        - **Voice** - high quality outbound voice calls delivered to mobiles and landlines within seconds  
        - **Rich Messages** - personalised, targeted rich messaging to drive conversations  
        - **Twitter** - support for instant publishing to multiple twitter accounts  
        - **Facebook** - simplify the process of publishing to multiple facebook accounts instantaneously  
        - **RSS** - easily generate RSS feeds for consumption by other services
        - **WhatsApp** - send templated WhatsApp messages

        All communications are driven from the Messages endpoint resources within the API. This endpoint allows a user to perform the following tasks:
        1.  Create and send a new message
        2.  Retrieve a list of previously sent messages  

        * * *

        ### Using Templates
        Messages can simply specify the `messageTemplateId` in the messages request, instead of specifying the entire content payload.

        The message template can then easily be changed (using either another API request or by logging in to the Whispir Platform) and the part of the application sending the messages does not need to be altered.  

        * * *

        ### Callback Parameters

        The callback API allows you to pass in any values (parameters), which you want to be returned as is, included in the callback response.

        * * *

        ### Using Events

        Once you have created an [Event](./openapi.yaml/paths/~1workspaces~1{workspaceId}~1events/post) in the Whispir Platform, the next logical step is to be able to deliver a notification about the event.

        ```json
        {
          "to": "+1000000000",
          "subject": "Event Notification",
          "eventId": "2EE7FEA3343662BE",
          "body": "An event has occurred: @@summary@@. A resolution is required by @@actionDate1@@."
        }
        ```

        * * *

        ### Message Variables

        Whispir allows the use of message variables to dynamically customise the content in a message. Available variables include [Native Tags](#native-tags), [System Tags](#system-tags), and [Custom Tags](#custom-tags). Each of these variables are described in the following sections.

        #### Native Tags

        When sending messages using the Whispir API you can automatically customise your communications including recipients information as part of the message. This is facilitated by the Whispir's native message variables [or native tags] that will be resolved against the recipients MRIs.
        > **IMPORTANT**: the following tags can be included in any SMS, email or voice message. They are NOT meant to be used in rich messages. In this case recipient-specific fields can be populated using the Whispir JavaScript API.

        Contact Tag | Description
        ---------|----------
         @@first_name@@ | Recipient’s first name.  <br/> For example, John. 
         @@last_name@@ | Recipient’s last name. <br/> For example, Smith.
         @@recipient_email@@ | Recipient’s primary email address.<br/>For example, jsmith@email.com 
         @@recipient_sms@@ | Recipient’s primary mobile phone number. <br/><br/>For example, 61400400400. 
         @@recipient_voice@@ | Recipient’s primary phone number for voice calls.<br/><br/> For example, 61400400400. 
         @@pin@@ | Whispir message retrieval service call back PIN (only populated when voice is used). <br/><br/> For example, 1234. 
         @@recipient_role@@ | Resolves to the recipient’s ‘Role’ field.<br/><br/> For example, Manager. 
         @@recipient_additionalrole@@ | Resolves to the recipient’s ‘Additional Role’ field. <br/><br/>For example, Team Leader. 
         @@team_name1@@ | Resolves to the recipient’s ‘Team Name’ field.<br/><br/> For example, Red Team. 
         @@messagelabel@@| Resolves to the label field of the sent message. <br/><br/>For example, Incident #1234. 
         @@messagecategories@@ | Resolves to the list of categories used in the message, separated with commas. <br/><br/>For example, Product Update. 
         @@web_link@@ | Resolves to a generated link for the web channel content. This can be used for one-click unsubscribe.<br /><br />For example, <pre>https://<region>.whispir.com/unsubscribe?_parameters=value</pre>
         
        ``` JSON
        POST https://api.<region>.whispir.com/workspaces/{workspaceId}/messages
         
        Authorization: Basic am9obi5zbWl0aDpteXBhc3N3b3Jk
        x-api-key: your_api_key
        Content-Type: application/vnd.whispir.message-v1+json
        Accept: application/vnd.whispir.message-v1+json
         
        {
           "to" : "John_Wick.1143139@Contact.whispir.sg",
           "subject" : "Test SMS Message with tags",
           "body" : "Hi @@first_name@@. This is your message."
        }
        ```
        ``` XML
        POST https://api.<region>.whispir.com/workspaces/{workspaceId}/messages
         
        Authorization: Basic am9obi5zbWl0aDpteXBhc3N3b3Jk
        x-api-key: your_api_key
        Content-Type: application/vnd.whispir.message-v1+xml
        Accept: application/vnd.whispir.message-v1+xml
         
        <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
        <ns2:message xmlns:ns2="http://schemas.api.whispir.com">
            <to>John_Wick.1143139@Contact.whispir.sg</to>
            <subject>Test SMS Message with tags</subject>
            <body>Hi @@first_name@@. This is your message.</body>
        </ns2:message>
        ```
         
        The main difference with the examples seen so far is given here by the `to` field of the payloads, where a Contact MRI is specified. This reference allows the Whispir platform to inspect the Contact to retrieve the Contact tags.

        * * *

        #### System Tags

        When sending messages using the Whispir API, you can automatically include system-generated information via system variables. Each of them will resolve to the value obtained when you send the message. Unlike the preceding ones, they don't depend from the Contacts information stored in Whispir, so they can be included also in messages where the recipients are not represented by their MRI.

        System Tag | Description|
        ---------|----------
        @@dd@@| Current day with leading zero. <br/> For example, 08.
        @@mm@@ | Current month with leading zero. <br/> For example, 06.
        @@yy@@| Current year, short form.<br/>For example, 22.
        @@yyyy@@| Current year, long form. <br/><br/>For example, 2022.
        @@day@@ | Day in spoken form.<br/><br/> For example, Wednesday. 
        @@month@@| Month in spoken form. <br/><br/> For example, January. 
        @@hrs@@| Current hour with leading zero, in 24 hour format.<br/><br/> For example, 16. 
        @@min@@ | Current minute with leading zero.<br/><br/> For example, 45. 
        @@date@ | Current date in format (yyyy-mm-dd)<br/><br/> For example, 2022-02-02.
        @@time@@| Current time in 24-hour format. <br/><br/>For example, 16:37. 
         
        * * *

        #### Custom Tags 

        Using message attributes and message Templates allows developers to cleanly separate these responsibilities. This is done by combining the message channels being used for the message and the data driving the message.
        Under the operational point of view this solution is achieved with two steps:
        1. Creating a Template including attributes
        2. Using the Template and replacing the values for the attributes

        Whispir’s API customers can simplify their requests by using the message attributes directly from the API.
        Using message attributes allows to achieve flexibility in the communications. With this solution, Developers just need to take care of the data behind a message while the Marketing team can focus on the presentation or messaging channels within the message.
        > Unlike native tags, user-defined attributes require Whispir administrative assistance to enable and are configured at the account level. Please contact your Whispir account manager or the [Whispir Support Team](mailto:support@whispir.com) if interested in using them. Whispir’s API only accepts message attributes containing alpha-numeric ASCII characters.
        We are about to see a full example where an initial fixed message has been adapted to be reusable.

        **Without Custom Tags**

        ```JSON
        POST http://api.<region>.whispir.com/workspaces/{workspaceId}/messages
         
        Authorization: Basic am9obi5zbWl0aDpteXBhc3N3b3Jk
        x-api-key: your_api_key
        Content-Type: application/vnd.whispir.message-v1+json
        Accept: application/vnd.whispir.message-v1+json
         
        {
           "to" : "jsmith@test.com", 
           "subject" : "Reminder", 
           "body" : "Your invitation to the Acme Event will expire on 13/06/2019 at 23:59:59", 
           "email" : { 
              "type" : "text/plain", 
              "body" : "Your invitation to the Acme Event will expire on 13/06/2019 at 23:59:59" 
           }
        }
        ```
        ```XML
        POST http://api.<region>.whispir.com/workspaces/{workspaceId}/messages
         
        Authorization: Basic am9obi5zbWl0aDpteXBhc3N3b3Jk
        x-api-key: your_api_key
        Content-Type: application/vnd.whispir.message-v1+xml
        Accept: application/vnd.whispir.message-v1+xml
         
        <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
        <ns2:message xmlns:ns2="http://schemas.api.whispir.com">
            <to>jsmith@test.com</to>
            <subject>Reminder</subject>
            <body>Your invitation to the Acme Event will expire on 13/06/2019 at 23:59:59</body>
            <email>
                <type>text/plain</type>
                <body>Your invitation to the Acme Event will expire on 13/06/2019 at 23:59:59</body>
            </email>
        </ns2:message>
        ```

        **With Custom Tags**

        #### Using Message Variables in Templates

        ```JSON
        Step 1 - Creating a Template including the attributes
        POST http://api.<region>.whispir.com/workspaces/{workspaceId}/templates
         
        Authorization: Basic am9obi5zbWl0aDpteXBhc3N3b3Jk
        x-api-key: your_api_key
        Content-Type: application/vnd.whispir.template-v1+json
        Accept: application/vnd.whispir.template-v1+json 
         
        { 
           "messageTemplateName" : "Event Reminder", 
           "subject" : "Reminder:", 
           "body" : "Your invitation to the Acme Event will expire on @@event_expiry@@ at @@event_expiry_time@@", 
           "email" : { 
              "type" : "text/plain", 
              "body" : "Your invitation to the Acme Event will expire on @@event_expiry@@." 
           }
        }
        Response - template created
        201 - Created
        Location: http://api.<region>.whispir.com/workspaces/{workspaceId}/templates/DACADB02209CC93C
        { 
           ...
           "id": "DACADB02209CC93C", 
           ...
        }
        Step 2 - Using Template including attributes to send the message
        POST http://api.<region>.whispir.com/workspaces/{workspaceId}/messages
         
        Authorization: Basic am9obi5zbWl0aDpteXBhc3N3b3Jk
        x-api-key: your_api_key
        Content-Type: application/vnd.whispir.message-v1+json
        Accept: application/vnd.whispir.message-v1+json
         
        { 
           "to" : "jsmith@test.com", 
           "messageTemplateId" : "DACADB02209CC93C", 
           "messageattributes" : {
              "attribute" : [{
                 "name" : "event_expiry",     
                 "value" : "13/06/2019"   
              },{
                 "name" : "event_expiry_time",     
                 "value" : "23:59:59"   
              }]
           } 
        }
        ```
        ```XML
        Step 1 - Creating a Template including attributes
        POST http://api.<region>.whispir.com/workspaces/{workspaceId}/templates
         
        Authorization: Basic am9obi5zbWl0aDpteXBhc3N3b3Jk
        x-api-key: your_api_key
        Content-Type: application/vnd.whispir.template-v1+xml
        Accept: application/vnd.whispir.template-v1+xml
         
        <?xml version="1.0" encoding="UTF-8"?>
        <ns3:template xmlns:ns3="http://schemas.api.whispir.com" 
                      xmlns:ns2="http://schemas.api.whispir.com/dap">
          <messageTemplateName>Event Reminder</messageTemplateName>
          <subject>Reminder</subject>
          <body>Your invitation to the Acme Event will expire on @@event_expiry@@ at @@event_expiry_time@@</body>
          <email>
             <type>text/plain</type>
             <body>Your invitation to the Acme Event will expire on @@event_expiry@@ at @@event_expiry_time@@</body>
          </email>
        </ns3:template>
        Response - template created
        201 - Created
        Location: http://api.<region>.whispir.com/workspaces/{workspaceId}/templates/DACADB02209CC93C
        <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
        <ns3:template xmlns:ns2="http://schemas.api.whispir.com/dap" xmlns:ns3="http://schemas.api.whispir.com">
            ...
            <id>DACADB02209CC93C</id>
            ...
        <ns3:template>
        Step 2 - Using Template including attributes to send the message
        POST http://api.<region>.whispir.com/workspaces/{workspaceId}/messages
         
        Authorization: Basic am9obi5zbWl0aDpteXBhc3N3b3Jk
        x-api-key: your_api_key
        Content-Type: application/vnd.whispir.message-v1+xml
        Accept: application/vnd.whispir.message-v1+xml
         
        <?xml version="1.0" encoding="UTF-8"?>
        <ns3:template xmlns:ns3="http://schemas.api.whispir.com" 
                      xmlns:ns2="http://schemas.api.whispir.com/dap">
           <to>jsmith@test.com</to>
           <messageTemplateId>DACADB02209CC93C</messageTemplateId>
           <messageattributes>
              <attribute>
                 <element>
                    <name>@@event_expiry@@</name>
                    <value>13/06/2019</value>
                 </element>
                 <element>
                    <name>@@event_expiry_time@@</name>
                    <value>23:59:59</value>
                 </element>
              </attribute>
           </messageattributes>
        <ns3:template>
        ```
        Using this message template ID and now using the message attribute @@event_expiry@@, the updated code example (combining the message template and message attribute) is far simpler to implement and is more efficient.

        * * *

        ### Scheduled Messages

        #### Timezone - Scheduling rules

        Using the Whispir API you can schedule messages to be sent later, both once or repeatedly with the possibility to specify the interval between the sessions. The service is available for SMS, email, voice, rich messages 
        A message is scheduled according to the timezone set in the Whispir account of the user who initiates the message request. This setting can be found in the Whispir Portal under "Settings"->"User Manager"->"View/Edit". Whispir DOES NOT honor the timezone where the sender or the message recipient are currently located in
        For example if the user’s time zone is set to UTC in their Whispir profile then messages are scheduled to be sent as per UTC, even if the user triggers the message while sitting in Singapore (+8). So please ensure that any scheduled communication is sent at the appropriate/preferred time
        Also, changing the user's timezone setting after the message is triggered DOES NOT change the original scheduled time.

        #### Sending messages at a later date

        ```JSON
        POST https://api.<region>.whispir.com/workspaces/{workspaceId}/messages
         
        Authorization: Basic am9obi5zbWl0aDpteXBhc3N3b3Jk
        x-api-key: your_api_key
        Content-Type: application/vnd.whispir.message-v1+json
        Accept: application/vnd.whispir.message-v1+json
        ONCE
        In this sample we will schedule a single message to be delivered at 3:55pm on 14 February 2019
        {
            "to" : "jsmith@test.com",
            "subject" : "Test scheduled email message",
            "email" : {
                "body" : "This is my scheduled content",
                "type" : "text/plain"
            },
            "messageType" : "SCHEDULED",
            "scheduleType" : "ONCE",
            "scheduleDate" : "14/02/2019 15:55"
        }
        REPEAT
        In this sample we will will schedule 10 messages to be delivered every hour starting from 3:55pm on 14 February 2019
        {
            "to" : "jsmith@test.com",
            "subject" : "Test scheduled email message",
            "email" : {
                "body" : "This is my scheduled content",
                "type" : "text/plain"
            },
            "messageType" : "SCHEDULED",
            "scheduleType" : "REPEAT",
            "scheduleDate" : "14/02/2019 15:55",
            "repetitionCount" : "10",
            "repeatDays" : "0",
            "repeatHrs" : "1",
            "repeatMin" : "0"
        }
        ```
        ```XML
        POST https://api.<region>.whispir.com/workspaces/{workspaceId}/messages
         
        Authorization: Basic am9obi5zbWl0aDpteXBhc3N3b3Jk
        x-api-key: your_api_key
        Content-Type: application/vnd.whispir.message-v1+json
        Accept: application/vnd.whispir.message-v1+json
        ONCE
        In this sample we will schedule a single message to be delivered at 3:55pm on 14 February 2019
        <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
        <ns2:message xmlns:ns2="http://schemas.api.whispir.com" xmlns:ns3="http://schemas.api.whispir.com/dap">
            <to>john.smith@test.com</to>
            <subject>Test scheduled email message</subject>
            <email>
                <body>This is my scheduled content</body>
                <type>text/plain</type>
            </email>
            <messageType>SCHEDULED</messageType>
            <scheduleType>ONCE</scheduleType>
            <scheduleDate>14/02/2019 15:55</scheduleDate>
        </ns2:message>
        REPEAT
        In this sample we will will schedule 10 messages to be delivered every hour starting from 3:55pm on 14 February 2019
        <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
        <ns2:message xmlns:ns2="http://schemas.api.whispir.com" xmlns:ns3="http://schemas.api.whispir.com/dap">
            <to>john.smith@test.com</to>
            <subject>Test scheduled email message</subject>
            <email>
                <body>This is my scheduled content</body>
                <type>text/plain</type>
            </email>
            <messageType>SCHEDULED</messageType>
            <scheduleType>REPEAT</scheduleType>
            <scheduleDate>14/02/2019 15:55</scheduleDate>
            <repetitionCount>10</repetitionCount>
            <repeatDays>0</repeatDays>
            <repeatHrs>1</repeatHrs>
            <repeatMin>0</repeatMin>
        </ns2:message>
        ```
        * * *

        ### Opt-out and Unsubscribe

        Whispir provides a way for clients who require sending to a marketing email to include two new headers as directed by mail inboxes providers.
        It creates a way for recipients to opt out of email lists easily, which will add up to a sender's reputation and deliverability.

        This additional request body is optional under the `email` property.

        ```JSON
        POST https://api.<region>.whispir.com/workspaces/{workspaceId}/messages
         
        Authorization: Basic am9obi5zbWl0aDpteXBhc3N3b3Jk
        x-api-key: your_api_key
        Content-Type: application/vnd.whispir.message-v1+json
        Accept: application/vnd.whispir.message-v1+json
        In this sample we will send a message with an opt out option property
        {
            "to" : "jsmith@test.com",
            "subject" : "Test Opt-out and Unsubscribe",
            "email" : {
                "body" : "This is a test message",
                "type" : "text/plain"
                "optOutOption": {
                  "rmsUnsubscribeUrl": "@@web_link@@#unsubscribe",
                  "oneClickApiMapping": "2ab64862"
                }
            },
            "web": {
              "type": "text/html",
              "body": "<div class='content'>This is the body of my rich message</div>"
            }
        }
        ```
        ```XML
        POST https://api.<region>.whispir.com/workspaces/{workspaceId}/messages

        Authorization: Basic am9obi5zbWl0aDpteXBhc3N3b3Jk
        x-api-key: your_api_key
        Content-Type: application/vnd.whispir.message-v1+xml
        Accept: application/vnd.whispir.message-v1+xml
        In this sample we will send a message with an opt out option property
        <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
        <ns2:message xmlns:ns2="http://schemas.api.whispir.com" xmlns:ns3="http://schemas.api.whispir.com/dap">
          <to>john.smith@test.com</to>
          <subject>Test scheduled email message</subject>
          <email>
              <body>This is my scheduled content</body>
              <type>text/plain</type>
              <optOutOption>
                <rmsUnsubscribeUrl>@@web_link@@#unsubscribe</rmsUnsubscribeUrl>
                <oneClickApiMapping>2ab64862</oneClickApiMapping>
              </optOutOption>
          </email>
          <web>
            <type>text/html</type>
            <body>
              <div class='content'>This is the body of my rich message</div>
            </body>
          </web>
        </ns2:message>
        ```

        In this example we're utilizing the `@@web_link@@` tag that generates an unsubscribe link for the recipients.
        The `web` payload is required when using the `@@web_link@@` value in the `email`.`optOutOption`.

        The `rmsUnsubscribeUrl` is a URL link to the web channel unsubscribe content for `GET` requests, and for one-click unsubscribe functionality via `POST` requests.

        The `oneClickApiMapping` property requires you to have an existing API Mapping and have access to its details. This API Mapping is triggered for one-click unsubscribe functionality.

        Both the `rmsUnsubscribeUrl` and `oneClickApiMapping` properties are optional, but `rmsUnsubscribeUrl` is required to enable unsubscribe, `oneClickApiMapping` is required to enable one-click unsubscribe.
      operationId: messageCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Message-Content-Type'
        - $ref: '#/components/parameters/Message-Accept'
      requestBody:
        content:
          application/vnd.whispir.message-v1+json:
            schema:
              $ref: '#/components/schemas/Message'
            examples:
              SMS:
                value:
                  to: '61400400400'
                  subject: Test Message
                  body: This is the body of my test SMS message
              Email:
                value:
                  to: test@test.com
                  subject: Test Message
                  email:
                    body: This is the body of my test Email message
                    footer: This is the footer of my message
                    type: text/plain
              Email with attachment:
                value:
                  to: test@test.com
                  subject: Test Message
                  email:
                    body: This is the body of my test Email message
                    footer: This is the footer of my message
                    type: text/html
                    resources:
                      attachments:
                        - attachmentName: sample.json
                          attachmentDesc: Sample
                          derefUri: eyAKICAgICJzYW1wbGUiOiB0cnVlCn0=
              Voice:
                value:
                  to: '61400400400'
                  subject: Test Message
                  voice:
                    header: 'This is the introduction, read out to the recipient prior to any key press.'
                    body: 'This is the body of the voice call, read out after the key press'
                    type: 'Pin:,ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:'
              SMS with Message Variables:
                value:
                  to: John_Wick.1143139@Contact.whispir.au
                  subject: Test Message
                  body: Hi @@first_name@@. The current day is @@day@@.
              SMS & Email:
                value:
                  to: '61400400400,test@test.com'
                  subject: Test Message
                  body: This is the body of my test SMS message
                  email:
                    body: This is the body of my test Email message
                    footer: This is the footer of my message
                    type: text/plain
              SMS & Web Page:
                value:
                  to: '61400400400'
                  subject: Test Message
                  body: This is the body of my test SMS message. @@web_link@@
                  web:
                    body: This is the content of my web publishing or Rich Push Message
                    type: text/plain
              SMS - Single Scheduled Message:
                value:
                  to: '61400400400'
                  subject: Single Scheduled Message
                  body: This is a single scheduled SMS message.
                  messageType: SCHEDULED
                  scheduleType: ONCE
                  scheduleDate: '14/02/2019 15:55'
              SMS - Repeated Scheduled Message:
                value:
                  to: '61400400400'
                  subject: Repeated Scheduled Message
                  body: This is a repeated scheduled SMS message.
                  messageType: SCHEDULED
                  scheduleType: REPEAT
                  scheduleDate: '14/02/2019 15:55'
                  repetitionCount: 10
                  repeatDays: 0
                  repeatHrs: 1
                  repeatMin: 0
        description: 'Message object needed to create message. At least one of the Body fields must be populated [SMS, email, voice or web].'
        required: true
      responses:
        '200':
          description: The response code for a message that is accepted for scheduled delivery.
          content:
            application/vnd.whispir.message-v1+json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                Response:
                  value:
                    to: '61400400400'
                    subject: Repeated Scheduled Message
                    body: This is a repeated scheduled SMS message.
                    messageType: SCHEDULED
                    scheduleDate: '01/04/2022 13:40'
                    scheduleType: REPEAT
                    repetitionCount: 10
                    repeatDays: 0
                    repeatHrs: 0
                    repeatMin: 1
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/89518B11A0458848AC3926AEAA48BA14'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                    validBody: true
                    validSubject: true
                    whatsappValidMessage: true
          headers:
            Content-Type:
              $ref: '#/components/headers/Message-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
            Location:
              schema:
                type: string
                example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8'
              description: The URI to fetch details of the resource.
        '202':
          description: The response code for a message that is accepted for immediate delivery.
          content:
            application/vnd.whispir.message-v1+json:
              schema:
                type: string
                enum:
                  - Your request has been accepted for processing
                description: The status of the response acceptance.
              examples:
                Response:
                  value: Your request has been accepted for processing
          headers:
            Content-Type:
              $ref: '#/components/headers/Message-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
            Location:
              schema:
                type: string
                example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8'
              description: The URI to fetch details of the resource.
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    get:
      tags:
        - Messages
      x-sdkOperation: list
      summary: List messages
      description: |-
        List all sent messages for the workspace.

        Pagination is available.
      operationId: messageList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Message-Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
      responses:
        '200':
          description: OK
          content:
            application/vnd.whispir.message-v1+json:
              schema:
                $ref: '#/components/schemas/MessageCollection'
              examples:
                Response:
                  value:
                    messages:
                      - subject: Test Message
                        to: '61400400400'
                        repetitionCount: 0
                        repeatDays: 0
                        repeatHrs: 0
                        repeatMin: 0
                        from: Test User
                        direction: OUTGOING
                        responseCount: '0'
                        createdTime: 1647467664000
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                        whatsappValidMessage: true
                        validBody: true
                        validSubject: true
                      - subject: Test Message
                        to: '61400400400'
                        repetitionCount: 0
                        repeatDays: 0
                        repeatHrs: 0
                        repeatMin: 0
                        from: Test User
                        direction: OUTGOING
                        responseCount: '0'
                        createdTime: 1647466923000
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/E9F52215AD0787EBECDD691916955C1E'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                        whatsappValidMessage: true
                        validBody: true
                        validSubject: true
                    status: ''
                    link: []
          headers:
            Content-Type:
              $ref: '#/components/headers/Message-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/messages/{messageId}':
    get:
      tags:
        - Messages
      x-sdkOperation: retrieve
      summary: Retrieve a message
      description: |-
        Each of the URLs specified in the response can be accessed using the REL and appropriate METHOD to perform the specified functionality.

        **Rel Attribute Descriptions**

        * * *

        - **self:** Retrieves the current message.  

        - **summaryStatus:** Returns the status information of the message as a messagestatus object, in a summary view.  

        - **detailedStatus:** Returns the status information of the message as a messagestatus object, in a detailed view.  

        - **summaryResponses:** Returns the response information of the message as a messageresponse object, in a summary view.  

        - **detailedResponses:** Returns the response information of the message as a messageresponse object, in a detailed view.  
        - **summaryResponsesWithResponseRule:** Returns the response information of the message as a messageresponse object, filtered by the Response Rule (if one was used) in a summary view.  

        - **detailedResponsesWithResponseRule:** Returns the response information of the message as a messageresponse object, filtered by the Response Rule (if one was used) in a detailed view.
      operationId: messageRetrieve
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/Message-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
          content:
            application/vnd.whispir.message-v1+json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                Response:
                  value:
                    to: '61400400400'
                    subject: Test Message
                    body: This is the body of my test SMS message
                    label: ''
                    type: default
                    repetitionCount: 0
                    dlr:
                      period: ''
                      rule: ''
                      type: ''
                      publishToWeb: false
                      expiryDay: 0
                      expiryHour: 0
                      expiryMin: 0
                      feedIds: ''
                      bool: false
                    repeatDays: 0
                    repeatHrs: 0
                    repeatMin: 0
                    voice:
                      body: Test message
                      type: 'Pin:,ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:'
                    from: testUser.au@User.whispir.com
                    direction: OUTGOING
                    responseCount: '0'
                    social:
                      social:
                        - id: social
                        - id: social_long
                    createdTime: 1647466923000
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus?view=summary'
                        rel: summaryStatus
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus?view=detailed'
                        rel: detailedStatus
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=summary&filter=default'
                        rel: summaryResponses
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=detailed&filter=default'
                        rel: detailedResponses
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=summary&filter=responserule'
                        rel: summaryResponsesWithResponseRule
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=detailed&filter=responserule'
                        rel: detailedResponsesWithResponseRule
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                    validBody: true
                    validSubject: true
                    whatsappValidMessage: true
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Message-Accept'
        - schema:
            type: string
            pattern: '^[A-F0-9]+'
          name: messageId
          in: path
          required: true
          description: The identifier for the message.
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/messages/{messageId}/messagestatus':
    get:
      summary: List message status for a sent message
      x-sdkOperation: listMessageStatus
      description: |
        Whispir will automatically monitor the status of each message after it has been sent to each recipient. Using the message status information, you are able to determine who received the message, what exact time they received it, on what message channel (SMS, Email, Voice, Web, Push Notification), whether they replied to the message, what time they replied, and on what messaging channel.  


          Each message progresses through various states, from Pending to Acknowledged.


        ### Message Status Descriptions

        - **Pending (PENDING):** The message has not yet been processed by Whispir. It is in a queue and will be processed shortly.
        - **Sent (SENT):** The message has been sent from Whispir to the recipient, however, there has been no acknowledgement from the recipient via read receipt that the message has arrived.
        - **Received (DELIVRD):**
          - **Email:** Whispir has received acknowledgement via a read receipt that the message has arrived in the inbox.
          - **SMS:** Received status can mean one of two things for SMS.
            1.  The message has been received by the network and is being processed for delivery to the handset.  
                How long the message stays in this state is up to the telco.
            2.  The message has been received by the handset and confirmed by the telco.
        - **Acknowledged (READ):** Whispir has received an intended response from the recipient, either by reply SMS, Email or Voice prompt
        - **Undeliverable (FAILED):** Whispir was not able to deliver the message to the intended recipient on the specified channel. This may be due to incorrect information e.g. wrong phone number or email address, or due to poor network coverage.

        Using the API, developers are able to access this status information at either a Summary or Detailed level.

        The first thing a developer must do in order to retrieve the status of a sent message is retrieve the message using the API.

        ### Retrieve Summary Status

        Using the links provided in the message response, the user can simply make a new API request to retrieve the summaryStatus URL.

        In the example above, the summaryStatus URL is:

        So the request would look as follows:

        `GET /messages/069BF68E5E0FE99B/messagestatus?view=summary`

        As this is a GET request we don’t have to provide any message body.

        This response states that of the 2 people that were sent the message, both of them Acknowledged it by sending a response.

        Your application can use this information to easily determine the numbers of recipients in each state and show a small graph.

        ### Retrieve Detailed Status

        Similar to the summaryStatus, using the links provided in the message response, the user can simply make a new API request to retrieve the detailedStatus URL.

        `GET /messages/069BF68E5E0FE99B/messagestatus?view=detailed`

        As this is a GET request we don’t have to provide any message body.

        The user can easily use this information to receive a far more detailed status breakdown of (for each recipient):

        *   The name of the recipient
        *   The channel type (SMS, Email, Voice, Web)
        *   The sent timestamp for each channel
        *   The received timestamp for each channel
        *   The acknowledged timestamp for each channel
        *   The undeliverable timestamp (only present when the channel is undeliverable)
        *   The overall status for this recipient (PENDING, SENT, DELIVRD, READ, FAILED)
        *   The information text describing how this message has progressed.

        Once you have processed the status information, the next likely piece of information you will be looking to find is the content of the responses (if any). The section on Message Responses describes how to retrieve this information.
      operationId: messageStatusList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/MessageStatus-Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
        - name: messageId
          in: path
          description: Enter message id
          required: true
          schema:
            type: string
            example: 44F4DA8F04755430BEC5A0E1E2154EBA
        - name: view
          in: query
          required: false
          description: The view for the message status.
          schema:
            type: string
            enum:
              - summary
              - detailed
            default: summary
        - name: filter
          schema:
            type: string
            enum:
              - default
              - responserule
            default: default
          in: query
          description: The filter for the message status.
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/MessageStatus-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
          content:
            application/vnd.whispir.messagestatus-v1+json:
              examples:
                Summary:
                  value:
                    messageStatuses:
                      - link:
                          - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                        categories:
                          - name: Sent
                            recipientCount: 0
                            percentageTotal: 0.0%
                          - name: Pending
                            recipientCount: 0
                            percentageTotal: 0.0%
                          - name: Received
                            recipientCount: 1
                            percentageTotal: 100.0%
                          - name: Acknowledged
                            recipientCount: 0
                            percentageTotal: 0.0%
                          - name: Undeliverable
                            recipientCount: 0
                            percentageTotal: 0.0%
                    link: []
                Detailed:
                  value:
                    messageStatuses:
                      - name: '61400400400'
                        info: '  SMS message sent. SMSCODE=008 SMS message received by device. SMSCODE=001 '
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus?view=detailed'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                        status:
                          - type: email
                            status: ''
                            destination: ''
                          - type: sms
                            status: DELIVRD
                            destination: '61400400400'
                            sentTimestamp: 1647466923000
                            receivedTimestamp: 1647466931000
                          - type: voice
                            status: ''
                            destination: ''
                    status: '1 to 1 of 1    '
                    link: []
              schema:
                $ref: '#/components/schemas/MessageStatusCollection'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      tags:
        - Messages
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/messages/{messageId}/messageresponses':
    get:
      summary: List responses for a sent message
      x-sdkOperation: listMessageResponse
      description: |
        ## Summary Responses

        Using the links provided in the message response, the user can simply make a new API request to retrieve the summaryStatus URL.

        The request for this information would look as follows:

        `GET /messages/069BF68E5E0FE99B/messagestatus?view=summary`

        This request is asking for a couple of things:

        1.  The URL is specifically asking for all of the **messageresponses** to the message with ID **069BF68E5E0FE99B**

        3.  The **View** parameter is specifying that the message responses should be shown in a **summary** view

        5.  The **Filter** parameter is specifying that the filter should not use a response rule, it should show the **default** filter

        As this is a **GET** request we don’t have to provide any message body.

        This response states that of the 2 people that were sent the message, both of them **Acknowledged** it by sending a response.

        Your application can use this information to easily determine the numbers of recipients in each state and show a small graph.

        ## Detailed Responses
        Using the links provided in the message response, the user can simply make a new API request to retrieve the detailedResponses URL.

        The resulting request would look as follows:

        `GET /messages/069BF68E5E0FE99B/messageresponses?view=detailed&filter=default`

        This request is asking for a couple of things:

        1.  The URL is specifically asking for all of the **messageresponses** to the message with ID `069BF68E5E0FE99B`
        2.  The **View** parameter is specifying that the message responses should be shown in a **detailed** view
        3.  The **Filter** parameter is specifying that the filter should not use a response rule, it should show the **default** filter

        As this is a **GET** request we don’t have to provide any message body.

        **Note**:Searching responses will be described further on in this documentation.

        *   The **responseMessage channel** describes the messaging channel that the response has come in to the Whispir Platform via.

        *   The **responseMessage content** describes the actual content of the inbound message.

        *   The **responseMessage acknowledged** shows the date of when the response was received by the Whispir Platform
      operationId: messageResponseList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/MessageResponse-Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
        - name: messageId
          in: path
          description: Enter message id
          required: true
          schema:
            type: string
            example: 44F4DA8F04755430BEC5A0E1E2154EBA
        - name: view
          in: query
          required: false
          description: The view for the message response.
          schema:
            type: string
            enum:
              - summary
              - detailed
            default: summary
        - name: filter
          in: query
          description: The filter for the message response.
          required: false
          schema:
            type: string
            enum:
              - noresponse
              - notmatched
              - responserule
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/MessageResponse-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
          content:
            application/vnd.whispir.messageresponse-v1+json:
              schema:
                $ref: '#/components/schemas/MessageResponseCollection'
              examples:
                Summary:
                  value:
                    messageresponses:
                      - percentageTotal: 50%
                        responseCount: '1'
                        link: []
                        type: noresponse
                      - percentageTotal: 50%
                        responseCount: '1'
                        link: []
                        type: notmatched
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                Detailed:
                  value:
                    status: '1 to 2 of 2    '
                    messageresponses:
                      - from:
                          name: John Smith
                          mri: John_Smith.484215.Critical_Incident_Management@Contact.whispir.com
                          mobile: '+1000000000'
                          email: jsmith@test.com
                          voice: '+1000000000'
                        responseCategory: noresponse
                        responseMessage:
                          content: N/A
                          acknowledged: N/A
                          channel: N/A
                      - from:
                          name: Fred Smith
                          mri: Fred_Smith.341550.Critical_Incident_Management@Contact.whispir.com
                          mobile: '+1000000000'
                          email: fsmith@test.com
                          voice: '+1000000000'
                        responseCategory: notmatched
                        responseMessage:
                          content: 'OK, got it. Thanks.'
                          acknowledged: '28/09/12 08:48'
                          channel: sms
                    link: []
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      tags:
        - Messages
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/resources':
    post:
      tags:
        - Resources
      x-sdkOperation: create
      x-isPost: true
      summary: Create a resource
      description: |
        ### High-Level Response Elements

        **name:** String  
        *   Specifies the name of the file being uploaded. The extension of the file too is allowed to be present in the name. **Eg:** australia-contacts.csv
        *   **Note:** It is advised that names should not contain spaces or special characters other than `-` and `.`. This helps for easier search and also for a valid URL link (especially) in case of public scoped files.
        *   **Eg:** `australia-contacts.csv` is better name convention than `australia contacts.csv` as the latter converts into `australia%20contacts.csv`.  

        **scope:** String  
        Specifies the permission scope of the file being uploaded. The scope defines the access restriction of the resource. It can be only one between:
          *   **Public -** Public files have an addressable URL and are available publicly
          *   **Private -** Private files have no URL and are only available for bulk messaging purposes and for importing contacts.

        **mimeType:** String  
        The mime type of the file that is being uploaded. The type is dependent on the scope of the resource.
          *   **Public -** Public files can be of any mimetype. `text/html`; `text/csv`
          *   **Private -** Private files are restricted to `CSV`, `JSON`, and `XML`

        **derefUri:** The base64 representation of the file being submitted.

        **Note:** When creating a resource, the following conditions apply -

        *   Maximum of 10MB per file being uploaded.
        *   Transactions will have an enforced timeout.
        *   Resources will be available in the Whispir Platform for a limited timeframe (30 days). These will then be automatically cleaned. This will be a configurable setting for Whispir Administrators.

        ### Upload the Resource file via API  
        To upload a file to Whispir’s API, users will make an API call to the /resources endpoint.  
        Applications can use this endpoint to store the source files for dynamic messages. This endpoint can also be used to store any file based data (e.g. images, pdf documents, spreadsheets) for an unlimited amount of time.  

        **Note:** The types of files allowed are - `CSV`, `JSON`, `XML`, Images [`JPEG`, `PNG`], and `WAV`.  

        Information about the resources endpoint is documented in the Resources section of the documentation.
      operationId: resourceCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Resource-Content-Type'
        - $ref: '#/components/parameters/Resource-Accept'
      requestBody:
        content:
          application/vnd.whispir.resource-v1+json:
            schema:
              $ref: '#/components/schemas/Resource'
            examples:
              Example:
                value:
                  name: sample.json
                  scope: private
                  mimeType: application/json
                  derefUri: eyAKICAgICJzYW1wbGUiOiB0cnVlCn0=
        description: resources object that needs to be create resources
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Resource'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    get:
      tags:
        - Resources
      x-sdkOperation: list
      summary: List resources
      description: |
        Existing resources can be easily retrieved via the GET /resources API call. The response lists all of the existing public and private resources available in the system.

        **name:** String  
        - Specifies the name of the resource. The name is given during creation.

        **scope:** String  
        - Specifies the permission scope of the file being uploaded.

        **mimeType:** String  
        - The mime type of the file that is being uploaded.

        **url:** String  
        - The downloaded link to the resource location. Browsing this link results in a download of the resource.  
        - **Note:** Only available for Public scoped resources.

        **link:** Array  
        - Provides a list of URLs that can be used to manipulate or access the message template.
          - uri - the link to access the message template
          - rel - the descriptor for what the link will do
          - method - the HTTP method to use with this particular link

        ## Filtering search results

        **Note:** when it comes to searching by name, the equal sign must be intended as `contains` rather than `equals`. So, if we search resources with the value equals to `in` we might be given back
         
        **Eg** (`India.csv` and `Indonesia.json` but also `Argentina.csv`)

        ### Filtering By scope

        Resources can be filtered by their scope. This can be achieved by sending in the required scope type in the URL as query parameter. The scope can be one of the allowed scope types.

        *   Public - &scope=public
        *   Private - &scope=private

        ### Filtering By name

        Resources can be filtered by their name. This can be achieved by sending in the name in the URL as query parameter.

        **Note:** The name including the file extension makes it a unique search.

        **Eg:** - &name=australia.csv
      operationId: resourceList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Resource-Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
        - name: scope
          description: A filter parameter for the visibility of the resource.
          in: query
          required: false
          schema:
            type: string
            enum:
              - private
              - public
        - name: name
          description: A filter parameter for the name of the resource.
          in: query
          required: false
          schema:
            type: string
            example: recipients.json
      responses:
        '200':
          $ref: '#/components/responses/Resources'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/resources/{resourceId}':
    get:
      tags:
        - Resources
      summary: Retrieve a resource
      x-sdkOperation: retrieve
      description: |
        A single resource (public|private) can be retrieved from the available resource by using the resource’s specific link uri
      operationId: resourceRetrieve
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Resource-Accept'
        - name: resourceId
          description: The identifier for the resource.
          in: path
          required: true
          schema:
            type: string
            example: 2C32F4AA38917318D52A279D1946BDE8
      responses:
        '200':
          $ref: '#/components/responses/Resource'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    put:
      tags:
        - Resources
      summary: Update a resource
      x-sdkOperation: update
      description: |
        Updating a resource involves the same process as in creating a resource. The process of using one of the format (CSV, JSON, XML) for private and any format for public -> converting to base64 encoded data is the same.  
        The change is doing a PUT to the existing resource URL that needs to be updated. Please be careful that doing an update overwrites the previous resource. There is no versioning available in Whispir for the resources.  
        Any or all of the 4 values can be changed. i.e, name, scope, mimeType, derefUri, but all 4 are mandatory values to be sent.
      operationId: resourceUpdate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Resource-Content-Type'
        - $ref: '#/components/parameters/Resource-Accept'
        - name: resourceId
          in: path
          description: Enter resources id.
          required: true
          schema:
            type: string
            example: 2C32F4AA38917318D52A279D1946BDE8
      requestBody:
        content:
          application/vnd.whispir.resource-v1+json:
            schema:
              $ref: '#/components/schemas/Resource'
            examples:
              Example:
                value:
                  name: sample.json
                  scope: private
                  mimeType: application/json
                  derefUri: eyAKICAgICJzYW1wbGUiOiB0cnVlCn0=
        description: resources object that needs to be update resources
        required: true
      responses:
        '200':
          $ref: '#/components/responses/Resource'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    delete:
      tags:
        - Resources
      summary: Delete a resource
      x-sdkOperation: delete
      description: |
        Resources can be deleted after use. These can be both public and private in scope.  

        **Note:** Deleting a public resource may result in 404 File Not Found error for any sites or material referencing to it. So, ensure that DELETE is only executed when the reference to all material is removed or the content has to be removed for other purposes immediately.
      operationId: resourceDelete
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: resourceId
          in: path
          description: The id of the resources to be deleted
          required: true
          schema:
            type: string
            example: 2C32F4AA38917318D52A279D1946BDE8
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/templates':
    post:
      tags:
        - Templates
      summary: Create a template
      x-sdkOperation: create
      x-isPost: true
      description: 'Create a message template, combining multi-channel content for use with the Message resource. The message template can be reused across multiple sent messages.'
      operationId: templateCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Template-Content-Type'
        - $ref: '#/components/parameters/Template-Accept'
      requestBody:
        content:
          application/vnd.whispir.template-v1+json:
            schema:
              $ref: '#/components/schemas/Template'
            examples:
              Template:
                value:
                  messageTemplateName: Sample SMS Template
                  messageTemplateDescription: Template to provide an example on whispir.io
                  responseTemplateId: responseTemplateId
                  subject: Test SMS Message
                  body: This is the body of my test SMS message
                  email:
                    body: This is the body of my email message.
                    footer: This is the footer of my message.
                    type: text/plain
                    resources:
                      attachments:
                        - attachmentName: TestIcon.png
                          attachmentDesc: MyPhoto
                          derefUri: iVBORw0KGgoAAAANSUhEUgAAABQAAAASCAIAAADUsmlHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAMvSURBVDhPTVT5S1RhFD3fezOOOePTXHKriWgjsogWC1TSMuuHIFqoX0KsIIgSWwiq/6FFU8MKK6KyXYSKpkUKR4QMSSpCLQpyxHHUZpztzdu63xub5vKWj/fu+c6599z3mMfjSU9P13UdZoiCaLfZYQWiUGKq1WrBLEBDOBpWNTWeQyEIwvT0NAsEAgROPKXFxceNbQOtv4ShkKCkaZZ5kYU1Sw6dqT0NMTkLBIbf7zf+xaOuJzgG4RmyPyP/Kwq/oWAYeT+R6gYOofnmlUQmLQjI6JQkifasu368KdCQWwFEwBiYQOIgiDBETDFIORh/iZ0De55cehgXQJIphce9d/ebJhuyV0P3QY9Cj/HDUKhseIPomP/CW2QYB42nSx+db76YUM9IusPhYHVM2g5Bpo5xNuIkZibCF8On0oGVjhWabmR8EBx5GDuHaItsy0zhzA6bo/H5ZSyDMQ1d4YQa0Sqc1hdAe3E7IYkqp9tiUcHGkXIQZ8+fm+k5uXK3/46YAV3mMMLEt/BHUJ1Vua9oH+WV9ayLyLpVhRYFkT8d4mUzRuI0DAcHmQngSLrGoBJ/GC/L31JSy/cm91ifXTcboYDJGLX+1kI6WS3AQFSRCUDvwhGEwubiD1yVLkLKWuxoT50kzGwab6Ru6HIsahpiwTybkwTLU9iUU1Ezf394CmuyV20p2kLg8mcbRHLLxGimLlWFFMpMc6TRFlx29aJqePBgx4M3u7tubb1dMXfjw6rHhOwb+/jhV3+qNtMFKspQEZnA+oxSPr9UdjgUllV59pHZhSUFI/We5AnMv5o7bvhsFu5f3DlmR7ATr/a+rtq2mVulqEqmlFlbUuv5MbqudW0C7PrhGpvwidRhIoyXqiHoRam/tGrT5n9Wmfcb9TfmBOf0DXy80H0h/uKU6yQRcqlmk+mji0RhbbN2XOpAygzF/9nmfp4oc4+4y6vLqRnuUTdsfNqYFRop/4JFw4t723qz52YlZpvPd/K30vm+03nAie1ADXAYOADsgHOXs/laix7RkzMJyJJ/BjQ09lQ7me8f9/cP9nsnvemzpOIFy3PzclkK0wyNgvDEHP8Z/AXQ58rAz69IBAAAAABJRU5ErkJggg==
                  voice:
                    header: 'This is the introduction, read out to the recipient prior to any key press.'
                    body: 'This is the body of the voice call, read out after the key press'
                    type: 'Pin:7171,ConfCall:1800123123,ConfAccountNo:098711234,ConfPinNo:8181,ConfModPinNo:4242'
                  web:
                    body: This is the content of my web publishing or Rich Push Message
                    type: text/plain
                  social:
                    social:
                      - id: social
                        body: Facebook Content
                        type: text/plain
                  type: defaultNoReply
                  features:
                    pushOptions:
                      notifications: enabled
                      escalationMins: '3'
                      appId: appId
                  dlr:
                    period: string
                    publishToWeb: false
                    rule: string
                    expiryDay: 0
                    expiryHour: 0
                    expiryMin: 0
                    feedIds: string
                    bool: false
                    type: string
                  link:
                    - uri: 'https://api.au.whispir.com/workspaces/618CAD33669AD31A/templates/3148356543415EE7'
                      rel: self
                      method: GET
                      host: api.au.whispir.com
                      port: -1
                  tags: string
        description: Templates object that needs to be create Templates
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Template'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    get:
      tags:
        - Templates
      summary: List templates
      x-sdkOperation: list
      description: |
        List all message templates for the workspace.

        Pagination is available.
      operationId: templateList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Template-Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
      responses:
        '200':
          description: OK
          content:
            examples:
              examples:
                A list of templates:
                  value:
                    status: '1 to 2 of 2    '
                    messagetemplates:
                      - messageTemplateName: Sample SMS Template 2
                        subject: Sample
                        body: Example
                        messageTemplateDescription: Template to provide an example on whispir.io no.1
                        id: 236EA3E3E63439DA
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/618CAD33669AD31A/templates/236EA3E3E63439DA'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                      - messageTemplateName: Sample SMS Template with tags
                        subject: Sample
                        body: Example
                        messageTemplateDescription: Template to provide an example on whispir.io no.1
                        id: D09B63AD6BD1A503
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/618CAD33669AD31A/templates/D09B63AD6BD1A503'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                    link: []
              schema:
                $ref: '#/components/schemas/TemplateCollection'
          headers:
            Content-Type:
              $ref: '#/components/headers/Template-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/templates/{templateId}':
    get:
      tags:
        - Templates
      summary: Retrieve a template
      x-sdkOperation: retrieve
      description: Retrieves a message template
      operationId: templateRetrieve
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Template-Accept'
        - name: templateId
          in: path
          description: The identifier for the template.
          required: true
          schema:
            type: string
            example: 321D8505157C5F27
      responses:
        '201':
          $ref: '#/components/responses/Template'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    put:
      tags:
        - Templates
      summary: Update a template
      x-sdkOperation: update
      description: |
        **Note:** Currently users cannot update templates with the same name as a template that already exists in Whispir. Users can overcome this by saving the updated template with a new name, then either changing this back in a subsequent save, or retaining the updated name.
      operationId: templateUpdate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Template-Content-Type'
        - $ref: '#/components/parameters/Template-Accept'
        - name: templateId
          in: path
          description: The identifier for the template.
          required: true
          schema:
            type: string
            example: 321D8505157C5F27
      requestBody:
        content:
          application/vnd.whispir.template-v1+json:
            schema:
              $ref: '#/components/schemas/Template'
            examples:
              Template:
                value:
                  messageTemplateName: Sample SMS Template
                  messageTemplateDescription: Template to provide an example on whispir.io
                  responseTemplateId: responseTemplateId
                  subject: Test SMS Message
                  body: This is the body of my test SMS message
                  email:
                    body: This is the body of my email message.
                    footer: This is the footer of my message.
                    type: text/plain
                    resources:
                      attachments:
                        - attachmentName: TestIcon.png
                          attachmentDesc: MyPhoto
                          derefUri: iVBORw0KGgoAAAANSUhEUgAAABQAAAASCAIAAADUsmlHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAMvSURBVDhPTVT5S1RhFD3fezOOOePTXHKriWgjsogWC1TSMuuHIFqoX0KsIIgSWwiq/6FFU8MKK6KyXYSKpkUKR4QMSSpCLQpyxHHUZpztzdu63xub5vKWj/fu+c6599z3mMfjSU9P13UdZoiCaLfZYQWiUGKq1WrBLEBDOBpWNTWeQyEIwvT0NAsEAgROPKXFxceNbQOtv4ShkKCkaZZ5kYU1Sw6dqT0NMTkLBIbf7zf+xaOuJzgG4RmyPyP/Kwq/oWAYeT+R6gYOofnmlUQmLQjI6JQkifasu368KdCQWwFEwBiYQOIgiDBETDFIORh/iZ0De55cehgXQJIphce9d/ebJhuyV0P3QY9Cj/HDUKhseIPomP/CW2QYB42nSx+db76YUM9IusPhYHVM2g5Bpo5xNuIkZibCF8On0oGVjhWabmR8EBx5GDuHaItsy0zhzA6bo/H5ZSyDMQ1d4YQa0Sqc1hdAe3E7IYkqp9tiUcHGkXIQZ8+fm+k5uXK3/46YAV3mMMLEt/BHUJ1Vua9oH+WV9ayLyLpVhRYFkT8d4mUzRuI0DAcHmQngSLrGoBJ/GC/L31JSy/cm91ifXTcboYDJGLX+1kI6WS3AQFSRCUDvwhGEwubiD1yVLkLKWuxoT50kzGwab6Ru6HIsahpiwTybkwTLU9iUU1Ezf394CmuyV20p2kLg8mcbRHLLxGimLlWFFMpMc6TRFlx29aJqePBgx4M3u7tubb1dMXfjw6rHhOwb+/jhV3+qNtMFKspQEZnA+oxSPr9UdjgUllV59pHZhSUFI/We5AnMv5o7bvhsFu5f3DlmR7ATr/a+rtq2mVulqEqmlFlbUuv5MbqudW0C7PrhGpvwidRhIoyXqiHoRam/tGrT5n9Wmfcb9TfmBOf0DXy80H0h/uKU6yQRcqlmk+mji0RhbbN2XOpAygzF/9nmfp4oc4+4y6vLqRnuUTdsfNqYFRop/4JFw4t723qz52YlZpvPd/K30vm+03nAie1ADXAYOADsgHOXs/laix7RkzMJyJJ/BjQ09lQ7me8f9/cP9nsnvemzpOIFy3PzclkK0wyNgvDEHP8Z/AXQ58rAz69IBAAAAABJRU5ErkJggg==
                  voice:
                    header: 'This is the introduction, read out to the recipient prior to any key press.'
                    body: 'This is the body of the voice call, read out after the key press'
                    type: 'Pin:7171,ConfCall:1800123123,ConfAccountNo:098711234,ConfPinNo:8181,ConfModPinNo:4242'
                  web:
                    body: This is the content of my web publishing or Rich Push Message
                    type: text/plain
                  social:
                    social:
                      - id: social
                        body: Facebook Content
                        type: text/plain
                  type: defaultNoReply
                  features:
                    pushOptions:
                      notifications: enabled
                      escalationMins: '3'
                      appId: appId
                  dlr:
                    period: string
                    publishToWeb: false
                    rule: string
                    expiryDay: 0
                    expiryHour: 0
                    expiryMin: 0
                    feedIds: string
                    bool: false
                    type: string
                  link:
                    - uri: 'https://api.au.whispir.com/workspaces/618CAD33669AD31A/templates/3148356543415EE7'
                      rel: self
                      method: GET
                      host: api.au.whispir.com
                      port: -1
                  tags: string
        description: Templates object that needs to be update Templates
        required: true
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    delete:
      tags:
        - Templates
      summary: Delete a template
      x-sdkOperation: delete
      description: |
        **Note:** When a template is DELETED, all the associated Scenarios, events, and references of template use in other endpoints will fail. So, ensure that the template is not used anywhere before it is deleted. Whispir **will not** do that check before it deletes the template.
      operationId: templateDelete
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Template-Content-Type'
        - $ref: '#/components/parameters/Template-Accept'
        - name: templateId
          in: path
          description: The identifier for the template.
          required: true
          schema:
            type: string
            example: 321D8505157C5F27
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/responserules':
    post:
      tags:
        - Response Rules
      summary: Create a response rule
      x-sdkOperation: create
      x-isPost: true
      description: |
        ## Response Template Patterns

        Each Response Rule has a series of **Patterns** that allow the creator to specify what textual content should be matched in the response SMS or Email, and a number that should be entered when IVR (Voice) is being used.

        Each Response Rule can specify as many Response Template Patterns as required.

        Each of the Patterns specified will also dynamically create buttons within any Rich Message that is associated with the Response Rule.

        This provides an out of the box capability to quickly gather feedback from the field using a Rich User interface, and leveraging SMS as the delivery mechanism.
      operationId: responseRuleCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/ResponseRule-Content-Type'
        - $ref: '#/components/parameters/ResponseRule-Accept'
      requestBody:
        content:
          application/vnd.whispir.responserule-v1+json:
            schema:
              $ref: '#/components/schemas/ResponseRule'
            examples:
              Example:
                value:
                  name: Response Rule 1
                  description: string
                  responseTemplatePatterns:
                    name: Yes Rule
                    pattern: startswith
                    textPrompt: 'YES'
                    voicePrompt: '1'
                    spokenVoicePrompt: to select YES
                    colour: '#00947d'
        description: ''
        required: true
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              $ref: '#/components/headers/ResponseRule-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
            Location:
              schema:
                type: string
                example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/responserules/747AB7E716C1802B6476784AEB5C9BB8'
              description: The URI to fetch details of the resource.
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    get:
      tags:
        - Response Rules
      x-sdkOperation: list
      summary: List response rules
      description: Returns a list of response rules.
      operationId: reponseRuleList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/ResponseRule-Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/ResponseRule-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
          content:
            application/vnd.whispir.responserule-v1+json:
              schema:
                $ref: '#/components/schemas/ResponseRuleCollection'
              examples:
                Example 1:
                  value:
                    status: 1 to 8 of 8
                    responseRules:
                      - name: Response Rule 1
                        description: My Response Rule
                        responseTemplatePatterns:
                          name: Yes Rule
                          pattern: startswith
                          textPrompt: 'YES'
                          voicePrompt: '1'
                          spokenVoicePrompt: to select YES
                          colour: '#00947d'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/responserules/{responseRuleId}':
    get:
      tags:
        - Response Rules
      x-sdkOperation: retrieve
      summary: Retrieve a response rule
      description: Retrieves a response rule object.
      operationId: responseRuleRetrieve
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/ResponseRule-Accept'
        - name: responseRuleId
          in: path
          required: true
          description: Response Rule Id
          schema:
            type: string
            example: 64BC5314665B947B
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/ResponseRule-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
          content:
            application/vnd.whispir.responserule-v1+json:
              schema:
                $ref: '#/components/schemas/ResponseRule'
              examples:
                Example 1:
                  value:
                    name: Response Rule 1
                    description: My Response Rule
                    responseTemplatePatterns:
                      name: Yes Rule
                      pattern: startswith
                      textPrompt: 'YES'
                      voicePrompt: '1'
                      spokenVoicePrompt: to select YES
                      colour: '#00947d'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    put:
      tags:
        - Response Rules
      x-sdkOperation: update
      summary: Update a response rule
      description: Updates a Response Rule object.
      operationId: responseRuleUpdate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/ResponseRule-Content-Type'
        - $ref: '#/components/parameters/ResponseRule-Accept'
        - name: responseRuleId
          in: path
          required: true
          description: Response Rule Id
          schema:
            type: string
            example: 64BC5314665B947B
      requestBody:
        content:
          application/vnd.whispir.responserule-v1+json:
            schema:
              $ref: '#/components/schemas/ResponseRule'
            examples:
              Example:
                value:
                  name: Response Rule 1
                  description: string
                  responseTemplatePatterns:
                    name: Yes Rule
                    pattern: startswith
                    textPrompt: 'YES'
                    voicePrompt: '1'
                    spokenVoicePrompt: to select YES
                    colour: '#00947d'
        description: Response Rules object used to update Response Rules
        required: true
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    delete:
      tags:
        - Response Rules
      x-sdkOperation: delete
      summary: Delete a response rule
      description: Deletes a Response Rule object.
      operationId: responseRuleDelete
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: responseRuleId
          in: path
          required: true
          description: Response Rule Id
          schema:
            type: string
            example: 64BC5314665B947B
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/contacts':
    post:
      tags:
        - Contacts
      x-sdkOperation: create
      x-isPost: true
      summary: Create a contact
      description: Creates a Contact object. The Contact can be used as a recipient when sending multi-channel messages.
      operationId: contactCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Contact-Accept'
        - $ref: '#/components/parameters/Contact-Content-Type'
      requestBody:
        content:
          application/vnd.whispir.contact-v1+json:
            schema:
              $ref: '#/components/schemas/Contact'
            examples:
              Basic:
                value:
                  firstName: John
                  lastName: Wick
                  workMobilePhone1: '61400400400'
                  workEmailAddress1: testUser@example.com
                  workCountry: Australia
                  timezone: Australia/Melbourne
              Comprehensive:
                value:
                  firstName: John
                  lastName: Wick
                  workMobilePhone1: '61400400400'
                  workEmailAddress1: testUser@example.com
                  workCountry: Australia
                  timezone: Australia/Melbourne
                  title: Dr
                  workMobilePhone2: '61500500500'
                  workEmailAddress2: newUser@example.com
                  workPhoneAreaCode1: '09'
                  workPhone1: '5006000'
                  workPhoneAreaCode2: '09'
                  workPhone2: '5007000'
                  workFaxAreaCode1: '09'
                  workFax1: '5008000'
                  workSatellitePhone: '61600600600'
                  workOtherPhone: '61700700700'
                  workAddress1: Level 15
                  workAddress2: 360 Collins St
                  workSuburb: Melboure
                  workState: Victoria
                  workPostCode: '3000'
                  workPostalAddress1: Level 15
                  workPostalAddress2: 360 Collins St
                  workPostalSuburb: Melboure
                  workPostalState: Victoria
                  workPostalPostCode: '3000'
                  personalEmailAddress1: personalPrimaryUser@example.com
                  personalEmailAddress2: personalSecondaryUser@example.com
                  personalAddress1: Level 15
                  personalAddress2: 360 Collins St
                  personalSuburb: Melboure
                  personalState: Victoria
                  personalPostCode: '3000'
                  personalCountry: Australia
                  personalPhoneAreaCode1: '09'
                  personalPhone1: '5006000'
                  personalPhoneAreaCode2: '09'
                  personalPhone2: '5007000'
                  personalFaxAreaCode1: '09'
                  personalFax1: '5008000'
                  otherPhoneAreaCode1: '09'
                  otherPhone1: '5009000'
                  otherMobile: '61900900900'
                  otherFirstName: Harold
                  otherLastName: Wickman
                  otherTitle: Mr
                  status: A
                  companyName: Whispir
                  jobTitle: Software Engineer
                  division: Technology
                  businessUnit: Core Platform
                  department: Research & Development
                  teamName1: Optimus Prime
                  teamName2: Bumblebee
                  role1: Administrator
                  role2: Analyst
                  locations:
                    - latitude: 41.9028
                      longitude: -12.4964
                      type: CurrentLocation
                  messagingoptions:
                    - channel: sms
                      enabled: true
                      primary: WorkMobilePhone1
                      secondary: WorkMobilePhone1
                      tertiary: WorkMobilePhone1
          application/vnd.whispir.contact-v1+xml:
            schema:
              $ref: '#/components/schemas/Contact'
            examples:
              Basic:
                value:
                  firstName: John
                  lastName: Wick
                  workMobilePhone1: '61400400400'
                  workEmailAddress1: testUser@example.com
                  workCountry: Australia
                  timezone: Australia/Melbourne
              Comprehensive:
                value:
                  firstName: John
                  lastName: Wick
                  workMobilePhone1: '61400400400'
                  workEmailAddress1: testUser@example.com
                  workCountry: Australia
                  timezone: Australia/Melbourne
                  title: Dr
                  workMobilePhone2: '61500500500'
                  workEmailAddress2: newUser@example.com
                  workPhoneAreaCode1: '09'
                  workPhone1: '5006000'
                  workPhoneAreaCode2: '09'
                  workPhone2: '5007000'
                  workFaxAreaCode1: '09'
                  workFax1: '5008000'
                  workSatellitePhone: '61600600600'
                  workOtherPhone: '61700700700'
                  workAddress1: Level 15
                  workAddress2: 360 Collins St
                  workSuburb: Melboure
                  workState: Victoria
                  workPostCode: '3000'
                  workPostalAddress1: Level 15
                  workPostalAddress2: 360 Collins St
                  workPostalSuburb: Melboure
                  workPostalState: Victoria
                  workPostalPostCode: '3000'
                  personalEmailAddress1: personalPrimaryUser@example.com
                  personalEmailAddress2: personalSecondaryUser@example.com
                  personalAddress1: Level 15
                  personalAddress2: 360 Collins St
                  personalSuburb: Melboure
                  personalState: Victoria
                  personalPostCode: '3000'
                  personalCountry: Australia
                  personalPhoneAreaCode1: '09'
                  personalPhone1: '5006000'
                  personalPhoneAreaCode2: '09'
                  personalPhone2: '5007000'
                  personalFaxAreaCode1: '09'
                  personalFax1: '5008000'
                  otherPhoneAreaCode1: '09'
                  otherPhone1: '5009000'
                  otherMobile: '61900900900'
                  otherFirstName: Harold
                  otherLastName: Wickman
                  otherTitle: Mr
                  status: A
                  companyName: Whispir
                  jobTitle: Software Engineer
                  division: Technology
                  businessUnit: Core Platform
                  department: Research & Development
                  teamName1: Optimus Prime
                  teamName2: Bumblebee
                  role1: Administrator
                  role2: Analyst
                  locations:
                    - latitude: 41.9028
                      longitude: -12.4964
                      type: CurrentLocation
                  messagingoptions:
                    - channel: sms
                      enabled: true
                      primary: WorkMobilePhone1
                      secondary: WorkMobilePhone1
                      tertiary: WorkMobilePhone1
        description: Contact object to be created
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Contact'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    get:
      tags:
        - Contacts
      x-sdkOperation: list
      summary: List contacts
      description: |
        **Note:** There is no global search feature available where one can search on all the workspaces present in the system (under allowed user permission). So, When no workspace is provided, the search is performed on the default workspace of the user.

        ### Searching for contacts with Custom Fields

        As Whispir supports extension of the default Contact Profile through the use of Custom Fields. There may be cases where users want to search for Contacts that contain these specific fields. As such, the Whispir API supports searching for contacts using these custom fields.

        Any custom field can be searched by adding the custom_ prepended to the name.

        For example, if the field name is **StaffId**, then the URL would search for:

        `/contacts?custom_StaffId=12345`
      operationId: contactList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
        - name: fieldname
          in: query
          description: |
            String Specifies the field name of the contact object. The field name could be any thing as long as it is a valid contact attribute.  
            Example: `http://api.whispir.com/contacts?firstName=Sam`
          schema:
            type: string
        - name: customFields
          in: query
          description: Custom Fields
          required: false
          schema:
            type: boolean
        - $ref: '#/components/parameters/Contact-Accept'
      responses:
        '200':
          $ref: '#/components/responses/Contacts'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/contacts/{contactId}':
    get:
      tags:
        - Contacts
      x-sdkOperation: retrieve
      summary: Retrieve a contact
      description: |
        ### Showing Custom Fields

        Whispir supports extension of the default Contact Profile through the use of Custom Fields. Custom fields can support other fields that may be required to be stored on your Contacts, such as Staff ID, Internal Billing Codes, or One Up Manager.

        These custom fields can be configured on any account through a Change Request to Whispir.

        In order to reveal these custom fields on the contact profile, you can use the `customFields=true` flag within your API request.

        Example: `/contacts/AB38CB3EFD38AFDB?customFields=true`
      operationId: contactRetrieve
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: contactId
          in: path
          description: Enter contact id.
          required: true
          schema:
            type: string
            example: 5130D4DDDED0AD4D69D33C3E64419A51
        - name: fields
          in: query
          description: 'NOTE: once again, the equal sign must be intended as "contains" rather than "equals". So if we search the people whose firstName equals Sam we might be given back e.g. Sam, Samantha, Samuel. Similarly for numbers: if we search Contacts with staffId equal to 1234 we will given back e.g. the contact with staffID equal to 1234 but also e.g. a contact with staffID equal to 98123456. If you need to narrow down please consider applying additional filters'
          required: false
          schema:
            type: string
            example: 'workEmailAddress1,workMobilePhone1&firstname=Sam'
        - $ref: '#/components/parameters/Contact-Accept'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/Contact-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
          content:
            application/vnd.whispir.contact-v1+json:
              schema:
                $ref: '#/components/schemas/Contact'
              examples:
                Example 1:
                  value:
                    firstName: John
                    lastName: Wick
                    workMobilePhone1: '61400400400'
                    workEmailAddress1: testUser@example.com
                    workCountry: Australia
                    timezone: Australia/Melbourne
                    title: Dr
                    workMobilePhone2: '61500500500'
                    workEmailAddress2: newUser@example.com
                    workPhoneAreaCode1: '09'
                    workPhone1: '5006000'
                    workPhoneAreaCode2: '09'
                    workPhone2: '5007000'
                    workFaxAreaCode1: '09'
                    workFax1: '5008000'
                    workSatellitePhone: '61600600600'
                    workOtherPhone: '61700700700'
                    workAddress1: Level 15
                    workAddress2: 360 Collins St
                    workSuburb: Melboure
                    workState: Victoria
                    workPostCode: '3000'
                    workPostalAddress1: Level 15
                    workPostalAddress2: 360 Collins St
                    workPostalSuburb: Melboure
                    workPostalState: Victoria
                    workPostalPostCode: '3000'
                    personalEmailAddress1: personalPrimaryUser@example.com
                    personalEmailAddress2: personalSecondaryUser@example.com
                    personalAddress1: Level 15
                    personalAddress2: 360 Collins St
                    personalSuburb: Melboure
                    personalState: Victoria
                    personalPostCode: '3000'
                    personalCountry: Australia
                    personalPhoneAreaCode1: '09'
                    personalPhone1: '5006000'
                    personalPhoneAreaCode2: '09'
                    personalPhone2: '5007000'
                    personalFaxAreaCode1: '09'
                    personalFax1: '5008000'
                    otherPhoneAreaCode1: '09'
                    otherPhone1: '5009000'
                    otherMobile: '61900900900'
                    otherFirstName: Harold
                    otherLastName: Wickman
                    otherTitle: Mr
                    status: A
                    companyName: Whispir
                    jobTitle: Software Engineer
                    division: Technology
                    businessUnit: Core Platform
                    department: Research & Development
                    teamName1: Optimus Prime
                    teamName2: Bumblebee
                    role1: Administrator
                    role2: Analyst
                    locations:
                      - latitude: 41.9028
                        longitude: -12.4964
                        type: CurrentLocation
                    messagingoptions:
                      - channel: sms
                        enabled: true
                        primary: WorkMobilePhone1
                        secondary: WorkMobilePhone1
                        tertiary: WorkMobilePhone1
                    type: PROJECT
                    mri: '61400400400'
                    devices:
                      - {}
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                    lastModifiedTime: '2022-03-29T16:30:18+11:00'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    put:
      tags:
        - Contacts
      x-sdkOperation: update
      summary: Update a contact
      description: |
        The application must provide all the fields during the update request, even if they are not being updated.

        ## **NOTE:** Any missing fields will be automatically removed from the existing record.

        **Note:** You cannot selectively update the contact fields needed as this is a PUT request.

        1.  GET `/contact/{id of contact}`
        2.  Update the contact field in the object to the required value
        3.  PUT `/contact/{id of contact}` the new object

        The response to the PUT request upon success is usually a 204 with no content being provided.
      operationId: contactUpdate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: contactId
          in: path
          description: Enter contact id.
          required: true
          schema:
            type: string
            example: 5130D4DDDED0AD4D69D33C3E64419A51
        - $ref: '#/components/parameters/Contact-Accept'
        - $ref: '#/components/parameters/Contact-Content-Type'
      requestBody:
        content:
          application/vnd.whispir.contact-v1+json:
            schema:
              $ref: '#/components/schemas/Contact'
            examples:
              Basic:
                value:
                  firstName: John
                  lastName: Wick
                  workMobilePhone1: '61400400400'
                  workEmailAddress1: testUser@example.com
                  workCountry: Australia
                  timezone: Australia/Melbourne
              Comprehensive:
                value:
                  firstName: John
                  lastName: Wick
                  workMobilePhone1: '61400400400'
                  workEmailAddress1: testUser@example.com
                  workCountry: Australia
                  timezone: Australia/Melbourne
                  title: Dr
                  workMobilePhone2: '61500500500'
                  workEmailAddress2: newUser@example.com
                  workPhoneAreaCode1: '09'
                  workPhone1: '5006000'
                  workPhoneAreaCode2: '09'
                  workPhone2: '5007000'
                  workFaxAreaCode1: '09'
                  workFax1: '5008000'
                  workSatellitePhone: '61600600600'
                  workOtherPhone: '61700700700'
                  workAddress1: Level 15
                  workAddress2: 360 Collins St
                  workSuburb: Melboure
                  workState: Victoria
                  workPostCode: '3000'
                  workPostalAddress1: Level 15
                  workPostalAddress2: 360 Collins St
                  workPostalSuburb: Melboure
                  workPostalState: Victoria
                  workPostalPostCode: '3000'
                  personalEmailAddress1: personalPrimaryUser@example.com
                  personalEmailAddress2: personalSecondaryUser@example.com
                  personalAddress1: Level 15
                  personalAddress2: 360 Collins St
                  personalSuburb: Melboure
                  personalState: Victoria
                  personalPostCode: '3000'
                  personalCountry: Australia
                  personalPhoneAreaCode1: '09'
                  personalPhone1: '5006000'
                  personalPhoneAreaCode2: '09'
                  personalPhone2: '5007000'
                  personalFaxAreaCode1: '09'
                  personalFax1: '5008000'
                  otherPhoneAreaCode1: '09'
                  otherPhone1: '5009000'
                  otherMobile: '61900900900'
                  otherFirstName: Harold
                  otherLastName: Wickman
                  otherTitle: Mr
                  status: A
                  companyName: Whispir
                  jobTitle: Software Engineer
                  division: Technology
                  businessUnit: Core Platform
                  department: Research & Development
                  teamName1: Optimus Prime
                  teamName2: Bumblebee
                  role1: Administrator
                  role2: Analyst
                  locations:
                    - latitude: 41.9028
                      longitude: -12.4964
                      type: CurrentLocation
                  messagingoptions:
                    - channel: sms
                      enabled: true
                      primary: WorkMobilePhone1
                      secondary: WorkMobilePhone1
                      tertiary: WorkMobilePhone1
          application/vnd.whispir.contact-v1+xml:
            schema:
              $ref: '#/components/schemas/Contact'
            examples:
              Basic:
                value:
                  firstName: John
                  lastName: Wick
                  workMobilePhone1: '61400400400'
                  workEmailAddress1: testUser@example.com
                  workCountry: Australia
                  timezone: Australia/Melbourne
              Comprehensive:
                value:
                  firstName: John
                  lastName: Wick
                  workMobilePhone1: '61400400400'
                  workEmailAddress1: testUser@example.com
                  workCountry: Australia
                  timezone: Australia/Melbourne
                  title: Dr
                  workMobilePhone2: '61500500500'
                  workEmailAddress2: newUser@example.com
                  workPhoneAreaCode1: '09'
                  workPhone1: '5006000'
                  workPhoneAreaCode2: '09'
                  workPhone2: '5007000'
                  workFaxAreaCode1: '09'
                  workFax1: '5008000'
                  workSatellitePhone: '61600600600'
                  workOtherPhone: '61700700700'
                  workAddress1: Level 15
                  workAddress2: 360 Collins St
                  workSuburb: Melboure
                  workState: Victoria
                  workPostCode: '3000'
                  workPostalAddress1: Level 15
                  workPostalAddress2: 360 Collins St
                  workPostalSuburb: Melboure
                  workPostalState: Victoria
                  workPostalPostCode: '3000'
                  personalEmailAddress1: personalPrimaryUser@example.com
                  personalEmailAddress2: personalSecondaryUser@example.com
                  personalAddress1: Level 15
                  personalAddress2: 360 Collins St
                  personalSuburb: Melboure
                  personalState: Victoria
                  personalPostCode: '3000'
                  personalCountry: Australia
                  personalPhoneAreaCode1: '09'
                  personalPhone1: '5006000'
                  personalPhoneAreaCode2: '09'
                  personalPhone2: '5007000'
                  personalFaxAreaCode1: '09'
                  personalFax1: '5008000'
                  otherPhoneAreaCode1: '09'
                  otherPhone1: '5009000'
                  otherMobile: '61900900900'
                  otherFirstName: Harold
                  otherLastName: Wickman
                  otherTitle: Mr
                  status: A
                  companyName: Whispir
                  jobTitle: Software Engineer
                  division: Technology
                  businessUnit: Core Platform
                  department: Research & Development
                  teamName1: Optimus Prime
                  teamName2: Bumblebee
                  role1: Administrator
                  role2: Analyst
                  locations:
                    - latitude: 41.9028
                      longitude: -12.4964
                      type: CurrentLocation
                  messagingoptions:
                    - channel: sms
                      enabled: true
                      primary: WorkMobilePhone1
                      secondary: WorkMobilePhone1
                      tertiary: WorkMobilePhone1
        description: contact object that needs to be update contact
        required: true
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    delete:
      tags:
        - Contacts
      x-sdkOperation: delete
      summary: Delete a contact
      description: |
        After performing this request, the response does not contain any information other than the headers as it is not necessary.

        The user has requested to delete a contact, and when the response of 204 No Content is returned, the contact is successfully deleted.
      operationId: contactDelete
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: contactId
          in: path
          description: The id of the contact to be deleted
          required: true
          schema:
            type: string
            example: 5130D4DDDED0AD4D69D33C3E64419A51
        - schema:
            type: string
            enum:
              - deleteAll
          in: query
          name: action
          description: 'The API call involves passing an `action=deleteAll` query parameter. Once this action is triggered, all the contact references in all workspaces for a given `contact_id` are deleted asynchronously. There is no way to stop the process once it’s triggered. **Use the action only when you’re definitely sure you want to delete the contact from all workspaces**'
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  /keys:
    post:
      tags:
        - Keys
      x-sdkOperation: create
      x-isPost: true
      summary: Create a key
      description: Creates a Key object.
      operationId: keyCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Unified-Accept'
        - $ref: '#/components/parameters/Unified-Content-Type'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
            examples:
              Example:
                value:
                  id: 7f6a3d23-11f3-406c-9d72-8e8a80c248e4
                  type: basic
                  description: Key used by Engineering for testing
                  secret: sk_yHyTZJJmHF5qe0RoAQQeT3BlbkFJp0Wfgs7HyBshPEF4Wjds
                  createdTime: '2023-01-25T02:25:33+0000'
                  lastModifiedTime: '2022-03-29T16:30:18+11:00'
        description: Key object to be created
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Key'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      x-internal: true
    get:
      tags:
        - Keys
      x-sdkOperation: list
      summary: List keys
      description: |
        List Keys
      operationId: keyList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
        - $ref: '#/components/parameters/Unified-Accept'
      responses:
        '200':
          $ref: '#/components/responses/Keys'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      x-internal: true
  '/keys/{keyId}':
    get:
      tags:
        - Keys
      x-sdkOperation: retrieve
      summary: Retrieve a key
      description: Retrieves the specified key
      operationId: keyRetrieve
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: keyId
          in: path
          description: The key id to fetch
          required: true
          schema:
            type: string
            example: 7f6a3d23-11f3-406c-9d72-8e8a80c248e4
        - $ref: '#/components/parameters/Unified-Accept'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/Unified-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
              examples:
                Example:
                  value:
                    id: 7f6a3d23-11f3-406c-9d72-8e8a80c248e4
                    type: basic
                    description: Key used by Engineering for testing
                    secret: sk_yHyTZ***************************************Wjds
                    createdTime: '2023-01-25T02:25:33+0000'
                    lastModifiedTime: '2022-03-29T16:30:18+11:00'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      x-internal: true
    put:
      tags:
        - Keys
      x-sdkOperation: update
      summary: Update a key
      description: Updates the specified key
      operationId: keyUpdate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: keyId
          in: path
          description: The key id to update
          required: true
          schema:
            type: string
            example: 7f6a3d23-11f3-406c-9d72-8e8a80c248e4
        - $ref: '#/components/parameters/Unified-Accept'
        - $ref: '#/components/parameters/Unified-Content-Type'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Key'
            examples:
              Example:
                value:
                  id: 7f6a3d23-11f3-406c-9d72-8e8a80c248e4
                  type: basic
                  description: Key used by Engineering for testing
                  secret: sk_yHyTZJJmHF5qe0RoAQQeT3BlbkFJp0Wfgs7HyBshPEF4Wjds
                  createdTime: '2023-01-25T02:25:33+0000'
                  lastModifiedTime: '2022-03-29T16:30:18+11:00'
        description: Key object that needs to be updated
        required: true
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      x-internal: true
    delete:
      tags:
        - Keys
      x-sdkOperation: delete
      summary: Delete a key
      description: Deletes the speficied key
      operationId: keyDelete
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: keyId
          in: path
          description: The id of the key to be deleted
          required: true
          schema:
            type: string
            example: 7f6a3d23-11f3-406c-9d72-8e8a80c248e4
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      x-internal: true
  '/workspaces/{workspaceId}/distributionlists':
    post:
      tags:
        - Distribution Lists
      x-sdkOperation: create
      x-isPost: true
      summary: Create a distribution list
      description: |
        Distribution lists can be created within the Default Workspace, or within a Specific Workspace. More information on Workspaces will be provided later in this documentation.

        The MRI value is important here. It is the required unique identifier for any communications that are to be sent out to this distribution list.
      operationId: distributionListCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/DistributionList-Content-Type'
        - $ref: '#/components/parameters/DistributionList-Accept'
      requestBody:
        content:
          application/vnd.whispir.distributionlist-v1+json:
            schema:
              $ref: '#/components/schemas/DistributionList'
            examples:
              Example:
                value:
                  id: 5AFEB61102963D7
                  name: My Distribution List
                  mri: My_Distribution_List.company_name@list.company.whispir.sg
                  description: My Distribution list
                  memberCount: '4'
                  access: Open
                  visibility: Public
                  link:
                    - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                      rel: self
                      method: GET
                      host: api.au.whispir.com
                      port: -1
                  distListIds: '3A21DCC420494A48, 07172DC9AC3E97A75B5A41536C132CA0'
                  distlistdetails:
                    - id: 123ADAB420493B83
                      name: John Smith
                      type: User
                      link:
                        - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                          rel: self
                          method: GET
                          host: api.au.whispir.com
                          port: -1
        description: Distribution list object that needs to be create Distribution list
        required: true
      responses:
        '201':
          $ref: '#/components/responses/DistributionList'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    get:
      tags:
        - Distribution Lists
      x-sdkOperation: list
      summary: List distribution lists
      description: |-
        The distribution list is usually retrieved by its id, but one can also search or refer to the distribution list by its name. This feature has to do with the unique name requirement for the distribution list.

        Apart from the name, the description field can also be used to search for a distribution list. While name can be directly used to send in messages, the description is solely for the purpose of search. Once search yields the required result, the mri has to be picked from the selected DL and then used to send the messages.

        Both these operations can be performed by passing in the relevant search parameters in the URL as query params.
      operationId: distributionListList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/DistributionList-Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
        - name: name
          in: query
          required: false
          description: Specifies the name of the Distribution List to be searched for. It is based on the uniqueness of the name of the Distribution List. If the name contains spaces it is suggested - but not required - to escape them
          schema:
            type: string
            example: My Distribution List
        - name: description
          in: query
          required: false
          description: Specifies the descrition for the Distribution List to be searched for. If the description contains spaces it is suggested - but not required - to escape them
          schema:
            type: string
            example: Sample Distribution List
      responses:
        '200':
          $ref: '#/components/responses/DistributionLists'
        '201':
          $ref: '#/components/responses/DistributionLists'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/distributionlists/{distributionlistId}':
    get:
      tags:
        - Distribution Lists
      x-sdkOperation: retrieve
      summary: Retrieve a distribution list
      description: |
        A distribution list allows you to associate the following:

        *   **ContactIds** (type:String) is a comma separated list of Contact IDs that you would like added to the list.
        *   **UserIds** (type:String) specifies the Whispir Users that should also be notified when this list is used.
        *   **DistListIds** (type:String) specifies the nested lists that are contained within this distribution list.

        Any or all three of these can be updated via the PUT method along with the DL properties (name, description, location etc).

        The steps usually are:

        1. Create a Distribution List (DL)
        2. While creating the DL itself, you can put in the ContactIds, UserIds, distListIds (nested) so that the DL is created with those values readily placed in.
        3. After the DL is created, if you want to add/update the values, then
        4. Do a GET request to retrieve the specific DL.
           -  This will return you the DL object
        5. Modify the DL properties (name, description, contactIds, UserIds, dlIds, location etc) as needed
        6. Do a PUT request to update the DL details
           -  Successful update gives you a 204 No Content
           -  The contactIds, userIds, distListIds can be passed all together in a single request.

        Note:
        1.  If an existing contactId is again added, it does neither throws an error, nor create two entries. The contactId is just neglected and only 1 record is maintained.
        2.  If the PUT request was successful, the expected response code is a 204 No Content
        3.  For Modifying the Location Information refer to Location Tags for Distribution Lists
      operationId: distributionListRetrieve
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/DistributionList-Accept'
        - name: distributionlistId
          in: path
          description: Enter Distribution id.
          required: true
          schema:
            type: string
            example: 5EFBA89462693D7B
      responses:
        '200':
          $ref: '#/components/responses/DistributionList'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    put:
      tags:
        - Distribution Lists
      x-sdkOperation: update
      summary: Update a distribution list
      description: |
        Any or all three of these can be updated via the PUT method along with the DL properties (name, description, location etc).

        The steps usually are:
        1.  Create a Distribution List (DL)
        2.  While creating the DL itself, you can put in the ContactIds, UserIds, distListIds (nested) so that the DL is created with those values readily placed in.
        3.  After the DL is created, if you want to add/update the values, then
        4.  Do a GET request to retrieve the specific DL.
            - This will return you the DL object
        5.  Modify the DL properties (name, description, contactIds, UserIds, dlIds, location etc) as needed
        6.  Do a PUT request to update the DL details
            - Successful update gives you a 204 No Content
            - The contactIds, userIds, distListIds can be passed all together in a single request.

        Note:
        - If an existing contactId is again added, it does neither throws an error, nor create two entries. The contactId is just neglected and only 1 record is maintained.
        - If the PUT request was successful, the expected response code is a 204 No Content
        - For Modifying the Location Information refer to Location Tags for Distribution Lists
      operationId: distributionListUpdate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/DistributionList-Content-Type'
        - $ref: '#/components/parameters/DistributionList-Accept'
        - name: distributionlistId
          in: path
          description: Enter Distribution id.
          required: true
          schema:
            type: string
            example: 5EFBA89462693D7B
      requestBody:
        content:
          application/vnd.whispir.distributionlist-v1+json:
            schema:
              $ref: '#/components/schemas/DistributionList'
            examples:
              Example:
                value:
                  id: 5AFEB61102963D7
                  name: My Distribution List
                  mri: My_Distribution_List.company_name@list.company.whispir.sg
                  description: My Distribution list
                  memberCount: '4'
                  access: Open
                  visibility: Public
                  link:
                    - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                      rel: self
                      method: GET
                      host: api.au.whispir.com
                      port: -1
                  distListIds: '3A21DCC420494A48, 07172DC9AC3E97A75B5A41536C132CA0'
                  distlistdetails:
                    - id: 123ADAB420493B83
                      name: John Smith
                      type: User
                      link:
                        - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                          rel: self
                          method: GET
                          host: api.au.whispir.com
                          port: -1
        description: Distribution list object that needs to be update Distribution list
        required: true
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    delete:
      tags:
        - Distribution Lists
      x-sdkOperation: delete
      summary: Delete a distribution list
      description: |
        You can only delete the distribution list that you have created or a valid userId associated with the specific distribution list.
      operationId: distributionListDelete
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: distributionlistId
          in: path
          description: The id of the distributionlists to be deleted
          required: true
          schema:
            type: string
            example: 5EFBA89462693D7B
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/scenarios':
    post:
      tags:
        - Scenarios
      x-sdkOperation: create
      x-isPost: true
      summary: Create a scenario
      description: |
        A scenario is a combination of a message and contacts. So, its structure contains section for both message as well as contact information. API currently only supports creation of scenario with SMS as communication mode.
      operationId: scenarioCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Scenario-Content-Type'
        - $ref: '#/components/parameters/Scenario-Accept'
      requestBody:
        content:
          application/vnd.whispir.scenario-v1+json:
            schema:
              $ref: '#/components/schemas/Scenario'
            examples:
              example-1:
                value:
                  name: Fire Evacuation Block A
                  description: Fire evacuation notification for A block residents
                  allowedUsers: SELECTEDUSERS
                  allowedUserIds: string
                  message:
                    to: '61400400400'
                    subject: Test Message
                    body: This is the body of my test SMS message
        description: Scenario list object that needs to be create Scenario
        required: true
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              $ref: '#/components/headers/Scenario-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
            Location:
              schema:
                type: string
                example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/scenarios/747AB7E716C1802B6476784AEB5C9BB8'
              description: The URI to fetch details of the resource.
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    get:
      tags:
        - Scenarios
      x-sdkOperation: list
      summary: List scenarios
      description: Returns a list of your scenarios.
      operationId: scenarioList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Scenario-Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/Scenario-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
          content:
            application/vnd.whispir.scenario-v1+json:
              schema:
                $ref: '#/components/schemas/ScenarioCollection'
              examples:
                example-1:
                  value:
                    scenarios:
                      - name: Fire Evacuation Block A
                        description: Fire evacuation notification for A block residents
                        allowedUsers: SELECTEDUSERS
                        allowedUserIds: 4DC922649AFE370C
                        message:
                          to: '61400400400'
                          subject: Test Message
                          body: This is the body of my test SMS message
                        to: '61400400400'
                        subject: Fire Evacuation
                        label: fire-evacuation
                        email:
                          body: This is the body of my email message.
                          footer: This is the footer of my message.
                          type: text/plain
                        voice:
                          header: 'This is the introduction, read out to the recipient prior to any key press.'
                          body: 'This is the body of the voice call, read out after the key press'
                          type: 'Pin:7171,ConfCall:1800123123,ConfAccountNo:098711234,ConfPinNo:8181,ConfModPinNo:4242'
                          footer: ''
                          other: ''
                          resources:
                            attachment:
                              - attachmentName: TestIcon.png
                                derefUri: iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==
                                attachmentDesc: My photo
                        web:
                          body: This is the content of my web publishing or Rich Push Message
                          type: text/plain
                        social:
                          social:
                            - id: social
                              body: Facebook Content
                              type: text/plain
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/scenarios/{scenarioId}':
    get:
      tags:
        - Scenarios
      x-sdkOperation: retrieve
      summary: Retrieve a scenario
      description: Retrieves a Scenario object.
      operationId: scenarioRetrieve
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Scenario-Accept'
        - name: scenarioId
          in: path
          description: Enter Scenarios id.
          required: true
          schema:
            type: string
            example: 41048D9483C8CF2A
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/Scenario-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
          content:
            application/vnd.whispir.scenario-v1+json:
              schema:
                $ref: '#/components/schemas/Scenario'
              examples:
                example:
                  value:
                    name: Fire Evacuation Block A
                    description: Fire evacuation notification for A block residents
                    allowedUsers: SELECTEDUSERS
                    allowedUserIds: string
                    message:
                      to: '61400400400'
                      subject: Test Message
                      body: This is the body of my test SMS message
                    to: string
                    subject: string
                    label: string
                    email:
                      body: This is the body of my email message.
                      footer: This is the footer of my message.
                      type: text/plain
                    voice:
                      header: 'This is the introduction, read out to the recipient prior to any key press.'
                      body: 'This is the body of the voice call, read out after the key press'
                      type: 'Pin:7171,ConfCall:1800123123,ConfAccountNo:098711234,ConfPinNo:8181,ConfModPinNo:4242'
                      footer: ''
                      other: ''
                      resources:
                        attachment:
                          - attachmentName: TestIcon.png
                            derefUri: iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==
                            attachmentDesc: My photo
                    web:
                      body: This is the content of my web publishing or Rich Push Message
                      type: text/plain
                    social:
                      social:
                        - id: social
                          body: Facebook Content
                          type: text/plain
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    post:
      tags:
        - Scenarios
      x-sdkOperation: createRun
      summary: Run a scenario
      description: |
        Running a scenario triggers the communication to the intended recipients. The message (static or dynamic) will be sent on all the provided channels.

        Running a scenario is very simple to do. The specific scenario has to called via a /POST request.

        Step wise example:
        1. Get all the scenarios
        2. Pick the required scenario’s link attribute
        3. Make a /POST call

        Now invoking this scenario is just making a /POST call.
      operationId: scenarioRunCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Scenario-Content-Type'
        - $ref: '#/components/parameters/Scenario-Accept'
        - name: scenarioId
          in: path
          description: Enter Scenarios id.
          required: true
          schema:
            type: string
            example: 41048D9483C8CF2A
      responses:
        '202':
          description: Accepted
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
            Location:
              schema:
                type: string
                example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/scenarios/747AB7E716C1802B6476784AEB5C9BB8'
              description: The URI to fetch details of the scenario.
            Content-Type:
              $ref: '#/components/headers/Scenario-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    put:
      tags:
        - Scenarios
      x-sdkOperation: update
      summary: Update a scenario
      description: Updates a Scenario object.
      operationId: scenarioUpdate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Scenario-Content-Type'
        - $ref: '#/components/parameters/Scenario-Accept'
        - name: scenarioId
          in: path
          description: Enter Scenarios id.
          required: true
          schema:
            type: string
            example: 41048D9483C8CF2A
      requestBody:
        content:
          application/vnd.whispir.scenario-v1+json:
            schema:
              $ref: '#/components/schemas/Scenario'
            examples:
              example-1:
                value:
                  name: Fire Evacuation Block A
                  description: Fire evacuation notification for A block residents
                  allowedUsers: SELECTEDUSERS
                  allowedUserIds: 4DC922649AFE370C
                  message:
                    to: '61400400400'
                    subject: Test Message
                    body: This is the body of my test SMS message
                  to: '61400400400'
                  subject: Fire Evacuation
                  label: fire-evacuation
                  email:
                    body: This is the body of my email message.
                    footer: This is the footer of my message.
                    type: text/plain
                  voice:
                    header: 'This is the introduction, read out to the recipient prior to any key press.'
                    body: 'This is the body of the voice call, read out after the key press'
                    type: 'Pin:7171,ConfCall:1800123123,ConfAccountNo:098711234,ConfPinNo:8181,ConfModPinNo:4242'
                    footer: ''
                    other: ''
                    resources:
                      attachment:
                        - attachmentName: TestIcon.png
                          derefUri: iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==
                          attachmentDesc: My photo
                  web:
                    body: This is the content of my web publishing or Rich Push Message
                    type: text/plain
                  social:
                    social:
                      - id: social
                        body: Facebook Content
                        type: text/plain
        description: Modifying a scenario obeys the same requirements seen at the moment of their creation
        required: true
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    delete:
      tags:
        - Scenarios
      x-sdkOperation: delete
      summary: Delete a scenario
      description: Deletes a Scenario object.
      operationId: scenarioDelete
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: scenarioId
          in: path
          description: The id of the Scenarios to be deleted
          required: true
          schema:
            type: string
            example: 41048D9483C8CF2A
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  /callbacks:
    post:
      tags:
        - Callbacks
      x-sdkOperation: create
      x-isPost: true
      summary: Create a callback
      description: |-
        Whispir’s callback service can be configured to send simple notifications and some associated metadata via API callbacks to an endpoint of your choice when one of the following events occurs:

        - A message has been replied to
        - A message delivery failure occurred [wrong number or service unavailable]

        > **IMPORTANT**: unlike all the other API endpoints seen so far, Callbacks are not defined at a Workspace level but at a Company level. In other words, they can be referenced from any Workspace of that Company.

        Callbacks are used widely in web applications to transfer information that may become available at some point in the future. These are sometimes referred to as ‘webhooks’.

        The benefits of using API callbacks are:
        - Whispir will instantly notify your callback server when a change has occurred on Whispir platform.
        - You won't need to continuously poll the `/messageresponses` or `/messagestatus` endpoints, so you won't be reducing your API daily cap.
        - Callbacks themselves are on us, so they do not count towards the daily quota limits.
        - Response-based workflows can be built quickly and effectively.

        The following diagram explains the entire high-level process:
        ![API diagram](https://github.com/whispir/openapi/blob/main/assets/images/Whispir_API_diagram.png?raw=true)

        ## Callback endpoint validation
        During callback creation, Whispir makes a `GET` request to ensure the callback `url` provided is valid and available. The HTTP response code returned by the callback endpoint for this request must be `200`. Any other code is considered a failure and the callback creation will fail. This is the only time a `GET` request is made. Subsequent requests (callbacks) will all be `POST` requests.

        ## Configuration tips

        - Always use a domain name for the callback. Do not use an IP.
        - Ensure that your callback server is reachable on the internet. It should not be localhost or an intranet-only application that can't be reached from the World Wide Web.
        - Limit the port to 80 or 443. Do not use any other ports.
        - Depending on the type chosen (‘json’ or ‘xml’) for the Content-Type, Whispir would make a similar `GET` (and subsequently `POST`) call. Ensure that your web server is configured to handle such MIME types.
        - Most importantly, if your application infrastructure is behind a firewall, make sure that the firewall allows an incoming `POST` request.
      operationId: callbackCreate
      requestBody:
        content:
          application/vnd.whispir.api-callback-v1+json:
            schema:
              $ref: '#/components/schemas/Callback'
            examples:
              Callback object:
                value:
                  id: A8B8C829A72D92FE
                  name: NEW callback tester 2
                  url: 'https://www.google.com/'
                  auth:
                    type: queryparam
                    key: abcd1234
                  retriesEnabled: false
                  contentType: json
                  email: user002@testmail.whispir.com
                  removeHTML: enabled
                  callbacks:
                    reply: enabled
                    undeliverable: enabled
        description: Callbacks list object that needs to be create Callbacks
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Callback'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Callback-Content-Type'
        - $ref: '#/components/parameters/Callback-Accept'
    get:
      tags:
        - Callbacks
      x-sdkOperation: list
      summary: List callbacks
      description: List callbacks
      operationId: callbackList
      responses:
        '200':
          description: OK
          content:
            application/vnd.whispir.api-callback-v1+json:
              schema:
                $ref: '#/components/schemas/CallbackCollection'
              examples:
                Example:
                  value:
                    status: 1 to 1 of 1
                    callbacks:
                      - id: 4452AC8359535C46
                        name: Callback Name
                        url: 'https://example.com/callback'
                        auth:
                          type: basicauth
                          key: test34
                        contentType: json
                        removeHTML: disabled
                        retriesEnabled: true
                        email: me@example.com
                        callbacks:
                          reply: disabled
                          undeliverable: disabled
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
          headers:
            Content-Type:
              $ref: '#/components/headers/Callback-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Callback-Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
  '/callbacks/{callbackId}':
    get:
      tags:
        - Callbacks
      x-sdkOperation: retrieve
      summary: Retrieve a callback
      description: Retrieve a callback object
      operationId: callbackRetrieve
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Callback-Accept'
        - name: callbackId
          in: path
          required: true
          description: Enter Callbacks Id
          schema:
            type: string
            example: F98A1DD47C3CA1F5
      responses:
        '200':
          $ref: '#/components/responses/Callback'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    put:
      tags:
        - Callbacks
      x-sdkOperation: update
      summary: Update a callback
      description: Update a callback object
      operationId: callbackUpdate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: callbackId
          in: path
          description: Enter Callback id.
          required: true
          schema:
            type: string
            example: 41048D9483C8CF2A
        - $ref: '#/components/parameters/Callback-Content-Type'
        - $ref: '#/components/parameters/Callback-Accept'
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      requestBody:
        content:
          application/vnd.whispir.api-callback-v1+json:
            schema:
              $ref: '#/components/schemas/Callback'
            examples:
              Example 1:
                value:
                  name: Callback Name
                  url: 'https://example.com/callback'
                  auth:
                    type: basicauth
                    key: test34
                  contentType: json
                  removeHTML: disabled
                  retriesEnabled: true
                  email: me@example.com
                  callbacks:
                    reply: disabled
                    undeliverable: disabled
        description: The Callback object to update
    delete:
      summary: Delete a callback
      x-sdkOperation: delete
      operationId: callbackDelete
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/Callback-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '415':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
      description: Delete a callback object
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Callback-Content-Type'
        - $ref: '#/components/parameters/Callback-Accept'
        - name: callbackId
          in: path
          description: Enter Callback id.
          required: true
          schema:
            type: string
            example: 41048D9483C8CF2A
      tags:
        - Callbacks
  '/callbacks/{callbackId}/calls':
    get:
      tags:
        - Callbacks
      x-sdkOperation: listCalls
      summary: List callback calls
      description: List of calls to the callback
      operationId: callbackCallList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
        - name: callbackId
          in: path
          required: true
          description: Enter Callbacks Id
          schema:
            type: string
            example: F98A1DD47C3CA1F5
        - name: status
          in: query
          description: 'To specifically retrieve the FAILED/SUCCESS calls, one can pass a status query param in the URL.'
          schema:
            type: string
            enum:
              - SUCCESS
              - FAILED
        - $ref: '#/components/parameters/CallbackCall-Accept'
      responses:
        '200':
          $ref: '#/components/responses/CallbackCalls'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    put:
      tags:
        - Callbacks
      x-sdkOperation: updateCall
      summary: Update a callback call status
      description: |
        As every call to a callback endpoint is now stored within the calls endpoint, it’s possible that when failed calls are successfully processed through a manual exercise, that these calls will then need to be updated to reflect the current status.

        Take the following example:
        1.  Callback server becomes unavailable
        2.  A message is sent via Whispir with callbacks enabled.
        3.  The Message gets a response, and this triggers the callback
        4.  The callback server is unavailable, so the response is stored with a status of 'FAILED’
        5.  After 24h, the callback server becomes available again. Retries have stopped, so this information will not automatically flow into the callback server.
        6.  The customer writes a script to GET all of the calls stored in the /calls endpoint and process them.
        7.  Once successfully processed, the customer’s script should update the contents of the /calls endpoint to reflect the current status of 'SUCCESS’.

        This process can be facilitated with the use of a PUT request to the /calls endpoint in Whispir.

        To update a list of attempted API calls from the Whispir API you can execute an HTTP PUT using the /calls endpoint on a specific callback.

        Users can specify multiple IDs to be updated using the following notation:

        `/callbacks/:id/calls?id=ID1&id=ID2&id=ID3...`

        This ensures that all callbacks that have been processed can be updated in a single API call, rather than having to make a single API call per callback attempt.

        The PUT request takes a single API parameter in the body
      operationId: callbackCallUpdate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: callbackId
          in: path
          description: Enter Callback id.
          required: true
          schema:
            type: string
            example: 41048D9483C8CF2A
        - $ref: '#/components/parameters/CallbackCall-Content-Type'
        - $ref: '#/components/parameters/CallbackCall-Accept'
        - schema:
            type: string
            maxLength: 32
            example: C96962B74DC57EF30F00E7097AC81A45
          in: query
          name: id
          required: true
          description: The unique ID of the specific call within Whispir
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      requestBody:
        content:
          application/vnd.whispir.api-call-v1+json:
            schema:
              $ref: '#/components/schemas/CallbackCall'
            examples:
              Example:
                value:
                  status: FAILED
        description: 'The Status can be either of SUCCESS or FAILED only, and you can update the status to a singular value for upto 100 ids in a single call by passing the IDs in the URL'
    parameters:
      - schema:
          type: string
        name: callbackId
        in: path
        description: Callback Id
        required: true
  /workspaces:
    post:
      tags:
        - Workspaces
      x-sdkOperation: create
      x-isPost: true
      summary: Create a workspace
      description: |
        Note: There is no limit to the amount of workspaces each API user can create.
      operationId: workspaceCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Workspace-Content-Type'
        - $ref: '#/components/parameters/Workspace-Accept'
      requestBody:
        content:
          application/vnd.whispir.workspace-v1+json:
            schema:
              $ref: '#/components/schemas/Workspace'
            examples:
              example-1:
                value:
                  id: 70F2492146292826
                  projectName: A Space Odessey
                  projectNumber: '2001'
                  status: A
                  billingcostcentre: Hollywood
                  link:
                    - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                      rel: self
                      method: GET
                      host: api.au.whispir.com
                      port: -1
        description: Create a workspace
        required: true
      responses:
        '201':
          $ref: '#/components/responses/Workspace'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    get:
      tags:
        - Workspaces
      summary: List workspaces
      x-sdkOperation: list
      description: Returns a list of your workspaces.
      operationId: workspaceList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Workspace-Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
      responses:
        '200':
          $ref: '#/components/responses/Workspaces'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
  '/workspaces/{workspaceId}':
    get:
      tags:
        - Workspaces
      x-sdkOperation: retrieve
      summary: Retrieve a workspace
      description: 'Use GET on a Workspace Id to verify it is a valid Workspace ID, and see a list of all the other endpoint URIs in that workspace'
      operationId: workspaceRetrieve
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Workspace-Accept'
        - $ref: '#/components/parameters/workspaceId'
      responses:
        '200':
          $ref: '#/components/responses/Workspace'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    put:
      summary: Update a workspace
      x-sdkOperation: update
      operationId: workspaceUpdate
      responses:
        '204':
          $ref: '#/components/responses/Workspace'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      description: Update a workspace endpoint
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Workspace-Content-Type'
        - $ref: '#/components/parameters/Workspace-Accept'
        - $ref: '#/components/parameters/workspaceId'
      requestBody:
        content:
          application/vnd.whispir.workspace-v1+json:
            schema:
              $ref: '#/components/schemas/Workspace'
            examples:
              example-1:
                value:
                  id: 70F2492146292826
                  projectName: A Space Odessey
                  projectNumber: '2001'
                  status: A
                  billingcostcentre: Hollywood
                  link:
                    - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                      rel: self
                      method: GET
                      host: api.au.whispir.com
                      port: -1
        description: Update a workspace
      x-internal: false
      tags:
        - Workspaces
  /activities:
    post:
      tags:
        - Activities
      x-sdkOperation: create
      x-isPost: true
      summary: Create an activity
      description: |-
        Activities are all the individual changes, tasks, calls, messages and so on performed in a given company workspace. Each activity log entry contains information about the workspace, the module (message, email, IVR ...), the user who performed the activity, time stamps, description of the activity, its status (success, fail) and so on.

        All of these help meet auditing and standards compliance and also change tracking. For example:
        * As a Whispir API user (Voice module), you want to be able to update the Whispir activity log as a call progresses through the IVR to ensure that the auditing shows exactly what information a caller heard.

        * As a Whispir API user (SMS module), you want to able to retrieve information from the activity log about all the messages sent by a specific user.
        As activity information is sensitive, stricter permission rules apply to the data served by these endpoints.

        * If the user is a *Company Administrator* or *Company Leader*, retrieving the activity will produce a **_200 OK_** with the valid response
        * If the user is a *Company Member* or *Company Guest*, they will receive instead a **_403 Forbidden_** response advising that they don’t have permission to access this resource
        * A *Company Administrator* or *Company Leader* can also create content within the activity stream. They do this through a POST of data to either the _/activities_ endpoint or to the specific activity ID
        * They must specify a valid _‘Action’_, _‘Description’_ and _‘Status’_ within their request
        * Posting to the _/activities_ endpoint will create a new activity
        * Posting to the _/activities/{ID}_ endpoint will append the content to the detail of the specified activity
      operationId: activityCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Activity-Content-Type'
        - $ref: '#/components/parameters/Activity-Accept'
      requestBody:
        content:
          application/vnd.whispir.activity-v1+json:
            schema:
              $ref: '#/components/schemas/Activity'
            examples:
              example-1:
                value:
                  action: Logout
                  module: System
                  workspace: Company
                  user: string
                  status: Successful
                  description: Logged out
                  time: '04/08/22 11:19'
        description: ''
        required: true
      responses:
        '201':
          description: Created
          headers:
            Content-Type:
              $ref: '#/components/headers/Activity-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
            Location:
              schema:
                type: string
                example: 'https://api.au.whispir.com/activities/747AB7E716C1802B6476784AEB5C9BB8'
              description: The URI to fetch details of the resource.
          content:
            application/vnd.whispir.activity-v1+json:
              schema:
                $ref: '#/components/schemas/Activity'
              examples:
                example-1:
                  value:
                    user: user
                    time: '04/08/22 11:24'
                    action: Logout
                    description: Logged out
                    status: Successful
                    module: System
                    workspaceName: Company
                    link:
                      - uri: 'https://api.au.whispir.com/activities/2652A4034A27E271'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    get:
      tags:
        - Activities
      x-sdkOperation: list
      summary: List activities
      description: |
        ### Search or Filter on Activity Logs
        Activity logs can become quickly huge owing to the amount of actions performed. In such cases, to have a proper filtering of data during a GET /activities, Whispir API provides very neat filtering options on the data.

        All filter options are to be passed in as URL query parameters.

        **Note:** The API currently results in a 404 Not Found when there are no activities present in the log for a given search criteria. This should not be not confused with a failed response. But rather as No Data Found.
      operationId: activityList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Activity-Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
        - name: action
          in: query
          required: false
          description: /activities?action=Map
          schema:
            type: string
            enum:
              - Create
              - Update
              - Move
              - Copy
              - Draft
              - Send
              - Modified
              - Delete
              - Contact Import File
              - Login
              - Approve
              - Reject
              - Dispatch
              - Register
              - Accept
              - Closed
              - Map
              - Un-map
        - name: module
          in: query
          required: false
          description: /activities?module=Message
          schema:
            type: string
            enum:
              - System
              - Message
              - Scheduled Message
              - User
              - Contact
              - DistributionList
              - Template
              - Workspace
              - Event
              - WebService
              - Settings
              - Conversation
              - Gateway
              - Workspace Mapping
              - Folders
              - Team
              - RSS
              - API Mapping
              - Asset
              - Instruction
        - name: user
          in: query
          required: false
          description: /activities?user=james
          schema:
            type: string
            example: james
        - name: workspace
          in: query
          required: false
          description: /activities?workspace=Whispir.
          schema:
            type: string
        - name: status
          in: query
          required: false
          description: /activities?status=Successful
          schema:
            type: string
            enum:
              - Successful
              - Failed
              - Rejected
        - name: description
          in: query
          required: false
          description: /activities?description=Imported
          schema:
            type: string
            example: Sample Activity
        - name: Start time
          in: query
          required: false
          description: 'The date and time to start searching from in the format:dd/mm/yyyy hh:mm. This will search on the `time` field <p>/activities?startTime=01/01/2015%2000:00</p>'
          schema:
            type: string
        - name: End time
          in: query
          required: false
          description: 'The date and time to start searching from in the format:dd/mm/yyyy hh:mm <p>/activities?endTime=01/01/2015%2000:00</p>'
          schema:
            type: string
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/Activity-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
          content:
            examples:
              examples:
                example-1:
                  value:
                    activities:
                      - user: james.cameron
                        time: '17/08/15 13:29'
                        action: Send
                        description: Message sent via the Whispir's Java library
                        status: Successful
                        module: Message
                        workspaceName: Whispir
                        link:
                          - uri: 'https://api.au.whispir.com/activities/9B26BCE6A7C1997D3E3C04D4C0B62165'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                      - user: james.cameron
                        time: '17/08/15 12:56'
                        action: Create
                        status: Successful
                        module: Workspace
                        workspaceName: Whispir
                        link:
                          - uri: 'https://api.au.whispir.com/activities/CF8F388F18FDDA7CA40F42E888EC8E67'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                      - user: james.cameron
                        time: '17/08/15 12:26'
                        action: Draft
                        description: Template for default notification messages
                        status: Successful
                        module: Template
                        workspaceName: Whispir
                        link:
                          - uri: 'https://api.au.whispir.com/activities/19F603F21E8A7D536D577A6B4DBCFE3F'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                      - user: markm
                        time: '22/12/14 11:37'
                        action: Logout
                        description: Loged out
                        status: Successful
                        module: System
                        workspaceName: ABC Operations
                        link:
                          - uri: 'https://api.au.whispir.com/activities/0DEB48AB3D3B6069D7DA1A808F5A5DE4'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                      - user: markm
                        time: '22/12/14 11:20'
                        action: Login
                        description: 'Logged in, IP:8.8.8.8, Country: USA'
                        status: Successful
                        module: System
                        workspaceName: ABC Operations
                        link:
                          - uri: 'https://api.au.whispir.com/activities/0CEC8009230B3B92F5B548A22B55C407'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                    link: []
              schema:
                $ref: '#/components/schemas/ActivityCollection'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
  '/workspaces/{workspaceId}/activities':
    get:
      tags:
        - Activities
      x-sdkOperation: listByWorkspace
      summary: List workspace activities
      description: |
        ## Restricting to only a single workspace 
        By default, GET /activities returns all the activities at company level. This covers all the workspaces. So, if the items has to limited to a specific workspace, one has to use the workspace as the endpoint and activities followed by it.
      operationId: activityWorkspaceList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Activity-Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/Activity-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
          content:
            application/vnd.whispir.activity-v1+json:
              schema:
                $ref: '#/components/schemas/ActivityCollection'
              examples:
                Example 1:
                  value:
                    activities:
                      - user: whispir user
                        time: '03/08/22 15:17'
                        action: Create
                        description: Logged out
                        status: Successful
                        module: Conversation
                        workspaceName: Company
                        fullname: Whispir User
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                    status: 'status: 1 to 1 of 1'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  /customlists:
    get:
      tags:
        - Custom Lists
      x-sdkOperation: list
      summary: List custom lists
      description: |
        ### High-Level Response Elements
        **id:** Number  
        Specifies the unique id of the List.

        **name:** String  
        Specifies the name of the List.

        **type:** String  
        Specifies the type. The type can be one of:
        *   INCIDENT
        *   MESSAGE
        *   CONTACT
        *   RSS

        **sorttype:** String  
        Specifies the sorting order. The order can be one of:
        *   As Displayed
        *   Ascending
        *   Descending

        **linked:** String  
        Specifies the linked status. Linked list item values are dependent on other lists. The linked can be one of:
        *   disabled
        *   list id to which this is linked with

        **link:** Array  
        Provides a list of URLs that can be used to manipulate or access the list.

        *   uri - the link to access the list
        *   rel - the descriptor for what the link will do
        *   method - the HTTP method to use with this particular link

        ### Search or Filter on Custom Lists

        API allows you to be able to query the GET /customlists endpoint using the following filters.

        **Search Criteria**
        - **name:** `/customlists?name=Category`

        - **type:** `/customlists?type=Message`

        ***
        **Note:** The API currently results in a 404 Not Found when there are no activities present in the log for a given search criteria. This should not be not confused with a failed response. But rather as No Data Found.
      operationId: customListList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/CustomList-Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
        - name: name
          in: query
          required: false
          description: Enter search name Eg.Category
          schema:
            type: string
            example: Category
        - name: type
          in: query
          required: false
          description: Enter search type Eg.Message
          schema:
            type: string
            enum:
              - INCIDENT
              - MESSAGE
              - CONTACT
              - RSS
      responses:
        '200':
          $ref: '#/components/responses/CustomLists'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters: []
  '/customlists/{customlistId}':
    get:
      tags:
        - Custom Lists
      x-sdkOperation: retrieve
      summary: Retrieve a custom list
      description: |
        ### High-Level Response Elements

        **id:** Number  
        Specifies the unique id of the List.

        **name:** String  
        Specifies the name of the List.

        **type:** String  
        Specifies the type. The type can be one of:
        *   INCIDENT
        *   MESSAGE
        *   CONTACT
        *   RSS

        **createdDate:** String  
        Specifies the date of the List creation.

        **sorttype:** String  
        Specifies the sorting order. The order can be one of:
        *   As Displayed
        *   Ascending
        *   Descending

        **linked:** String  
        Specifies the linked status. Linked list item values are dependent on other lists. The linked can be one of:
        *   disabled
        *   list id to which this is linked with

        **customlabellists:** Object  
        The `name` is the text that is shown to the user, where as the `value` is the internally passed in value.

        **link:** Array  
        Provides a list of URLs that can be used to manipulate or access the list.
        *   uri - the link to access the list
        *   rel - the descriptor for what the link will do
        *   method - the HTTP method to use with this particular link
      operationId: customListRetrieve
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/CustomList-Accept'
        - name: customlistId
          in: path
          required: true
          description: Enter Id
          schema:
            type: string
            example: 43E9046401B18269
      responses:
        '200':
          $ref: '#/components/responses/CustomList'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - schema:
          type: string
        name: customlistId
        in: path
        required: true
        description: Specifies the ID of the custom list resource
  /users:
    post:
      tags:
        - Users
      x-sdkOperation: create
      x-isPost: true
      summary: Create a user
      description: |-
        Create a new user. Ensure that the necessary permissions are provided to the API account to create or modify user accounts.

        ### Activating a User after the creation

        When created new users are in the PENDING (P) state. To Activate the user, the User must be set to INACTIVE first via a PUT request and then finally set to ACTIVE (A) via another PUT. They cannot be directly set to (A) from (P).

        An user when created is assigned the PENDING status. So, to set the user to ACTIVE, one has to follow the “user state machine” rules. Here’s how we do it:
        1.  POST /users for user account creation. Capture the Location header value which is the unique link to the User record. This is used in Step 2
        2.  GET /users/{userId} for the user object
        3.  PUT /users/{userId} with STATUS set to 'INACTIVE’ - using the user object retreived in step 2
        4.  PUT /users/{userId} with STATUS set to 'ACTIVE’ - using the user object retreived in step 2

        **Note:** The status text is case sensitive. Lowercase or mixed case text is invalid. Always use uppercase.

        Example: active != ACTIVE; inActive != INACTIVE
      operationId: userCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/User-Content-Type'
        - $ref: '#/components/parameters/User-Accept'
      requestBody:
        content:
          application/vnd.whispir.user-v1+json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Example:
                value:
                  id: 4DC922649AFE370C
                  userName: john.w
                  password: foobarbaz
                  firstName: John
                  middleName: ''
                  lastName: Wick
                  title: ''
                  nickname: Babayaga
                  status: PENDING
                  workMobilePhone1: '61400400400'
                  workEmailAddress1: testUser@example.com
                  workCountry: Australia
                  timezone: Australia/Melbourne
                  workMobilePhone2: '61500500500'
                  workEmailAddress2: newUser@example.com
                  workPhoneAreaCode1: '09'
                  workPhone1: '5006000'
                  workPhoneAreaCode2: '09'
                  workPhone2: '5007000'
                  workFaxAreaCode1: '09'
                  workFax1: '5008000'
                  workSatellitePhone: '61600600600'
                  workOtherPhone: '61700700700'
                  workAddress1: Level 15
                  workAddress2: 360 Collins St
                  workSuburb: Melboure
                  workState: Victoria
                  workPostCode: '3000'
                  workPostalAddress1: Level 15
                  workPostalAddress2: 360 Collins St
                  workPostalSuburb: Melboure
                  workPostalState: Victoria
                  workPostalPostCode: '3000'
                  personalEmailAddress1: personalPrimaryUser@example.com
                  personalEmailAddress2: personalSecondaryUser@example.com
                  personalAddress1: Level 15
                  personalAddress2: 360 Collins St
                  personalSuburb: Melboure
                  personalState: Victoria
                  personalPostCode: '3000'
                  personalCountry: Australia
                  personalPhoneAreaCode1: '09'
                  personalPhone1: '5006000'
                  personalPhoneAreaCode2: '09'
                  personalPhone2: '5007000'
                  personalFaxAreaCode1: '09'
                  personalFax1: '5008000'
                  otherPhoneAreaCode1: '09'
                  otherPhone1: '5009000'
                  otherMobile: '61900900900'
                  otherFirstName: Harold
                  otherLastName: Wickman
                  otherTitle: Mr
                  companyName: Whispir
                  jobTitle: Software Engineer
                  division: Technology
                  businessUnit: Core Platform
                  department: Research & Development
                  teamName1: Optimus Prime
                  teamName2: Bumblebee
                  role1: Administrator
                  role2: Analyst
                  link:
                    - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                      rel: self
                      method: GET
                      host: api.au.whispir.com
                      port: -1
        description: The User object to create.
        required: true
      responses:
        '201':
          $ref: '#/components/responses/User'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    get:
      tags:
        - Users
      x-sdkOperation: list
      summary: List users
      description: |
        Retrieve a list of users in the account. The result will only be limited to users with ACTIVE status. User’s with other status will not be listed in the results.

        Once the request is placed, the response will be a list of url’s to each of the users that the API user has access to/or has requested for via the search criteria.

        **Note:** The sample request here shows users from the company the existing API user is associated with. You cannot retrieve users list from outside of your company and users with status != ACTIVE.

        ## Retrieving workspace users
        To retrieve the list of users, the request is made to via GET to `/workspaces/{workspaceId}/users` endpoint.

        By default there will be a limit of 20 users returned in a request.

        The user will use the limit and offset query parameters to determine how many users they would like to receive. (default when not provided will be limit=20 & offset=0)

        ### Searching for users
        Users can be searched for in a given company by passing in valid search criteria. The search criteria usually can be any of the following user elements (field names) and will be sent in as part of the URI as query parameters.
        *   First Name
        *   Last Name
        *   Title
        *   Job Title
        *   Country
        *   Timezone
        *   Organization Name
        *   Division
        *   Business Unit
        *   Department
        *   Team Name
        *   Role
        *   Additional Team Name
        *   Additional Role
        *   Work Email Address 1
        *   Work Mobile Phone 1
        *   Work Phone Area Code 1
        *   Work Phone 1
        *   Status * (see note below)

        **Note:** While searching for users via status, use the short code ‘A’ for ACTIVE, similarly, 'I’ for INACTIVE, rather than the full words ACTIVE, INACTIVE, etc. so, it is &status=A not &status=ACTIVE.
      operationId: userList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - name: fieldname
          description: A filter on the User attributes. Only Users with matching attributes will be returned.
          in: query
          required: false
          schema:
            type: string
            example: status=A
        - $ref: '#/components/parameters/User-Accept'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      x-internal: false
    delete:
      tags:
        - Users
      x-sdkOperation: deleteAll
      summary: Delete all users
      description: |-
        Delete all users in the company.

        **Note**: use this endpoint with caution!
      operationId: usersDelete
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/User-Content-Type'
        - $ref: '#/components/parameters/User-Accept'
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
  '/users/{userId}':
    get:
      tags:
        - Users
      x-sdkOperation: retrieve
      summary: Retrieve a user
      description: Retrieves a User object.
      operationId: userRetrieve
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/User-Accept'
        - name: userId
          description: The identifier for the User.
          in: path
          required: true
          schema:
            type: string
            example: 4821DCC420494A3A
      responses:
        '200':
          $ref: '#/components/responses/User'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    put:
      tags:
        - Users
      x-sdkOperation: update
      summary: Update a user
      description: |
        The application must provide all the fields during the update request, even if they are not being updated.

        **Any missing fields, except for the password field, will be automatically removed from the existing record.**

        **Note:** You cannot selectively update the user fields needed as this is a PUT request.

        So the standard process for updating a user record is:

        1.  GET `/users/{id of user}`
        2.  Update the user field in the object to the required value
        3.  PUT `/users/{id of user}` the new object

        The response to the PUT request upon success is usually a 204 with no content being provided.
      operationId: userUpdate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/User-Content-Type'
        - $ref: '#/components/parameters/User-Accept'
        - name: userId
          in: path
          description: Enter Users id.
          required: true
          schema:
            type: string
            example: 4821DCC420494A3A
      requestBody:
        content:
          application/vnd.whispir.user-v1+json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Example:
                value:
                  id: 4DC922649AFE370C
                  userName: john.w
                  password: foobarbaz
                  firstName: John
                  middleName: ''
                  lastName: Wick
                  title: ''
                  nickname: Babayaga
                  status: PENDING
                  workMobilePhone1: '61400400400'
                  workEmailAddress1: testUser@example.com
                  workCountry: Australia
                  timezone: Australia/Melbourne
                  workMobilePhone2: '61500500500'
                  workEmailAddress2: newUser@example.com
                  workPhoneAreaCode1: '09'
                  workPhone1: '5006000'
                  workPhoneAreaCode2: '09'
                  workPhone2: '5007000'
                  workFaxAreaCode1: '09'
                  workFax1: '5008000'
                  workSatellitePhone: '61600600600'
                  workOtherPhone: '61700700700'
                  workAddress1: Level 15
                  workAddress2: 360 Collins St
                  workSuburb: Melboure
                  workState: Victoria
                  workPostCode: '3000'
                  workPostalAddress1: Level 15
                  workPostalAddress2: 360 Collins St
                  workPostalSuburb: Melboure
                  workPostalState: Victoria
                  workPostalPostCode: '3000'
                  personalEmailAddress1: personalPrimaryUser@example.com
                  personalEmailAddress2: personalSecondaryUser@example.com
                  personalAddress1: Level 15
                  personalAddress2: 360 Collins St
                  personalSuburb: Melboure
                  personalState: Victoria
                  personalPostCode: '3000'
                  personalCountry: Australia
                  personalPhoneAreaCode1: '09'
                  personalPhone1: '5006000'
                  personalPhoneAreaCode2: '09'
                  personalPhone2: '5007000'
                  personalFaxAreaCode1: '09'
                  personalFax1: '5008000'
                  otherPhoneAreaCode1: '09'
                  otherPhone1: '5009000'
                  otherMobile: '61900900900'
                  otherFirstName: Harold
                  otherLastName: Wickman
                  otherTitle: Mr
                  companyName: Whispir
                  jobTitle: Software Engineer
                  division: Technology
                  businessUnit: Core Platform
                  department: Research & Development
                  teamName1: Optimus Prime
                  teamName2: Bumblebee
                  role1: Administrator
                  role2: Analyst
                  link:
                    - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                      rel: self
                      method: GET
                      host: api.au.whispir.com
                      port: -1
        description: Users object that needs to be update Users
        required: true
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    delete:
      tags:
        - Users
      x-sdkOperation: delete
      summary: Delete a user
      description: |
        After performing this request, the response does not contain any information other than the headers as it is not necessary.

        The delete a user if successful shall respond with a 204 No Content.
      operationId: userDelete
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/User-Content-Type'
        - $ref: '#/components/parameters/User-Accept'
        - name: userId
          in: path
          description: Enter User id
          required: true
          schema:
            type: string
            example: 4821DCC420494A3A
      responses:
        '204':
          description: No Content
          headers:
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
  '/workspaces/{workspaceId}/users':
    get:
      tags:
        - Users
      x-sdkOperation: listByWorkspace
      summary: List workspace users
      description: Returns a list of your Users.
      operationId: userWorkspaceList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/User-Accept'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          $ref: '#/components/responses/Users'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  '/workspaces/{workspaceId}/events':
    get:
      tags:
        - Events
      x-sdkOperation: list
      summary: List events
      description: List event objects
      operationId: eventList
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Event-Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
        - schema:
            type: string
          in: header
          name: eventType
          description: 'The name of the event template used '
          required: true
      responses:
        '200':
          $ref: '#/components/responses/Events'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    post:
      tags:
        - Events
      x-sdkOperation: create
      x-isPost: true
      summary: Create an event
      description: |-
        The bulk of the `Event` metadata is from fields that are generic, and only applicable to the customer that is using the module.

        The owner or responsible person for the event could be a `/contacts` in the system. This ensures that proper communication is sent to the individual based on their preferred channel (`message`, `email`, `voice`) automatically without having to key in the phone, email, and other communication information again.

        Most importantly, to create an event, one must have the create access for `Incident` row in the `Roles & Permission` section of the account settings.

        When an `Event` occurs/is triggered, the related actions are to be performed. Each action has an owner (`actionOwner`), a set time (`actionDate`), and details associated with it (`actionDetails`). 

        `Events` have sub sections under them called as ‘actions’ (maximum of 10). So the action values are numbered:
        <li> actionDate1, actionOwner1, actionDetails1 </li>
        <li> actionDate2, actionOwner2, actionDetails2 </li>
        <li> … </li>
        <li> actionDate10, actionOwner10, actionDetails10 </li>

        <!-- theme: warning -->
        > #### Things to note
        > The fields described below are defined through `name/value` pairs and to be added as part of `eventFieldList` array

        ```generic_attributes json_schema
        {
          "title": "Event Fields",
          "type": "object",
          "properties": {
            "actionDate": {
              "type": "string"
              "description: "The start date of this action in dd/mm/yyyy HH:MI:SS 24 hour format",
              "example": "11/09/2019 17:41:00"
            },
            "actionOwner": {
              "type": "string",
              "description": "The individual (contact) responsible for this action’s execution",
              "example": "John Wick",
            },
            "actionDetails": {
              "type": "string",
              "description": "The detail description of this action",
              "example":"investigation to take place asap."
            },
            "summary": {
              "type": "string",
              "description": "Specifies the summary of the event. A single line that can be the equivalent of the subject of an email",
              "example":"investigation to take place asap"
            },
            "status": {
              "type": "string",
              "description": "Specifies the status of the event. The status can be one of the following",
              "enum": ["Active", "Resolved", "Open"],
              "default":"Open",
              "example":"Open"
            },    
           "description": {
              "type": "string",
              "description": "Specifies the detailed description of the event",
              "example":"investigation to take place asap"
            },
           "location": {
              "type": "string",
              "description": "Specifies the latitude and longitude values of the event location. This helps to show the event location on Whispir’s geo-map feature set and coordinated communication based on the geo-location of the event",
              "example":"0.0,0.0"
            },
           "startDate": {
              "type": "string",
              "description": "Specifies the start date of the event. The date and time should be in the format `DD/MM/YYYY HH:MI:SS` (24 hour format)",
              "example":"23/09/2019 17:21:00"
            },
           "endDate": {
              "type": "string",
              "description": "Specifies the end date of the event. The date and time should be in the format `DD/MM/YYYY HH:MI:SS` (24 hour format)",
              "example":"23/09/2019 17:21:00"
            },
            "severity" :{
              "type": "string",
              "description": "Specifies the severity of the event. While this can change from company to company, the standard value set to be chosen from is   
                <li><b>Severity 5</b> – Routine Maintenance Tasks</li> 
                <li><b>Severity 4</b> – Scheduled System Changes</li> 
                <li><b>Severity SL3</b> – Minor Outage (some service degradation)</li> 
                <li><b>Severity SL2</b> – Moderate Outage (service degradation)</li> 
                <li><b>Severity SL1</b> – Major Outage (significant service unavailability)</li>
              ",
              "example": "Severity 5"
            },
            "priority" :{
              "type": "string",
              "description": "Specifies the priority of the event. While this can change from company to company, the standard value set to choose from is
                <li><b>Priority 5</b> – No Set Resolution Period</li>
                <li><b>Priority 4</b> – < 1 week Resolution</li>
                <li><b>Priority 3</b> – < 3 day Resolution</li>
                <li><b>Priority 2</b> – < 1 day Resolution</li>
                <li><b>Priority 1</b> – < 2 hour Resolution</li>
              ",
              "enum": ["Priority 5", "Priority 4", "Priority 3", "Priority 2", "Priority 1"],
              "example": "Severity 5"
            },
           "duration": {
              "type": "string",
              "description": "The duration of the event in `HH:MI:SS`. For example, `02:05:00`. This can be substituted in the place of end date if required. Or a subset of the time between the start and end dates.",
              "example":"02:05:00"
            }     
          },
          required: ["actionDate", "actionOwner", "actionDetails", "startDate"]
        }
        ```
        ``` categorisation json_schema
        {
          "title": "Event Fields",
          "type": "object",
          "description: "",
          "properties": {
            "category" :{
              "type": "string",
              "description": "Specifies the category of event. The default values to choose from are (`Internal Systems`, `External Systems`, `Infrastructure`)",
              "example": "Internal Systems"
            },
            "subcategory" :{
              "type": "string",
              "description": "Specifies the subcategory in the category. The default values to choose from are (`Customer Impact`, `Cust & Staff Impact`,`Staff Impact`, `Impact Unknown`)",
              "example": "Customer Impact"
            },
            "type" :{
              "type": "string",
              "description": "Specifies the type of event. The default values to choose from are (`Multiple Issues`, `NIL`,`Network`, `Applications`, `Mobile Apps`)",
              "example": "Customer Impact"
            },
            "externalVendor" :{
              "type": "string",
              "description": "Specifies the name/contact who is the external vendor related to this event",
              "example": "ABC"
            }, 
            "lineNumber" :{
              "type": "string",
              "description": "Specifies the line number (production lines)",
              "example": "ABC"
            },
            "externalCaseNumber" :{
              "type": "string",
              "description": "Specifies the number as tracked by an external party related to this event",
              "example": "ABC"
            },
          }
        }
        ```
        ``` affected_services json_schema
        {
          "title": "Event Fields",
          "type": "object",
          "description: "",
          "properties": {
            "platform" :{
              "type": "string",
              "description": "Specifies the platform in the company that this event is associated with",
              "example": "ABC"
            },
            "services" :{
              "type": "string",
              "description": "Specifies the service in the company that this event is associated with",
              "example": "ABC"
            },
          }
        }
        ```
        ``` impact json_schema
        {
          "title": "Event Fields",
          "type": "object",
          "description: "",
          "properties": {
            "impactCondition" :{
              "type": "string",
              "description": "Specifies the impact condition of this event to the company. These values can be configured via custom lists as these can be very specific to the company. The default values to choose from are (`All services not available`, `All services degraded`, `Some services not available`, `Some services degraded`, `No Impact`, `Unknown`)",
              "example": "Unknown"
            },
            "impactToOrg" :{
              "type": "string",
              "description": "Specifies the impact condition of this event to the company. These values can be configured via custom lists as these can be very specific to the company. The default values to choose from are (`All services not available`, `All services degraded`, `Some services not available`, `Some services degraded`, `No Impact`, `Unknown`)",
              "example": "Unknown"
            },
            "locations" :{
              "type": "string",
              "description": "Specifies the impact location of this event to a company’s operational geographies. These values can be configured via custom lists as these can be very specific to the company",
              "example": "0.0,0.0"
            },
          }
        }
        ```
        ``` example
        {
            ...,
            eventFieldList: [{
                "name": "actionDate1",
                "value": "11/09/2019 17:41:00"
              },
              {
                "name": "actionOwner1",
                "value": "John Wick"
              },
              {  
                "name": "actionDetails1",
                "value": "investigation to take place asap."
              },
              {
                "name": "summary",
                "value": "Outage of systems in Sydney"
              },
              {
                "name": "status",
                "value": "Open"
              },
              {
                "name": "description",
                "value": "ATMs are non responsive, teams to be sent to investigate."
              },
              {
                "name": "category",
                "value": "Internal"
              },
              {
               "name": "startDate",
               "value": "11/09/2019 17:41:00"
              },
              {
               "name": "severity",
               "value": "Severity 3 - Minor Outage (Some Service Degradation)"
              },
              ... and so on,
          }]
        }                  
        ```
        <!-- theme: info -->

        > #### A thing to know
        > On top of the list of event attributes listed above, you may introduce other (alias) name and title fields <li> e.g (`otherFirstName`, `otherLastName`, `otherTitle`) </li>

        <h2>Sending messages using event data</h2>

        Once you’ve finished creating your event data in the Whispir platform, the next logical step is to deliver a notification about the event. This action can be performed using the existing `/messages` endpoint, with the `eventId` as an attribute of the message.

        * Including this `eventId` links the message to the event, and allow you to use any attribute of the event within your message payload.
        * Any event fields populated on the event are automatically populated within the message.
        * Any attributes that are supplied within the message take priority over any attributes that are from the event.
        * The user should not be required to enter any `attributes` as these will be retrieved from the linked event.
        * The event fields automatically populate the attributes in the message body (based on the relationships set in the <b> Admin > Settings > Attributes > Message Event Attribute Map</b>).

        <!-- theme: warning -->
        > #### Things to note
        > * If the `Event` doesn't contain an event field, and there is no relevant attribute field supplied > in the message payload, the `@@` tag will not be resolved.
        > * If you don't supply an attribute in the message payload, and this has also not been supplied from the event, the field simply will not be resolved within the message.
      operationId: eventCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Event-Content-Type'
        - $ref: '#/components/parameters/Event-Accept'
      responses:
        '201':
          $ref: '#/components/responses/Event'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      requestBody:
        content:
          application/vnd.whispir.event-v1+json:
            schema:
              $ref: '#/components/schemas/Event'
            examples:
              Example 1:
                value:
                  id: B27ABC9D8E98A9B
                  eventLabel: 2701095 - Outage of Local Systems in Sydney
                  status: Active
                  eventFormList:
                    - formName: MetroEvent
                      eventFieldList:
                        - name: summary
                          value: Outage of systems in Sydney
                        - name: location
                          value: '0.0,0.0'
                        - name: endDate
                        - name: type
                          value: ''
                        - name: actionDetails2
                          value: ''
                        - name: actionDetails3
                          value: ''
                        - name: actionDetails1
                          value: investigation to take place asap.
                        - name: priority
                          value: ''
                        - name: description
                          value: 'ATMs are non responsive, teams to be sent to investigate.'
                        - name: actionDetails8
                          value: ''
                        - name: actionDetails9
                          value: ''
                        - name: actionDetails6
                          value: ''
                        - name: actionDetails7
                          value: ''
                        - name: actionDetails4
                          value: ''
                        - name: actionOwner10
                          value: ''
                        - name: actionDetails5
                          value: ''
                        - name: platform
                          value: ''
                        - name: services
                          value: ''
                        - name: status
                          value: Open
                        - name: openedBy
                          value: ''
                        - name: category
                          value: Internal
                        - name: externalVendor
                          value: ''
                        - name: externalCaseNumber
                          value: ''
                        - name: actionOwner6
                          value: ''
                        - name: startDate
                          value: '11/09/2019 00:00:00'
                        - name: actionOwner5
                          value: ''
                        - name: actionOwner8
                          value: ''
                        - name: actionOwner7
                          value: ''
                        - name: actionOwner9
                          value: ''
                        - name: actionDate8
                        - name: actionDate9
                        - name: actionDetails10
                          value: ''
                        - name: actionDate4
                        - name: actionOwner2
                          value: ''
                        - name: actionDate5
                        - name: actionOwner1
                          value: John Wick
                        - name: actionDate6
                        - name: actionOwner4
                          value: ''
                        - name: actionDate7
                        - name: actionOwner3
                          value: ''
                        - name: actionDate1
                          value: '11/09/2019 00:00:00'
                        - name: actionDate3
                        - name: actionDate2
                        - name: locations
                          value: ''
                        - name: impactToOrg
                          value: ''
                        - name: actionDate10
                        - name: locationDisplay
                          value: ''
                        - name: subCategory
                          value: ''
                        - name: severity
                          value: Severity 3 - Minor Outage (Some Service Degradation)
                        - name: duration
                          value: ''
                        - name: lineNumber
                          value: ''
                        - name: impactCondition
                          value: ''
        description: The Event object to create
    parameters:
      - name: workspaceId
        in: path
        schema:
          type: string
          pattern: '^[A-F0-9]+'
          example: 9A4C5521FFC7B15B
        description: The identifier for the workspace.
        required: true
  '/workspaces/{workspaceId}/events/{eventId}':
    get:
      tags:
        - Events
      x-sdkOperation: retrieve
      summary: Retrieve an event
      description: Retrieve an event object
      operationId: eventRetrieve
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Event-Accept'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/sortOrder'
        - $ref: '#/components/parameters/sortFields'
      responses:
        '200':
          $ref: '#/components/responses/Event'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - name: workspaceId
        in: path
        schema:
          type: string
          pattern: '^[A-F0-9]+'
          example: 9A4C5521FFC7B15B
        description: The identifier for the workspace.
        required: true
      - schema:
          type: string
        name: eventId
        description: The identifier for the event.
        in: path
        required: true
    put:
      tags:
        - Events
      x-sdkOperation: update
      summary: Update an event
      operationId: eventUpdate
      description: Update an event object
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Event-Content-Type'
        - $ref: '#/components/parameters/Event-Accept'
      responses:
        '204':
          description: No Content
          headers:
            Content-Type:
              $ref: '#/components/headers/Event-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Expires:
              $ref: '#/components/headers/Expires'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      requestBody:
        content:
          application/vnd.whispir.event-v1+json:
            schema:
              $ref: '#/components/schemas/Event'
            examples:
              Example 1:
                value:
                  id: 888E0A343770A7D1
                  eventLabel: 2701095 - Outage of Local Systems in Sydney
                  status: Open
                  eventFormList:
                    - formName: Metro Event
                      eventFieldList:
                        - name: actionOwner1
                          value: John Wick
                  link:
                    - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                      rel: self
                      method: GET
                      host: api.au.whispir.com
                      port: -1
        description: The Event object to update
  '/workspaces/{workspaceId}/imports':
    post:
      tags:
        - Imports
      x-sdkOperation: create
      x-isPost: true
      summary: Create an import
      description: |
        ## Bulk contact import
        The Whispir API will expose this functionality as a two stage process:
        1. Submit contact data within a CSV, JSON, XML payload using the /resource endpoint – which will return a resource ID
        2. Create a new import resource by submitting a POST to the /imports endpoint referencing the resource ID created in step 1.

        These two stages are further explained below.

        Create a resource specifying the contact information

        Applications can upload a valid CSV, XML or JSON resource containing the contact information that will be imported into the Whispir Platform. Whispir will return the resource ID which can be used to import or update contacts within a workspace through the imports endpoint as described below.

        ### Request Structure
        Firstly, the application needs to upload a resource using the Creating Resources.

        The resource that needs to be provided for contact importing should be in one the following format:
        *   XML
        *   JSON
        *   CSV

        Once this resource has been imported with the appropriate mime type, the application can reference this resource within the import request.

        Import a resource using the imports endpoint  

        After receiving a valid resource ID, applications can make a request to the imports endpoint within a workspace and reference the appropriate resource ID. Whispir will then create an import process that will import the specified data into the workspace.  

        Once the application has an appropriate resource ID to use within the import endpoint, the following request can be used to begin the import process.  

        **Note:** Import processes take place asynchronously. Any contacts will be created once the import process starts, and users will be able to utilise imported contacts as soon as each is completed.
      operationId: importCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Import-Content-Type'
        - $ref: '#/components/parameters/Import-Accept'
      requestBody:
        content:
          application/vnd.whispir.importcontact-v1+json:
            schema:
              $ref: '#/components/schemas/Import'
            examples:
              Example 1:
                value:
                  resourceId: 4FBBC384BCE3DAABFE3
                  importType: contact
                  importOptions:
                    fieldMapping:
                      firstName: firstName
                      lastName: lastName
                      workMobilePhone1: workMobilePhone1
                      workCountry: workCountry
                      timezone: timezone
                  importMode: replace
        description: import object that needs to be create import
      responses:
        '202':
          description: Accepted
          headers:
            Content-Type:
              $ref: '#/components/headers/Import-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
            Location:
              schema:
                type: string
                example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/imports/747AB7E716C1802B6476784AEB5C9BB8'
              description: The URI to fetch details of the resource.
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
    parameters:
      - $ref: '#/components/parameters/workspaceId'
  /auth:
    parameters: []
    post:
      summary: Create an auth token
      operationId: authCreate
      x-sdkOperation: create
      x-isPost: true
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/Auth-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
            Location:
              schema:
                type: string
                example: 'https://api.au.whispir.com/auth/747AB7E716C1802B6476784AEB5C9BB8'
              description: The URI to fetch details of the resource.
          content:
            application/vnd.whispir.auth-v1+json:
              schema:
                $ref: '#/components/schemas/Auth'
              examples:
                Example:
                  value:
                    token: your-generated-token-string
                    link: []
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      description: Create a JWT authentication token
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Auth-Content-Type'
        - $ref: '#/components/parameters/Auth-Accept'
      tags:
        - Auth
  /auth/verify:
    get:
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Auth-Accept'
      description: Verify a JWT authentication token
      operationId: authVerificationRetrieve
      x-sdkOperation: retrieveVerification
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              $ref: '#/components/headers/Auth-Content-Type'
            Content-Length:
              $ref: '#/components/headers/Content-Length'
            Access-Control-Allow-Origin:
              $ref: '#/components/headers/Access-Control-Allow-Origin'
            Cache-Control:
              $ref: '#/components/headers/Cache-Control'
            Expires:
              $ref: '#/components/headers/Expires'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '405':
          $ref: '#/components/responses/405MethodNotAllowed'
        '413':
          $ref: '#/components/responses/413EntityTooLarge'
        '415':
          $ref: '#/components/responses/415UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/422UnprocessibleEntity'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '501':
          $ref: '#/components/responses/501MethodNotImplemented'
      summary: Verify an auth token
      tags:
        - Auth
  /otp/send-code:
    post:
      x-sdkOperation: create
      x-isPost: true
      summary: Send Code
      description: |-
        Sends a code to the recipient’s number which can be verified with
        another endpoint. Currently, we send the SMS with a default template of OTP: Your verification code is {{CODE}}.

        > **IMPORTANT:** You will need to initially set up an alias name with value `otp` via `Alias Manager` within your Company account to use your designated Sender ID in each country for Whispir Verify. Please contact your company administrator if this is not arranged yet.
      operationId: sendCodeCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Json-Content-Type'
        - $ref: '#/components/parameters/Json-Accept'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: |-
                The object containing the
                information required to send
                the one time password.
              properties:
                workspaceId:
                  type: string
                  x-stoplight:
                    id: 0cemnmxm4ap98
                  description: |-
                    The ID of the workspace
                    where you will use your one
                    time password.
                  example: ABCDEFGH
                channel:
                  x-stoplight:
                    id: gvy0tf9054lbu
                  type: string
                  default: sms
                  description: |-
                    Channel where to send the
                    one time passwords.
                  example: sms
                to:
                  type: string
                  x-stoplight:
                    id: 84kcrupwfxevk
                  description: Indicates the recipient's contact information.
                  example: '+1234567890'
                codeLength:
                  type: integer
                  x-stoplight:
                    id: gasshv9rq28xb
                  minimum: 6
                  maximum: 15
                  description: |-
                    Indicates the span of the
                    code to be generated.
                  example: 6
                expiresIn:
                  type: integer
                  x-stoplight:
                    id: 13r0jpk43oj1y
                  description: |-
                    Indicates the expiry of the
                    code generated in the unit of
                    seconds
                  maximum: 86400
                  example: 300
              required:
                - workspaceId
                - channel
                - to
                - codeLength
                - expiresIn
            examples:
              Example 1:
                value:
                  workspaceId: ABCDEFGH
                  channel: sms
                  to: '+1234567890'
                  codeLength: 6
                  expiresIn: 18000
        description: ''
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Otp'
              examples:
                Success:
                  value:
                    id: azkP8DJEEsujuhwzO-O_N
                    channel: sms
                    codeLength: 6
                    to: '+1234567890'
                    expiresAt: '2023-07-05T19:02:28.713Z'
                    status: pending
                    links:
                      verify: 'https://au.api.whispir.com/otp/azkP8DJEEsujuhwzO-O_N/verify'
          headers:
            Location:
              schema:
                type: string
                example: 'https://api.au.whispir.com/otp/send-code'
              description: The URI to fetch details of the resource.
            Content-Type:
              schema:
                type: string
              description: Application specific mime-type.
            Content-Length:
              schema:
                type: number
              description: Length of the response content.
            Access-Control-Allow-Origin:
              schema:
                type: string
              description: Origins allowed to perform cross-origin requests.
            Cache-Control:
              schema:
                type: string
              description: 'The directives that control caching in browsers and shared caches (e.g. Proxies, CDNs).'
            Expires:
              schema:
                type: string
              description: The date/time after which the response is considered expired.
        '400':
          $ref: '#/components/responses/400BadRequestNextGen'
        '500':
          $ref: '#/components/responses/500InternalServerErrorNextGen'
      x-stoplight:
        id: pk6eca8bz1c3k
      tags:
        - Verify
  '/otp/{otpId}/verify-code':
    post:
      x-sdkOperation: create
      x-isPost: true
      summary: Verify Code
      description: |-
        Verifies the code against the provided phone number.

        Using Verify has an associated cost per successful verification as shown in the table below.

        Successful verification is an OTP that has been verified through the Whispir Verify endpoints. If you sent 100 OTP messages and only successfully verified 10, then you will be charged 10 x unit price.

        Refer to the table below for pricing per region:

        | Region | Price |
        |-----|-----|
        | AUD   | $0.05   |
        | NZD   | $0.06   |
        | SGD   | $0.045   |
        | USD   | $0.035   |
        | IDR   | Rp500   |
        | PHP   | ₱20   |
      operationId: verifyCodeCreate
      parameters:
        - $ref: '#/components/parameters/X-Api-Key'
        - $ref: '#/components/parameters/Json-Content-Type'
        - $ref: '#/components/parameters/Json-Accept'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: |-
                The object containing the
                information required to verify
                the one time password.
              properties:
                to:
                  type: string
                  x-stoplight:
                    id: lvo4wcw8xdj1g
                  description: Indicates the phone number of the recipient
                  example: '+1234567890'
                code:
                  type: string
                  x-stoplight:
                    id: r0upm69sn446u
                  description: The code to match and verify
                  example: '963315'
              required:
                - to
                - code
            examples:
              Example 1:
                value:
                  to: '+1234567890'
                  code: '963315'
        description: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Otp'
              examples:
                Success:
                  value:
                    id: azkP8DJEEsujuhwzO-O_N
                    channel: sms
                    codeLength: 6
                    to: '+1234567890'
                    expiresAt: '2023-07-05T19:02:28.713Z'
                    status: pending
                    links: {}
          headers:
            Location:
              schema:
                type: string
                example: 'https://api.au.whispir.com/otp/azkP8DJEEsujuhwzO-O_N'
              description: The URI to fetch details of the resource.
            Content-Type:
              schema:
                type: string
              description: Application specific mime-type.
            Content-Length:
              schema:
                type: number
              description: Length of the response content.
            Access-Control-Allow-Origin:
              schema:
                type: string
              description: Origins allowed to perform cross-origin requests.
            Cache-Control:
              schema:
                type: string
              description: 'The directives that control caching in browsers and shared caches (e.g. Proxies, CDNs).'
            Expires:
              schema:
                type: string
              description: The date/time after which the response is considered expired.
        '400':
          $ref: '#/components/responses/400BadRequestNextGen'
        '404':
          $ref: '#/components/responses/404NotFoundNextGen'
        '500':
          $ref: '#/components/responses/500InternalServerErrorNextGen'
      x-stoplight:
        id: mlx3rlzhsvbt3
      tags:
        - Verify
    parameters:
      - schema:
          type: string
        name: otpId
        in: path
        required: true
        description: Supply the id that was provided from the send-code endpoint response
externalDocs:
  description: API Documentation for Whispir Platform API
  url: 'https://developers.whispir.com'
security:
  - BasicAuth: []
    ApiKeyAuth: []
  - BearerAuth: []
    ApiKeyAuth: []
servers:
  - url: 'https://api.au.whispir.com'
    description: Australia
  - url: 'https://api.ap.whispir.com'
    description: Singapore
  - url: 'https://api.ap1.whispir.com'
    description: AP1
  - url: 'https://api.nz.whispir.com'
    description: New Zealand
  - url: 'https://api.us.whispir.com'
    description: United States
  - url: 'https://api.it.whispir.com'
    description: IT
  - url: 'https://api.education.whispir.com'
    description: Education
components:
  requestBodies: {}
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    ApiKeyAuth:
      name: Api-Key
      type: apiKey
      in: header
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    Message:
      type: object
      x-examples:
        SMS:
          to: '61400400400'
          subject: Test Message
          body: This is the body of my test SMS message
        Email:
          to: test@test.com
          subject: Test Message
          email:
            body: This is the body of my test Email message
            footer: This is the footer of my message
            type: text/plain
      example:
        to: '61400400400'
        subject: Test Message
        body: This is the body of my test SMS message
      title: Message
      x-tags:
        - Messages
      description: |
        Whispir has a maximum API request payload size of 10MB. Whispir will reject the request if the payload is any bigger. This payload size limit should be adhered to when creatin the message payload.
      additionalProperties: false
      properties:
        to:
          type: string
          description: |
            Allows a combination of phone numbers, email address, Whispir Contact MRIs, User MRI, Distribution List MRI, separated by `,`.

            Whispir will pick the relevant recipients based on the channels provided in the request payload 
            (including template information).

            The maximum payload size rule applies.

            When used for bulk messages, this field is optional, as bulk messages has another model to specify the `to` field recipients.
          maxLength: 10000
          example: '61400400400'
        subject:
          type: string
          example: Test Message
          description: |-
            The message subject. This is common for both SMS and Email channels.

            Read `body` notes on limits.

            The maximum payload size rule applies.

            When used for templates, this field is optional.
          maxLength: 1570
        body:
          type: string
          example: This is the body of my SMS message
          description: |-
            The SMS body.

            The maximum payload size rule applies.

            IMPORTANT: The total SMS length is 1570 characters for english text and 800 when UTF-8 characters are used (primarily non-english)

            The 1570 length is a combination of subject and body.
          maxLength: 1570
        email:
          $ref: '#/components/schemas/Email'
        voice:
          $ref: '#/components/schemas/Voice'
        web:
          $ref: '#/components/schemas/Web'
        social:
          $ref: '#/components/schemas/Social'
        whatsapp:
          $ref: '#/components/schemas/WhatsApp'
        type:
          type: string
          enum:
            - default
            - defaultNoReply
            - noDlr
          default: default
          description: |-
            Allows the user to modify the message behaviour for replies and DLRs (delivery receipts).

            - `defaultNoReply`: Used to reject any replies to this message.
            - `noDlr`: Used to specify that DLRs should not be enabled for this message.
        features:
          $ref: '#/components/schemas/Features'
        resource:
          $ref: '#/components/schemas/Resource'
        messageTemplateId:
          type: string
          example: BACEB8D46BEF5315
          description: 'The identifier for the Message Template. Specification of this attribute is preferred over the `messageTemplateName`, to provide an absolute and non-changing reference to the Message Template.'
        messageTemplateName:
          type: string
          example: Sample SMS Template
          description: A human-readable name for the Message Template.
          minLength: 1
        callbackId:
          type: string
          example: myCallbackName
          description: The identifier for the Callback to be invoked on Message delivery events.
        callbackParameters:
          description: Set of key-value pairs that you can attach to a callback. This can be useful for returning additional information about the object in a structured format.
          type: object
          title: Callback Parameters
        label:
          type: string
          example: sample
          description: |-
            A label to tag the message, useful for grouped viewing and filtering in the UI and via API `GET /messages?label=example`.

            **IMPORTANT**: When this label is used, Whispir Reporting ignores the “Category” labels tied to the messages. Please ensure you are using this as per your business needs and such usage does not affect the reports generated via the "Category" grouping.
          maxLength: 48
        eventId:
          type: string
          example: 2EE7FEA3343662BE
          description: The identifier for the Event to trigger.
          maxLength: 48
        messageType:
          description: 'The type of message, used to enable message scheduling.'
          type: string
          enum:
            - SCHEDULED
        scheduleType:
          description: 'The schedule type, used to enable single or repeated message scheduling.'
          type: string
          enum:
            - ONCE
            - REPEAT
        scheduleDate:
          description: 'For `ONCE` scheduled messages, specifies the date to trigger the single delivery. For `REPEATED` scheduled messages, the time at which the first of them will be sent.'
          type: string
          pattern: '\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}'
          example: '14/02/2019 15:55'
        repetitionCount:
          description: Specifies how many times the scheduled message will be sent to the recipient.
          type: number
          example: 10
          default: 1
        repeatDays:
          description: The interval in days between each scheduled message repetition.
          type: number
          example: 1
        repeatHrs:
          description: The interval in hours between each scheduled message repetition.
          type: number
          example: 2
        repeatMin:
          description: The interval in minutes between each scheduled message repetition.
          type: number
          example: 20
        from:
          description: The message sender's Whispir User MRI.
          type: string
          example: testUser@User.whispir.com
          readOnly: true
        direction:
          description: The direction of the sent message.
          type: string
          enum:
            - OUTGOING
          readOnly: true
        responseCount:
          description: Details the responses received for the sent message across all channels. Refer to `/messageresponses` to get the detailed response data.
          type: string
          example: '0'
          readOnly: true
        createdTime:
          description: 'Epoch time (refers to Unix TimeStamp format starting Jan 1, 1970) denoting the time the message was sent. For bulk messages and messages with multiple recipients this value is tied to the timestamp when the message was received and processed by Whispir.'
          type: number
          example: 1647467664000
          readOnly: true
        whatsappValidMessage:
          description: The validity of the WhatsApp channel message.
          type: boolean
          readOnly: true
        validBody:
          description: The validity of the message body.
          type: boolean
          readOnly: true
        validSubject:
          description: The validity of the message subject.
          type: boolean
          readOnly: true
        dlr:
          $ref: '#/components/schemas/DeliveryReceipt'
        link:
          $ref: '#/components/schemas/Links'
      required:
        - to
        - subject
    MessageCollection:
      description: The list messages response object.
      type: object
      x-examples:
        Example:
          messages:
            - subject: Test Message
              repetitionCount: 0
              repeatDays: 0
              repeatHrs: 0
              repeatMin: 0
              from: Test User
              direction: OUTGOING
              responseCount: '0'
              createdTime: 1647467664000
              link:
                - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/E9F52215AD0787EBECDD691916955C1E'
                  rel: self
                  method: GET
                  host: api.au.whispir.com
                  port: -1
              whatsappValidMessage: true
              validBody: false
              validSubject: true
            - subject: Test Message
              repetitionCount: 0
              repeatDays: 0
              repeatHrs: 0
              repeatMin: 0
              from: Test User
              direction: OUTGOING
              responseCount: '0'
              createdTime: 1647466923000
              link:
                - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8'
                  rel: self
                  method: GET
                  host: api.au.whispir.com
                  port: -1
              whatsappValidMessage: true
              validBody: false
              validSubject: true
          status: ''
          link: []
      properties:
        messages:
          type: array
          description: The list of retrieved messages.
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/Message'
          readOnly: true
        status:
          description: The status of the list request.
          example: '1 to 2 of 2    '
          type: string
          readOnly: true
        link:
          $ref: '#/components/schemas/Links'
      title: Message Collection
      x-tags:
        - Messages
    Email:
      type: object
      title: Email
      description: |-
        The email channel payload, used when sending an email Message.

        Not required when a template is provided.
      x-examples:
        Email:
          body: This is the body of my test Email message
          footer: This is the footer of my message
          type: text/plain
        Email with attachment:
          body: This is the body of my test Email message
          footer: This is the footer of my message
          type: text/html
          resources:
            attachments:
              - attachmentName: sample.json
                attachmentDesc: Sample
                derefUri: eyAKICAgICJzYW1wbGUiOiB0cnVlCn0=
      x-tags:
        - Messages
      properties:
        body:
          type: string
          example: This is the body of my email message.
          description: The email message body.
        footer:
          type: string
          example: This is the footer of my message.
          description: Plain text or html displayed at the bottom of your email message.
        type:
          type: string
          enum:
            - text/plain
            - text/html
          default: text/plain
          description: The email Message content type.
        optOutOption:
          $ref: '#/components/schemas/OptOutOption'
        resources:
          $ref: '#/components/schemas/Attachments'
      required:
        - body
    Voice:
      type: object
      title: Voice
      description: |-
        The voice channel payload, used when sending a Message.

        Calls are charged in 30 seconds intervals (rounded up).

        Text max length is 5000 characters.

        The maximum payload size rule applies for the body, header and type usage.

        <!-- theme: info -->

        > #### Requirements
        >
        > In order to use this functionality your account must be enabled to use the Voice module. If you're unsure whether you can use Voice, please contact the Whispir Support Team.

        ---

        ### Overview

        Whispir’s API provides you with the ability to send a voice message to any landline phone or mobile phone around the world, both via text-to-speech and custom WAV files to be played over the phone

        Whispir’s Voice module can easily connect all recipients to a single bridged call, simplifying your teleconferences and ensuring your message gets through

        Each voice call is made up of three parts:

        - Message introduction: Either Text-To-Speech (TTS) or a WAV file
        - Message acceptance: Asks the recipient to press a button or insert a PIN to hear the message
        - Message content: The concatenation of the message subject and message body. The latter can be either TTS or a WAV file. At the end the recipient will be given the possibility to acknowledge the message.
        <!-- theme: info -->

        > #### Adding pauses
        >
        > Pauses can be added to conference call details using the `+` character. Each `+` represents 1 second. Pauses allow some wait time to ensure the conference call service is ready to accept the account number and PIN.

        ### WAV files requirements

        WAV files can be used in place of Text-To-Speech to provide a custom `header` and `body`.

        | Voice field    | attachmentDesc |
        | -------------- |--------------- |
        | header         | `"voiceintro.wav"` |
        | body           | `"voicebody.wav"` |

        Before a WAV file can be used for the Voice module, it needs to conform to certain criteria:

        - All the WAV files combined must not exceed 10 MB in total file size
        - All the WAV files must be a maximum of 8 bit, 8000 Hz, 1ch, 64 kbps
        - If a WAV file is outside these criteria please use TTS instead
      x-examples:
        Text-To-Speech (TTS):
          header: 'This is the introduction, read out to the recipient prior to any key press.'
          body: 'This is the body of the voice call, read out after the key press'
          type: 'Pin:,ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:'
        TTS with conference:
          header: 'This is the introduction, read out to the recipient prior to any key press.'
          body: 'This is the body of the voice call, read out after the key press'
          type: 'Pin:7171,ConfCall:1800123123,ConfAccountNo:098711234,ConfPinNo:8181,ConfModPinNo:4242'
        WAV:
          header: ''
          body: ''
          type: 'Pin:,ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:'
          resources:
            attachment:
              - attachmentName: MessageHeader.wav
                attachmentDesc: voiceintro.wav
                derefUri: base64_uri_data
              - attachmentName: MessageBody.wav
                attachmentDesc: voicebody.wav
                derefUri: base64_uri_data
      x-tags:
        - Messages
      properties:
        header:
          type: string
          example: 'This is the introduction, read out to the recipient prior to any key press.'
          description: Introduction text played with the subject.
        body:
          type: string
          example: 'This is the body of the voice call, read out after the key press'
          description: 'Body text, read out to the recipient after the subject and header.'
        type:
          type: string
          default: 'Pin:,ConfCall:,ConfAccountNo:,ConfPinNo:,ConfModPinNo:'
          example: 'Pin:7171,ConfCall:1800123123,ConfAccountNo:098711234,ConfPinNo:8181,ConfModPinNo:4242'
          description: |-
            The conference call details of the voice message. Required when no conference call is being used. The minimum string to be used is specified in the example. Read the following section for information on each field.

            The following parameters can be set by specifying the value after the `:` in the `type` string:

            | Field         | Description |
            | ------------- |------------ |
            | Pin           | The access code required to be inserted from the recipient to hear the Voice message after the "header" is over. It can be left blank and then the user will be asked to proceed dialling "1". <br><br> For example, `7171`. <br><br> If the right code is inserted then "subject" and "body" of the Voice Message will be reproduced. The user will be able to dial "1" to replay the message, "2" to join the conference call or "3" to receive the details to dial in later. <br><br> In this last case the details - a Dial-In number and a PIN - will be repeated 3 times. |
            | ConfCall      | The teleconference line that will be used in the voice call. <br><br> For example, `1800123123`. <br><br> It is possible to reference this value in other channels using the **@@teleconf_number@@** custom variable. |
            | ConfAccountNo | The teleconference account or room number that is used in the voice call. <br><br> For example, `098711234`. <br><br> It is possible to reference this value in other channels using the **@@teleconf_account@@** custom variable. |
            | ConfPinNo     | The teleconference room PIN that is used in the voice call. <br><br> For example, `8181`. <br><br> It is possible to reference this value in other channels using the **@@teleconf_pin@@** custom variable. |
            | ConfModPinNo  | The teleconference moderator PIN that is used in the voice call. <br><br> For example, `4242`. <br><br> It is possible to reference this value in other channels using the **@@teleconf_mod_pin@@** custom variable. |
        footer:
          type: string
          description: Read-only property returned from the Whispir Platform. This property has no meaning to the API consumer.
          enum:
            - ''
          readOnly: true
        other:
          type: string
          description: Read-only property returned from the Whispir Platform. This property has no meaning to the API consumer.
          enum:
            - ''
          readOnly: true
        resources:
          $ref: '#/components/schemas/Attachments'
      required:
        - body
        - type
    Web:
      description: |-
        The web channel payload, used when attaching web content to a Message.

        Not required when a template is provided.
      type: object
      title: Web
      properties:
        body:
          type: string
          example: This is the content of my web publishing or Rich Push Message
          description: The linked web content body.
        type:
          type: string
          enum:
            - text/plain
            - text/html
          default: text/plain
          description: The web Message content type.
      x-tags:
        - Messages
      x-examples:
        Web:
          body: This is the content of my web publishing or Rich Push Message
          type: text/plain
    Social:
      type: object
      title: Social
      x-tags:
        - Messages
      x-examples:
        Twitter:
          social:
            - id: social
              body: Twitter Content
              type: text/plain
        Facebook:
          social:
            - id: social_long
              body: Facebook Content
              type: text/plain
      description: Whispir can publish content to your Twitter and Facebook walls. Other socials can be made available upon request.
      properties:
        social:
          type: array
          description: The list of social channel content.
          items:
            title: Channel
            type: object
            description: The social channel object.
            properties:
              id:
                type: string
                description: |-
                  The identifier for the social content channel. Read the following section for information on each channel.

                  | Channel        | id |
                  | -------------- |--------------- |
                  | Twitter        | `"social"` |
                  | Facebook       | `"social_long"` |
                enum:
                  - social
                  - social_long
              body:
                type: string
                example: Facebook Content
                description: The social content body.
              type:
                type: string
                description: The social message content type.
                enum:
                  - text/plain
                  - text/html
    Features:
      type: object
      title: Features
      x-tags:
        - Messages
      description: |-
        ### Push Messaging

        Whispir allows you to send push notifications to any iOS and Android-based apps

        Setting up the platform to handle push notifications involves some one-time steps and some periodically repeated steps (updating push tokens). See Apps to get a clear understanding of the related steps and endpoints. Whispir doesn't support sending push notifications to device tokens directly. Read more in Contact devices about how to register the device tokens under contacts.

        ### Message Aliasing

        The Whispir UI allows you to configure a sender alias from which messages are sent. Instructions for alias creation can be found in [Configure message aliases](https://au.whispir.com/onlinehelp/Content/Topics-whispir-ua/administration/alias-manager/config-message-aliases.htm) within Whispir documentation.

        The message alias can be attached to a message to template, to configure the the sender for the following channels:
        * SMS - a custom mobile number, e.g. +61 123 456 789
        * Email - a custom email address, e.g. marketing@example.com
        * Voice - a custom mobile number, e.g. +61 123 456 789
      x-examples:
        Escalation:
          pushOptions:
            escalationMins: 3
        Notifications:
          pushOptions:
            notifications: enabled
        Message Alias:
          aliasOption:
            aliasName: Marketing
        Push Message:
          pushOptions:
            notifications: enabled
            escalationMins: '3'
            appId: '2342345'
            priority: NORMAL
            fcm:
              androidChannelId: campaign-app-push-notification-channel-1
              sound: /res/raw/alert_sound.wav
              action: campaign_intent
              image: 'https://mycompany.com/sales/campaign.png'
            apns:
              sound: Library/Sounds/alert_sound.wav
              action: campaign_action
            data:
              custom-image: 'https://mycompany.com/sales/ad.png'
              custom-video: 'https://mycompany.com/sales/ad.mp4'
              custom-link: 'https://ad-campaign-feedback/id'
              custom-gif: 'https://ad-campaign-resources/2022/campaign.gif'
              updated-title: New Campaign Title
      properties:
        pushOptions:
          type: object
          title: Push Options
          description: The object defining options for push messages.
          properties:
            notifications:
              type: string
              description: A flag indicating whether notifications should be enabled for message replies.
              enum:
                - enabled
                - disabled
            escalationMins:
              type: string
              example: '3'
              description: The number of minutes to wait for a reply until escalating to the next contact.
            appId:
              type: string
              description: The identifier for the registered application.
              example: app342983
            priority:
              type: string
              description: |-
                The priority of the notification. 

                NORMAL (the default value) will indicate to FCM/APNS to take into consideration the target device's battery consumption at the expense of delivering the message with a delay. 

                The value NORMAL maps to priority *NORMAL* in FCM and priority *5* in APNS. 

                The value HIGH maps to priority *HIGH* in FCM and *10* in APNS.
              default: NORMAL
              enum:
                - NORMAL
                - HIGH
              example: NORMAL
            fcm:
              type: object
              title: Fcm
              description: The fcm object holds attributes specific to the contacts' Firebase-registered Android devices
              properties:
                androidChannelId:
                  type: string
                  description: |-
                    Translates to the <span style="color:red">*android_channel_id*</span> attribute in FCM.
                    Note: use this attribute for devices running Android versions 8 or later.
                  example: my_app_notification_channel_id
                sound:
                  type: string
                  description: |-
                    The sound to play when the device receives the notification.
                    The value *default* will play the system sound, otherwise this attribute must point to a sound resource bundled in the app, e.g. */res/raw/notification_sound.wav*

                    Note: This attribute can be used for devices running Android versions older than Android 8. For versions 8+ please use the *androidChannelId*
                  example: /res/raw/notification_sound.wav
                action:
                  type: string
                  description: |-
                    The action linked with a user click on the notification.
                    Translates to the <span style="color:red">*click_action*</span> attribute in FCM.
                  example: campaign_action
                image:
                  type: string
                  description: |-
                    The URL of an image to be downloaded and displayed in the notification.

                    Details of the Android support for images in push notifications can be found [here](https://firebase.google.com/docs/cloud-messaging/android/send-image)
                  example: 'https://mycompany.com/sales/campaign.png'
            apns:
              type: object
              title: Apns
              description: The apns object holds attributes specific to the contacts' APNS-registered (Apple Push Notification Service) iOS devices
              properties:
                sound:
                  type: string
                  description: |-
                    The sound to play when the device receives the notification.
                    The value *default* will play the system sound, otherwise this attribute must point to a sound resource in your app's main bundle or in the *Library/Sounds* folder of your app's container directory.
                  example: Library/Sounds/alert_sound.wav
                action:
                  type: string
                  description: |
                    The action linked with a user click on the notification.
                    Translates to the <span style="color:red">*category*</span> attribute in APNS.
                  example: campaign_action
            data:
              type: object
              title: Data
              description: |-
                Custom key-value pairs of the notification's payload. These values can be used by the target app for enhanced functionality provided that it has been designed to handle them (images, videos, links etc).

                These attributes translate to <span style="color:red">*data*</span>  in the FCM payload.

                For APNS, the custom attributes of *data* are inserted as custom properties outside of the <span style="color:red">*aps*</span> payload.
          required:
            - appId
        aliasOption:
          type: object
          title: Alias Option
          description: The object defining options for message sender aliasing.
          properties:
            aliasName:
              type: string
              description: The name of the alias configured to modify the message sender.
              example: Marketing
    Attachments:
      type: object
      description: The resources to attach to the Message.
      title: Attachments
      properties:
        attachments:
          description: A list of attachments to attach to the Message.
          type: array
          uniqueItems: false
          items:
            type: object
            description: |-
              Attachments can be of any type [e.g. PDF, images and documents], and the maximum size of all attached files combined is 10 MB

              Attachments must be provided in the payload of the message. URLs can be referenced in the email but will not be added as message attachments.
            title: Attachment
            properties:
              attachmentName:
                type: string
                description: 'The name of the attachment, including the extension.'
                example: TestIcon.png
              derefUri:
                type: string
                description: The Base64 encoded value for the email attachment.
                example: iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==
              attachmentDesc:
                type: string
                description: A description for the attachment.
                example: My photo
            required:
              - attachmentName
              - derefUri
      writeOnly: true
      x-tags:
        - Messages
      x-examples:
        Image:
          attachments:
            - attachmentName: TestIcon.png
              derefUri: iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==
              attachmentDesc: My photo
        JSON:
          attachments:
            - attachmentName: sample.json
              attachmentDesc: Sample
              derefUri: eyAKICAgICJzYW1wbGUiOiB0cnVlCn0=
    DeliveryReceipt:
      title: Delivery Receipt
      description: A fixed object structure used by for Whispir internally for tracking purposes.
      type: object
      readOnly: true
      properties:
        period:
          description: The period of the message delivery.
          type: string
          example: ''
          readOnly: true
        rule:
          description: The rule of the message delivery.
          type: string
          example: ''
          readOnly: true
        type:
          description: The type of the message delivery.
          type: string
          example: ''
          readOnly: true
        publishToWeb:
          description: Specifies whether the message was published to the web.
          type: boolean
          readOnly: true
        expiryDay:
          description: Specifies the number of days before the message expires.
          type: number
          example: 0
          readOnly: true
        expiryHour:
          description: Specifies the number of hours before the message expires.
          type: number
          example: 0
          readOnly: true
        expiryMin:
          description: Specifies the number of minutes before the message expires.
          type: number
          example: 0
          readOnly: true
        feedIds:
          description: The feeds identifier for the message delivery.
          type: string
          example: ''
          readOnly: true
        bool:
          description: The bool field for the message delivery.
          type: boolean
          readOnly: true
      x-examples:
        Example:
          period: ''
          rule: ''
          type: ''
          publishToWeb: false
          expiryDay: 0
          expiryHour: 0
          expiryMin: 0
          feedIds: ''
          bool: false
      x-tags:
        - Messages
    MessageStatus:
      type: object
      title: Message Status
      description: The object describing the delivery status of the message.
      x-tags:
        - Messages
      properties:
        link:
          $ref: '#/components/schemas/Links'
        categories:
          type: array
          uniqueItems: true
          minItems: 5
          maxItems: 5
          description: Present when `view` is `summary`.
          items:
            type: object
            title: Delivery Category
            additionalProperties: false
            properties:
              name:
                description: The delivery status of the message.
                type: string
                enum:
                  - Sent
                  - Pending
                  - Received
                  - Acknowledged
                  - Undeliverable
              recipientCount:
                description: The number of recipients with the given `name` status.
                type: number
                example: 1
              percentageTotal:
                description: The percentage of recipients with the given `name` status.
                type: string
                example: 100.0%
        name:
          type: string
          example: '61400400400'
          description: Present when `view` is `detailed`.
        info:
          type: string
          example: '  SMS message sent. SMSCODE=008 SMS message received by device. SMSCODE=001 '
          description: Present when `view` is `detailed`.
        status:
          type: array
          description: Present when `view` is `detailed`.
          minItems: 3
          maxItems: 3
          uniqueItems: true
          items:
            type: object
            title: Delivery Status
            properties:
              type:
                type: string
                enum:
                  - sms
                  - email
                  - voice
                description: The message channel
              status:
                type: string
                example: DELIVRD
                description: The delivery status
              destination:
                type: string
                description: The message destination
                example: '61400400400'
      x-examples:
        Summary:
          link:
            - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus'
              rel: self
              method: GET
              host: api.au.whispir.com
              port: -1
          categories:
            - name: Sent
              recipientCount: 0
              percentageTotal: 0.0%
            - name: Pending
              recipientCount: 0
              percentageTotal: 0.0%
            - name: Received
              recipientCount: 1
              percentageTotal: 100.0%
            - name: Acknowledged
              recipientCount: 0
              percentageTotal: 0.0%
            - name: Undeliverable
              recipientCount: 0
              percentageTotal: 0.0%
        Detailed:
          name: '61400400400'
          info: '  SMS message sent. SMSCODE=008 SMS message received by device. SMSCODE=001 '
          link:
            - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus?view=detailed'
              rel: self
              method: GET
              host: api.au.whispir.com
              port: -1
          status:
            - type: email
              status: ''
              destination: ''
            - type: sms
              status: DELIVRD
              destination: '61400400400'
              sentTimestamp: 1647466923000
              receivedTimestamp: 1647466931000
            - type: voice
              status: ''
              destination: ''
    MessageStatusCollection:
      description: 'The message status object, describing the delivery of the sent message.'
      type: object
      x-examples:
        Summary:
          messageStatuses:
            - link:
                - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus'
                  rel: self
                  method: GET
                  host: api.au.whispir.com
                  port: -1
              categories:
                - name: Sent
                  recipientCount: 0
                  percentageTotal: 0.0%
                - name: Pending
                  recipientCount: 0
                  percentageTotal: 0.0%
                - name: Received
                  recipientCount: 1
                  percentageTotal: 100.0%
                - name: Acknowledged
                  recipientCount: 0
                  percentageTotal: 0.0%
                - name: Undeliverable
                  recipientCount: 0
                  percentageTotal: 0.0%
          link: []
        Detailed:
          messageStatuses:
            - name: '61400400400'
              info: '  SMS message sent. SMSCODE=008 SMS message received by device. SMSCODE=001 '
              link:
                - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messagestatus?view=detailed'
                  rel: self
                  method: GET
                  host: api.au.whispir.com
                  port: -1
              status:
                - type: email
                  status: ''
                  destination: ''
                - type: sms
                  status: DELIVRD
                  destination: '61400400400'
                  sentTimestamp: 1647466923000
                  receivedTimestamp: 1647466931000
                - type: voice
                  status: ''
                  destination: ''
          status: '1 to 1 of 1    '
          link: []
      title: Message Status Collection
      x-tags:
        - Messages
      properties:
        messageStatuses:
          description: The message statuses.
          type: array
          items:
            $ref: '#/components/schemas/MessageStatus'
        link:
          $ref: '#/components/schemas/Links'
        status:
          type: string
          example: '1 to 1 of 1    '
          description: Present when `view` is `detailed`.
    MessageResponseSummary:
      title: Message Response Summary
      description: The summary message response object.
      type: object
      x-examples:
        Example:
          messageresponses:
            - percentageTotal: 50%
              responseCount: '1'
              link: []
              type: noresponse
            - percentageTotal: 50%
              responseCount: '1'
              link: []
              type: notmatched
          link:
            - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=summary'
              rel: self
              method: GET
      x-tags:
        - Messages
      properties:
        messageresponses:
          description: The message response statuses.
          type: array
          uniqueItems: true
          readOnly: true
          items:
            description: 'First object if `view` is `summary`, second object if `view` is `detailed`.'
            type: object
            title: Response Status Summary
            properties:
              percentageTotal:
                description: Details the percentage of responses received for the sent message across all channels.
                type: string
                example: 100%
                readOnly: true
              responseCount:
                description: Details the number of responses received for the sent message across all channels.
                type: string
                example: '1'
                readOnly: true
              link:
                $ref: '#/components/schemas/Links'
              type:
                description: |-
                  The message response category. 
                  * `noresponse` - the message was sent but was not replied to
                  * `notmatched` - the message was replied to and the answer didn't match any search criteria
                type: string
                enum:
                  - noresponse
                  - notmatched
                readOnly: true
            required:
              - percentageTotal
              - responseCount
              - link
              - type
        link:
          $ref: '#/components/schemas/Links'
      required:
        - messageresponses
        - link
    Responder:
      description: The message responder object.
      title: Responder
      readOnly: true
      type: object
      required:
        - name
        - mri
        - mobile
        - email
        - voice
      properties:
        name:
          type: string
          minLength: 1
          description: The name of the sender of this message
          example: John Wick
          readOnly: true
        mri:
          example: support@whispir.com
          type: string
          description: The unique identifier for this contact within Whispir
          readOnly: true
        mobile:
          example: '61400400400'
          type: string
          minLength: 1
          description: The mobile phone number associated with this sender
          readOnly: true
        voice:
          example: '61400400400'
          type: string
          minLength: 1
          description: The phone number associated with the voice channel for this sender
          readOnly: true
        email:
          example: support@whispir.com
          type: string
          description: The email address associated with the email channel for this sender
          readOnly: true
      x-examples:
        Example 1:
          name: John Wick
          mri: support@whispir.com
          mobile: '61400400400'
          voice: '61400400400'
          email: support@whispir.com
      x-tags:
        - Messages
    Response:
      type: object
      title: Response
      description: |-
        The details about this particular message that have been sent to the callback

        IMPORTANT: Depending on the flow, you may only see  one of the acknowledged or undeliverable keys with timestamps as their value
      properties:
        channel:
          type: string
          minLength: 1
          description: 'The channel that this message was sent on. Either SMS, email or voice'
          enum:
            - sms
            - email
            - voice
            - N/A
          readOnly: true
        acknowledged:
          example: '22/10/20 10:29'
          type: string
          minLength: 1
          description: The date/time that this message was acknowledged
          readOnly: true
        undeliverable:
          example: '22/10/20 10:29'
          type: string
          description: The date/time that this message was marked as undeliverable
          readOnly: true
        content:
          type: string
          minLength: 1
          description: The content of the message
          example: 'Delivered successfully to 61430430306 at 22/10/20 09:28'
          readOnly: true
      readOnly: true
      required:
        - content
        - acknowledged
        - channel
      x-examples:
        Example 1:
          content: 'OK, got it. Thanks.'
          acknowledged: '28/09/12 08:48'
          channel: sms
      x-tags:
        - Messages
    MessageResponseDetailed:
      title: Message Response Detailed
      description: The detailed message response object.
      type: object
      x-examples:
        Example:
          messageresponses:
            - percentageTotal: 50%
              responseCount: '1'
              link: []
              type: noresponse
            - percentageTotal: 50%
              responseCount: '1'
              link: []
              type: notmatched
          link:
            - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=summary'
              rel: self
              method: GET
      x-tags:
        - Messages
      properties:
        messageresponses:
          type: array
          description: The message response statuses.
          uniqueItems: true
          readOnly: true
          items:
            type: object
            title: Response Status Detailed
            properties:
              from:
                $ref: '#/components/schemas/Responder'
              responseCategory:
                description: |-
                  The message response category. 
                  * `noresponse` - the message was sent but was not replied to
                  * `notmatched` - the message was replied to and the answer didn't match any search criteria
                type: string
                readOnly: true
                enum:
                  - noresponse
                  - notmatched
              responseMessage:
                $ref: '#/components/schemas/Response'
            required:
              - from
              - responseCategory
              - responseMessage
        link:
          $ref: '#/components/schemas/Links'
        status:
          type: string
          example: '1 to 1 of 1    '
          description: The message response pagination status.
          readOnly: true
      required:
        - messageresponses
        - link
    MessageResponseCollection:
      description: The message response object.
      oneOf:
        - $ref: '#/components/schemas/MessageResponseDetailed'
        - $ref: '#/components/schemas/MessageResponseSummary'
      x-examples:
        Summary:
          value:
            messageresponses:
              - percentageTotal: 50%
                responseCount: '1'
                link: []
                type: noresponse
              - percentageTotal: 50%
                responseCount: '1'
                link: []
                type: notmatched
            link:
              - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                rel: self
                method: GET
                host: api.au.whispir.com
                port: -1
        Detailed:
          value:
            status: '1 to 2 of 2    '
            messageresponses:
              - from:
                  name: John Smith
                  mri: John_Smith.484215.Critical_Incident_Management@Contact.whispir.com
                  mobile: '+1000000000'
                  email: jsmith@test.com
                  voice: '+1000000000'
                responseCategory: noresponse
                responseMessage:
                  content: N/A
                  acknowledged: N/A
                  channel: N/A
              - from:
                  name: Fred Smith
                  mri: Fred_Smith.341550.Critical_Incident_Management@Contact.whispir.com
                  mobile: '+1000000000'
                  email: fsmith@test.com
                  voice: '+1000000000'
                responseCategory: notmatched
                responseMessage:
                  content: 'OK, got it. Thanks.'
                  acknowledged: '28/09/12 08:48'
                  channel: sms
            link: []
      x-tags:
        - Messages
      title: Message Response Collection
    Resource:
      type: object
      x-tags:
        - Resources
      title: Resource
      description: |-
        When you’re creating a resource, the following conditions apply:

        - Maximum of 10 MB per file being uploaded
        - Transactions have an enforced timeout
        - Resources are available in the Whispir platform for a limited time [90 days]. After this time they are automatically cleaned. This is a configurable setting for Whispir Administrators
      x-examples:
        JSON:
          name: sample.json
          scope: private
          mimeType: application/json
          derefUri: eyAKICAgICJzYW1wbGUiOiB0cnVlCn0=
      properties:
        id:
          type: string
          example: 9B9E2425AAFEEE49E9D9112B6BAC22A9
          description: The identifier for the resource.
          readOnly: true
        name:
          type: string
          description: Specifies the name of the file being uploaded. The extension of the file too is allowed to be present in the name.
          example: sample.json
        scope:
          type: string
          description: |-
            Specifies the permission scope of the file being uploaded. The scope defines the access restriction of the resource. It can only be one of the following:

            - **public**: Public files have an addressable URL and are available publicly
            - **private**: Private files have no URL and are only available for bulk messaging purposes and for importing contacts
          enum:
            - private
            - public
        mimeType:
          type: string
          description: |-
            The mime type of the file that is being uploaded. The type is dependent on the scope of the resource.

            - **public**: Public files can be any mimetype, e.g. text/HTML or text/CSV
            - **private**: Private files are restricted to CSV, JSON and XML. The respective mimetypes to be used are text/csv, application/json, application/xml
          example: application/json
        derefUri:
          type: string
          description: The base64 representation of the file being submitted.
          example: eyAKICAgICJzYW1wbGUiOiB0cnVlCn0=
          writeOnly: true
        link:
          $ref: '#/components/schemas/Links'
      required:
        - name
        - scope
        - mimeType
        - derefUri
    ResourceCollection:
      type: object
      description: List of resources object
      properties:
        status:
          type: string
          description: Provides the total number of records fetched. This attribute may return "No records found" when there are no callbacks available.
          example: 1 to 2 of 2
          readOnly: true
        resources:
          type: array
          description: List of resources
          items:
            $ref: '#/components/schemas/Resource'
          readOnly: true
      x-examples:
        status: 1 to 2 of 2
        resources:
          - id: 9B9E2425AAFEEE49E9D9112B6BAC22A9
            name: sample.json
            scope: private
            mimeType: application/json
            derefUri: eyAKICAgICJzYW1wbGUiOiB0cnVlCn0=
            link:
              - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                rel: self
                method: GET
                host: api.au.whispir.com
                port: -1
      x-tags:
        - Resources
      title: Resource Collection
    Template:
      type: object
      x-tags:
        - Templates
      title: Template
      description: The template object.
      x-examples:
        Template:
          messageTemplateName: Sample SMS Template
          messageTemplateDescription: Template to provide an example on whispir.io
          responseTemplateId: responseTemplateId
          subject: Test SMS Message
          body: This is the body of my test SMS message
          email:
            body: This is the body of my email message.
            footer: This is the footer of my message.
            type: text/plain
            resources:
              attachments:
                - attachmentName: TestIcon.png
                  attachmentDesc: MyPhoto
                  derefUri: iVBORw0KGgoAAAANSUhEUgAAABQAAAASCAIAAADUsmlHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAMvSURBVDhPTVT5S1RhFD3fezOOOePTXHKriWgjsogWC1TSMuuHIFqoX0KsIIgSWwiq/6FFU8MKK6KyXYSKpkUKR4QMSSpCLQpyxHHUZpztzdu63xub5vKWj/fu+c6599z3mMfjSU9P13UdZoiCaLfZYQWiUGKq1WrBLEBDOBpWNTWeQyEIwvT0NAsEAgROPKXFxceNbQOtv4ShkKCkaZZ5kYU1Sw6dqT0NMTkLBIbf7zf+xaOuJzgG4RmyPyP/Kwq/oWAYeT+R6gYOofnmlUQmLQjI6JQkifasu368KdCQWwFEwBiYQOIgiDBETDFIORh/iZ0De55cehgXQJIphce9d/ebJhuyV0P3QY9Cj/HDUKhseIPomP/CW2QYB42nSx+db76YUM9IusPhYHVM2g5Bpo5xNuIkZibCF8On0oGVjhWabmR8EBx5GDuHaItsy0zhzA6bo/H5ZSyDMQ1d4YQa0Sqc1hdAe3E7IYkqp9tiUcHGkXIQZ8+fm+k5uXK3/46YAV3mMMLEt/BHUJ1Vua9oH+WV9ayLyLpVhRYFkT8d4mUzRuI0DAcHmQngSLrGoBJ/GC/L31JSy/cm91ifXTcboYDJGLX+1kI6WS3AQFSRCUDvwhGEwubiD1yVLkLKWuxoT50kzGwab6Ru6HIsahpiwTybkwTLU9iUU1Ezf394CmuyV20p2kLg8mcbRHLLxGimLlWFFMpMc6TRFlx29aJqePBgx4M3u7tubb1dMXfjw6rHhOwb+/jhV3+qNtMFKspQEZnA+oxSPr9UdjgUllV59pHZhSUFI/We5AnMv5o7bvhsFu5f3DlmR7ATr/a+rtq2mVulqEqmlFlbUuv5MbqudW0C7PrhGpvwidRhIoyXqiHoRam/tGrT5n9Wmfcb9TfmBOf0DXy80H0h/uKU6yQRcqlmk+mji0RhbbN2XOpAygzF/9nmfp4oc4+4y6vLqRnuUTdsfNqYFRop/4JFw4t723qz52YlZpvPd/K30vm+03nAie1ADXAYOADsgHOXs/laix7RkzMJyJJ/BjQ09lQ7me8f9/cP9nsnvemzpOIFy3PzclkK0wyNgvDEHP8Z/AXQ58rAz69IBAAAAABJRU5ErkJggg==
          voice:
            header: 'This is the introduction, read out to the recipient prior to any key press.'
            body: 'This is the body of the voice call, read out after the key press'
            type: 'Pin:7171,ConfCall:1800123123,ConfAccountNo:098711234,ConfPinNo:8181,ConfModPinNo:4242'
          web:
            body: This is the content of my web publishing or Rich Push Message
            type: text/plain
          social:
            social:
              - id: social
                body: Facebook Content
                type: text/plain
          type: defaultNoReply
          features:
            pushOptions:
              notifications: enabled
              escalationMins: '3'
              appId: appId
          dlr:
            period: string
            publishToWeb: false
            rule: string
            expiryDay: 0
            expiryHour: 0
            expiryMin: 0
            feedIds: string
            bool: false
            type: string
          link:
            - uri: 'https://api.au.whispir.com/workspaces/618CAD33669AD31A/templates/3148356543415EE7'
              rel: self
              method: GET
              host: api.au.whispir.com
              port: -1
          tags: string
        Example-Email-only:
          messageTemplateName: Sample SMS Template
          messageTemplateDescription: Template to provide an example on whispir.io
          responseTemplateId: responseTemplateId
          subject: Test SMS Message
          body: This is the body of my test SMS message
          email:
            body: This is the body of my email message.
            footer: This is the footer of my message.
            type: text/plain
            resources:
              attachments:
                - attachmentName: TestIcon.png
                  derefUri: iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==
                  attachmentDesc: My photo
          type: defaultNoReply
          dlr:
            period: ''
            rule: ''
            type: ''
            publishToWeb: true
            expiryDay: 0
            expiryHour: 0
            expiryMin: 0
            feedIds: ''
            bool: true
          link:
            - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
              rel: self
              method: GET
              host: api.au.whispir.com
              port: -1
          tags: campaign
          id: 7DB65E1D8853D1C8
      properties:
        messageTemplateName:
          type: string
          description: Specifies the name of the message template to be used within message requests.
          example: Sample SMS Template
          readOnly: true
        messageTemplateDescription:
          type: string
          description: Specifies the description of the message template for others to understand its purpose.
          example: Template to provide an example on whispir.io
        responseTemplateId:
          type: string
          description: Specifies the ID of the Response Rule that should be associated with this Message Template.
          example: responseTemplateId
        subject:
          type: string
          description: 'Specifies the first line of the SMS message or Voice call, and the subject of the Email message.'
          example: Test SMS Message
        body:
          type: string
          description: Specifies the content of the SMS message.
          example: This is the body of my test SMS message
        email:
          $ref: '#/components/schemas/Email'
        voice:
          $ref: '#/components/schemas/Voice'
        web:
          $ref: '#/components/schemas/Web'
        social:
          $ref: '#/components/schemas/Social'
        type:
          type: string
          description: Allows the user to modify the message behaviour for replies and DLRs (delivery receipts)
          example: defaultNoReply
        features:
          $ref: '#/components/schemas/Features'
        dlr:
          $ref: '#/components/schemas/DeliveryReceipt'
        link:
          $ref: '#/components/schemas/Links'
        tags:
          type: string
          description: Information which helps to label related message templates together
          example: campaign
          readOnly: true
        id:
          type: string
          example: 7DB65E1D8853D1C8
          description: specifies the id of the message template
          default: 7DB65E1D8853D1C8
          readOnly: true
      required:
        - messageTemplateName
        - subject
        - body
    TemplateCollection:
      description: Returns a list of templates
      type: object
      x-examples:
        Example:
          status: '1 to 1 of 1    '
          messagetemplates:
            - messageTemplateName: Sample SMS Template with tags
              messageTemplateDescription: Template to provide an example on whispir.io no.1
              id: 3148356543415EE7
              link:
                - uri: 'https://api.au.whispir.com/workspaces/618CAD33669AD31A/templates/3148356543415EE7'
                  rel: self
                  method: GET
                  host: api.au.whispir.com
                  port: -1
          link: []
      title: Template Collection
      x-tags:
        - Templates
      properties:
        status:
          type: string
          minLength: 1
          example: 1 to 1 of 1
          description: Provides the total number of records fetched. This attribute may return "No records found" when there are no message templates available.
          readOnly: true
        messagetemplates:
          type: array
          uniqueItems: true
          minItems: 1
          description: Specifies the name of the message template
          items:
            $ref: '#/components/schemas/Template'
          readOnly: true
        link:
          $ref: '#/components/schemas/Links'
      required:
        - status
        - messagetemplates
    ResponseRule:
      type: object
      x-tags:
        - Response Rules
      title: Response Rule
      x-examples:
        Example:
          name: Response Rule 1
          description: My Response Rule
          responseTemplatePatterns:
            name: Yes Rule
            pattern: startswith
            textPrompt: 'YES'
            voicePrompt: '1'
            spokenVoicePrompt: to select YES
            colour: '#00947d'
      description: |-
        Response Rules are useful when your Templates require the end-users to select among known responses [for example, Yes/No, Accept/Decline or ranking something from 1 to 5]

        Using Response Rules in combination with Templates allows you to automatically categorise any response to these messages into different response groups for reporting purposes
      properties:
        name:
          type: string
          example: Response Rule 1
          description: Specifies the name of the response rule
        description:
          type: string
          description: Specifies the description of the response rule for others to understand its purpose
          example: My Response Rule
        responseTemplatePatterns:
          type: object
          x-tags:
            - Response Rules
          title: Template Pattern
          description: 'This object contains the responseTemplatePattern array, which contains each of the response rule elements. More details on the configuration of this object can be found below'
          properties:
            name:
              type: string
              example: Yes Rule
              description: The name of the response category. The same key is called `matchedCategory` when placed inside the `customParameters` of Callbacks payload
            pattern:
              type: string
              example: startswith
              description: |-
                Specifies the mechanism for matching the textPrompt

                The following options are available:
                - startsWith
                - contains
                - exactmatch

                NOTE: none of them is case sensitive, so in the example above replying "YES" or "yes" or "Yes" makes no difference
            textPrompt:
              type: string
              example: 'YES'
              description: 'Specifies the textual string that should be matched using the pattern (specified above) within the email, SMS or web response'
            voicePrompt:
              type: string
              example: '1'
              description: |-
                The character (2–9, * or #) that the recipient of the voice call should enter to select a response option

                **IMPORTANT**: please do NOT use the key "1" because this is already reserved to repeat the message
            spokenVoicePrompt:
              type: string
              example: to select YES
              description: The text-to-speech content that is dynamically read out when describing to the user what a particular response option is
            colour:
              type: string
              example: '#00947d'
              description: The hexadecimal colour code that is used in the Message Response Report to differentiate the groups of responses
          required:
            - name
            - pattern
            - textPrompt
            - voicePrompt
            - spokenVoicePrompt
            - colour
      required:
        - name
        - responseTemplatePatterns
    ResponseRuleCollection:
      type: object
      description: A collection of Response Rules.
      properties:
        status:
          type: string
          description: Provides the total number of records fetched. This attribute may return "No records found" when there are no response rules available.
          example: 1 to 8 of 8
          readOnly: true
        responseRules:
          type: array
          description: The list of response rules
          items:
            $ref: '#/components/schemas/ResponseRule'
          readOnly: true
      required:
        - status
        - responseRules
      x-examples:
        Example 1:
          value:
            status: 1 to 8 of 8
            responseRules:
              - name: Response Rule 1
                description: My Response Rule
                responseTemplatePatterns:
                  name: Yes Rule
                  pattern: startswith
                  textPrompt: 'YES'
                  voicePrompt: '1'
                  spokenVoicePrompt: to select YES
                  colour: '#00947d'
      title: Response Rule Collection
      x-tags:
        - Response Rules
    Contact:
      type: object
      x-tags:
        - Contacts
      title: Contact
      x-examples:
        Basic:
          firstName: John
          lastName: Wick
          workMobilePhone1: '61400400400'
          workEmailAddress1: testUser@example.com
          workCountry: Australia
          timezone: Australia/Melbourne
        Comprehensive:
          firstName: John
          lastName: Wick
          workMobilePhone1: '61400400400'
          workEmailAddress1: testUser@example.com
          workCountry: Australia
          timezone: Australia/Melbourne
          title: Dr
          workMobilePhone2: '61500500500'
          workEmailAddress2: newUser@example.com
          workPhoneAreaCode1: '09'
          workPhone1: '5006000'
          workPhoneAreaCode2: '09'
          workPhone2: '5007000'
          workFaxAreaCode1: '09'
          workFax1: '5008000'
          workSatellitePhone: '61600600600'
          workOtherPhone: '61700700700'
          workAddress1: Level 15
          workAddress2: 360 Collins St
          workSuburb: Melboure
          workState: Victoria
          workPostCode: '3000'
          workPostalAddress1: Level 15
          workPostalAddress2: 360 Collins St
          workPostalSuburb: Melboure
          workPostalState: Victoria
          workPostalPostCode: '3000'
          personalEmailAddress1: personalPrimaryUser@example.com
          personalEmailAddress2: personalSecondaryUser@example.com
          personalAddress1: Level 15
          personalAddress2: 360 Collins St
          personalSuburb: Melboure
          personalState: Victoria
          personalPostCode: '3000'
          personalCountry: Australia
          personalPhoneAreaCode1: '09'
          personalPhone1: '5006000'
          personalPhoneAreaCode2: '09'
          personalPhone2: '5007000'
          personalFaxAreaCode1: '09'
          personalFax1: '5008000'
          otherPhoneAreaCode1: '09'
          otherPhone1: '5009000'
          otherMobile: '61900900900'
          otherFirstName: Harold
          otherLastName: Wickman
          otherTitle: Mr
          status: A
          companyName: Whispir
          jobTitle: Software Engineer
          division: Technology
          businessUnit: Core Platform
          department: Research & Development
          teamName1: Optimus Prime
          teamName2: Bumblebee
          role1: Administrator
          role2: Analyst
          locations:
            - latitude: 41.9028
              longitude: -12.4964
              type: CurrentLocation
          messagingoptions:
            - channel: sms
              enabled: true
              primary: WorkMobilePhone1
              secondary: WorkMobilePhone1
              tertiary: WorkMobilePhone1
      description: The contact object.
      properties:
        firstName:
          type: string
          example: John
          description: The first name of the contact.
        lastName:
          type: string
          example: Wick
          description: The last name of the contact.
        workMobilePhone1:
          type: string
          example: '61400400400'
          description: The primary work mobile number of the contact.
        workEmailAddress1:
          type: string
          example: testUser@example.com
          description: The primary work email address of the contact.
        workCountry:
          type: string
          example: Australia
          description: The work country of the contact.
        timezone:
          type: string
          example: Australia/Melbourne
          description: |-
            The time zone in which the contact lives in. Values are relative to GMT.

            Supported values are:

            * Offset from GMT in the format `+/-NN`. For example, `+10`.
            * Worldwide time zone in the format `Country/City`. For example, `Australia/Melbourne`

            See the list of [worldwide time zones](https://en.wikipedia.org/wiki/List_of_time_zones_by_country).
        title:
          type: string
          example: Dr
          description: The title to address the contact with.
        workMobilePhone2:
          type: string
          example: '61500500500'
          description: The secondary work mobile number of the contact.
        workEmailAddress2:
          type: string
          example: newUser@example.com
          description: The secondary work email address of the contact.
        workPhoneAreaCode1:
          type: string
          example: '09'
          description: The primary work phone number area code of the contact.
        workPhone1:
          type: string
          example: '5006000'
          description: The primary work phone number of the contact.
        workPhoneAreaCode2:
          type: string
          example: '09'
          description: The secondary work phone number area code of the contact.
        workPhone2:
          type: string
          example: '5007000'
          description: The secondary work phone number of the contact.
        workFaxAreaCode1:
          type: string
          example: '09'
          description: The work fax number area code of the contact.
        workFax1:
          type: string
          example: '5008000'
          description: The work fax number of the contact.
        workSatellitePhone:
          type: string
          example: '61600600600'
          description: The work satellite phone number of the contact.
        workOtherPhone:
          type: string
          example: '61700700700'
          description: The work other phone number of the contact.
        workAddress1:
          type: string
          example: Level 15
          description: The first work address line of the contact.
        workAddress2:
          type: string
          example: 360 Collins St
          description: The second work address line of the contact.
        workSuburb:
          type: string
          example: Melboure
          description: The work address suburb of the contact.
        workState:
          type: string
          example: Victoria
          description: The work address state of the contact.
        workPostCode:
          type: string
          example: '3000'
          description: The work address post code of the contact.
        workPostalAddress1:
          type: string
          example: Level 15
          description: The first work postal address line of the contact.
        workPostalAddress2:
          type: string
          example: 360 Collins St
          description: The second work postal address line of the contact.
        workPostalSuburb:
          type: string
          example: Melboure
          description: The work postal address suburb of the contact.
        workPostalState:
          type: string
          example: Victoria
          description: The work postal address state of the contact.
        workPostalPostCode:
          type: string
          example: '3000'
          description: The work postal address post code of the contact.
        personalEmailAddress1:
          type: string
          example: personalPrimaryUser@example.com
          description: The primary personal email address of the contact.
        personalEmailAddress2:
          type: string
          example: personalSecondaryUser@example.com
          description: The secondary personal email address of the contact.
        personalAddress1:
          type: string
          example: Level 15
          description: The first personal address line of the contact.
        personalAddress2:
          type: string
          example: 360 Collins St
          description: The second personal address line of the contact.
        personalSuburb:
          type: string
          example: Melboure
          description: The personal address suburb of the contact.
        personalState:
          type: string
          example: Victoria
          description: The personal address state of the contact.
        personalPostCode:
          type: string
          example: '3000'
          description: The personal address post code of the contact.
        personalCountry:
          type: string
          example: Australia
          description: The personal address country of the contact.
        personalPhoneAreaCode1:
          type: string
          example: '09'
          description: The primary personal phone number area code of the contact.
        personalPhone1:
          type: string
          example: '5006000'
          description: The primary personal phone number of the contact.
        personalPhoneAreaCode2:
          type: string
          example: '09'
          description: The secondary personal phone number area code of the contact.
        personalPhone2:
          type: string
          example: '5007000'
          description: The secondary personal phone number of the contact.
        personalFaxAreaCode1:
          type: string
          example: '09'
          description: The personal fax number area code of the contact.
        personalFax1:
          type: string
          example: '5008000'
          description: The personal fax number of the contact.
        otherPhoneAreaCode1:
          type: string
          example: '09'
          description: The other phone number area code of the contact.
        otherPhone1:
          type: string
          example: '5009000'
          description: The other phone number of the contact.
        otherMobile:
          type: string
          example: '61900900900'
          description: The other mobile number of the contact.
        otherFirstName:
          type: string
          example: Harold
          description: The other first name of the contact.
        otherLastName:
          type: string
          example: Wickman
          description: The other last name of the contact.
        otherTitle:
          type: string
          example: Mr
          description: The other title to address the contact with.
        status:
          type: string
          enum:
            - A
            - D
          description: 'The validity status of the contact, either `A`ctive or `D`isabled.'
        companyName:
          type: string
          description: The company name of the contact.
          example: Whispir
        jobTitle:
          type: string
          description: The job title of the contact.
          example: Software Engineer
        division:
          type: string
          description: The division in the company to which the contact is associated.
          example: Technology
        businessUnit:
          type: string
          description: The business unit in the company to which the contact is associated.
          example: Core Platform
        department:
          type: string
          description: The department in the company to which the contact is associated.
          example: Research & Development
        teamName1:
          type: string
          description: The primary team name of the contact.
          example: Optimus Prime
        teamName2:
          type: string
          description: The secondary team name of the contact.
          example: Bumblebee
        role1:
          type: string
          description: The primary role of the contact.
          example: Administrator
        role2:
          type: string
          description: The secondary role of the contact.
          example: Analyst
        locations:
          description: The locations for the contact.
          type: array
          items:
            type: object
            title: Location
            description: The location object.
            properties:
              latitude:
                type: number
                description: 'The measurement of distance north or south of the Equator, for the contact.'
                example: 41.9028
                minimum: -90
                maximum: 90
              longitude:
                type: number
                description: 'The measurement of distance east or west of the prime meridian, for the contact.'
                example: -12.4964
                minimum: -180
                maximum: 180
              type:
                description: A description for the location. At least one element of the `locations` array must have a `type` equal to `CurrentLocation`.
                type: string
                example: CurrentLocation
        messagingoptions:
          description: The message channel options for the contact.
          type: array
          items:
            type: object
            title: Messaging Option
            description: The object to configure message channel options.
            properties:
              channel:
                type: string
                description: The message channel.
                enum:
                  - sms
                  - email
                  - voice
              enabled:
                description: A boolean flag indicating whether messaging is enabled for the `channel`.
                type: boolean
                example: true
              primary:
                type: string
                description: The primary contact address for the `channel`.
                enum:
                  - WorkMobilePhone1
                  - WorkMobilePhone2
                  - WorkEmailAddress1
                  - WorkEmailAddress2
                  - PersonalMobilePhone1
                  - PersonalEmailAddress1
              secondary:
                type: string
                description: The secondary contact address for the `channel`.
                enum:
                  - WorkMobilePhone1
                  - WorkMobilePhone2
                  - WorkEmailAddress1
                  - WorkEmailAddress2
                  - PersonalMobilePhone1
                  - PersonalEmailAddress1
              tertiary:
                type: string
                description: The tertiary contact address for the `channel`.
                enum:
                  - WorkMobilePhone1
                  - WorkMobilePhone2
                  - WorkEmailAddress1
                  - WorkEmailAddress2
                  - PersonalMobilePhone1
                  - PersonalEmailAddress1
        type:
          type: string
          enum:
            - PROJECT
            - COMPANY
          description: |-
            - PROJECT - for Contacts stored in a User-defined workspace
            - COMPANY - for Contacts stored in the default workspace
          readOnly: true
        mri:
          type: string
          description: Specifies the Message Resource Identifier of the Contact in Whispir
          example: '61400400400'
          readOnly: true
        devices:
          type: array
          description: Specifies the devices associated to this contact. See Contact Devices for more details about it
          items:
            type: object
            title: Device
          readOnly: true
        link:
          $ref: '#/components/schemas/Links'
        lastModifiedTime:
          type: string
          example: '2022-03-29T16:30:18+11:00'
          description: Last Modified data and time
          readOnly: true
      required:
        - firstName
        - lastName
        - workMobilePhone1
        - workEmailAddress1
        - workCountry
        - timezone
    ContactCollection:
      type: object
      description: List contacts object
      properties:
        status:
          type: string
          example: 1 to 8 of 8
          description: Provides the total number of records fetched. This attribute may return "No records found" when there are no callbacks available.
          readOnly: true
        contacts:
          type: array
          description: list of contacts
          items:
            $ref: '#/components/schemas/Contact'
      x-examples:
        Example:
          value:
            status: 1 to 8 of 8
            contacts:
              - firstName: John
                lastName: Wick
                workMobilePhone1: '61400400400'
                workEmailAddress1: testUser@example.com
                workCountry: Australia
                timezone: Australia/Melbourne
                title: Dr
                workMobilePhone2: '61500500500'
                workEmailAddress2: newUser@example.com
                workPhoneAreaCode1: '09'
                workPhone1: '5006000'
                workPhoneAreaCode2: '09'
                workPhone2: '5007000'
                workFaxAreaCode1: '09'
                workFax1: '5008000'
                workSatellitePhone: '61600600600'
                workOtherPhone: '61700700700'
                workAddress1: Level 15
                workAddress2: 360 Collins St
                workSuburb: Melboure
                workState: Victoria
                workPostCode: '3000'
                workPostalAddress1: Level 15
                workPostalAddress2: 360 Collins St
                workPostalSuburb: Melboure
                workPostalState: Victoria
                workPostalPostCode: '3000'
                personalEmailAddress1: personalPrimaryUser@example.com
                personalEmailAddress2: personalSecondaryUser@example.com
                personalAddress1: Level 15
                personalAddress2: 360 Collins St
                personalSuburb: Melboure
                personalState: Victoria
                personalPostCode: '3000'
                personalCountry: Australia
                personalPhoneAreaCode1: '09'
                personalPhone1: '5006000'
                personalPhoneAreaCode2: '09'
                personalPhone2: '5007000'
                personalFaxAreaCode1: '09'
                personalFax1: '5008000'
                otherPhoneAreaCode1: '09'
                otherPhone1: '5009000'
                otherMobile: '61900900900'
                otherFirstName: Harold
                otherLastName: Wickman
                otherTitle: Mr
                status: A
                companyName: Whispir
                jobTitle: Software Engineer
                division: Technology
                businessUnit: Core Platform
                department: Research & Development
                teamName1: Optimus Prime
                teamName2: Bumblebee
                role1: Administrator
                role2: Analyst
                locations:
                  - latitude: 41.9028
                    longitude: -12.4964
                    type: CurrentLocation
                messagingoptions:
                  - channel: sms
                    enabled: true
                    primary: WorkMobilePhone1
                    secondary: WorkMobilePhone1
                    tertiary: WorkMobilePhone1
                type: PROJECT
                mri: '61400400400'
                devices: []
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/673A8E38D34BBF0C/contacts/47F08A08482A5AA40F5A99CE69FB0C16'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
      title: Contact Collection
      x-tags:
        - Contacts
    Key:
      type: object
      x-tags:
        - Keys
      title: Key
      x-examples:
        Example:
          id: 7f6a3d23-11f3-406c-9d72-8e8a80c248e4
          type: basic
          enabled: true
          description: Key used by Engineering for testing
          createdTime: '2023-01-25T02:25:33+0000'
          lastModifiedTime: '2022-03-29T16:30:18+11:00'
          secret: sk_yHyTZJJmHF5qe0RoAQQeT3BlbkFJp0Wfgs7HyBshPEF4Wjds
      description: The key object.
      x-stoplight:
        id: 00626f710da9c
      x-internal: true
      properties:
        id:
          type: string
          format: uuid
          description: The identifier for this key
          example: 7f6a3d23-11f3-406c-9d72-8e8a80c248e4
          readOnly: true
        type:
          type: string
          example: basic
          enum:
            - basic
          description: The authentication type that this Key is used for
          readOnly: true
        description:
          type: string
          description: User provided description usually used for identifying usage
          example: Key used by Engineering for testing
        createdTime:
          type: string
          format: date-time
          example: '2023-01-25T02:25:33+0000'
          description: Timestamp on when the Key has been created
          readOnly: true
        lastModifiedTime:
          type: string
          example: '2022-03-29T16:30:18+11:00'
          description: Last Modified data and time
          readOnly: true
        secret:
          type: string
          description: The authentication secret
          example: sk_yHyTZ***************************************Wjds
      required:
        - type
    KeyCollection:
      type: object
      description: List keys object
      properties:
        keys:
          type: array
          description: list of keys
          items:
            $ref: '#/components/schemas/Key'
      x-examples:
        Example:
          keys:
            - id: 7f6a3d23-11f3-406c-9d72-8e8a80c248e4
              type: basic
              description: Key used by Engineering for testing
              secret: sk_yHyTZ***************************************Wjds
              createdTime: '2023-01-25T02:25:33+0000'
              lastModifiedTime: '2022-03-29T16:30:18+11:00'
      title: Key Collection
      x-tags:
        - Keys
      x-internal: true
    DistributionList:
      type: object
      x-tags:
        - Distribution Lists
      title: Static Distribution List
      x-examples:
        Static:
          name: My Distribution List
          description: string
          access: Open
          visibility: Public
          contactIds: string
          userIds: string
          distListIds: string
          type: static
        Dynamic:
          name: My Distribution List
          description: My Distribution list
          access: Open
          entityType: Contact
          visibility: Public
          rules: '[{"ruleFilter" : "division", "ruleFilterActualName" : "Division", "ruleContent" : "sales"}]'
      description: 'Static Distribution Lists are manually managed and maintained. They can include Contacts, Users and other Distribution Lists'
      x-stoplight:
        id: 28a19b7a35a13
      properties:
        id:
          type: string
          description: |
            ID of the distribution list
          example: 5AFEB61102963D7
          readOnly: true
        name:
          type: string
          example: My Distribution List
          description: 'Specifies the name of the distribution list. This has to be unique, and should not contain any special characters (except spaces) in it'
        mri:
          type: string
          description: Specifies the Message Resource Identifier of the Distribution List in Whispir
          example: My_Distribution_List.company_name@list.company.whispir.sg
          readOnly: true
        description:
          type: string
          description: Specifies a description for other users to see what this distribution list should be used for.
          example: My Distribution list
        memberCount:
          type: string
          example: '4'
          description: Total number of contacts in a Distribution List
          readOnly: true
        access:
          type: string
          example: Open
          description: |-
            Allows you to specify the access type for this DL

            - Open: anyone can subscribe to this distribution list via the Whispir Contact Portal
            - ByApproval: anyone can subscribe using the Whispir Contact Portal. However, they are not officially on the list until their access is approved
            - Restricted: the distribution list is not visible in the Whispir Contact Portal
        visibility:
          type: string
          example: Public
          description: |-
            Allows you to specify the visibility for this DL

            - Public: Any user or active contact in any workspace can map themselves to this DL in the Whispir Contact Portal
            - Private: Only users or active contacts in the current workspace can map themselves to this DL
        contactIds:
          type: string
          description: Comma separated list of Contacts to be associated to this DL. This information can be provided at the time of the DL creation or updated later via a PUT request
          example: 3A21DCC420494A48
          writeOnly: true
        userIds:
          type: string
          description: Comma separated list of userIds who can manage this DL. This information can be provided at the time of the DL creation or also later updated via a PUT request
          example: 3A21DCC420494A48
          writeOnly: true
        distListIds:
          type: string
          description: Comma separated list of Distribution List IDs that can be nested under this DL. This information can be provided at the time of the DL creation or later updated via a PUT request
          example: '3A21DCC420494A48, 07172DC9AC3E97A75B5A41536C132CA0'
          writeOnly: true
        type:
          type: string
          description: |-
            Allows you to specify the type for this DL

            - Static: The contacts on the list don’t change unless you manually add or remove them (unlike a dynamic DL)

            NOTE: "static" is also the default value for this parameter when this field is omitted
          default: static
          enum:
            - static
            - dynamic
          writeOnly: true
        distlistdetails:
          type: array
          description: Details of Contacts included in the Distribution List
          items:
            type: object
            title: Distribution List Contacts
            properties:
              id:
                type: string
                example: 123ADAB420493B83
                description: Id of contact
                readOnly: true
              name:
                type: string
                example: John Smith
                description: Name of Contact
                readOnly: true
              type:
                type: string
                example: User
                description: Type of Contact
                readOnly: true
              link:
                $ref: '#/components/schemas/Links'
          readOnly: true
        rules:
          type: string
          description: |-
            Present when `type` is `dynamic`.

            The array that specify the rules that should be applied on the entityType values to pick the appropriate contacts at the moment of usage [not creation]

            Each rule is an object with 3 keys in it. At least one rule must be specified when creating a Dynamic Distribution List

            - ruleFilter: contains any of the contact profile elements that are available for searching. For example, division, department, role. More details on the values for this field can be found below [required]
            - ruleFilterActualName: Contains the matching string to be compared for the DL. More details on the the values for this field can be found below [required]
            - ruleContent: Contains the matching string to be compared with the contact element for being a part of the DL [required]
          example: '[{"ruleFilter" : "division", "ruleFilterActualName" : "Division", "ruleContent" : "sales"}]'
        link:
          $ref: '#/components/schemas/Links'
      required:
        - name
    DistributionListCollection:
      type: object
      description: list of distribution lists
      x-examples:
        Example Dynamic Distribution List:
          value:
            distributionLists:
              - id: 5AFEB61102963D7
                name: My Distribution List
                mri: My_Distribution_List.company_name@list.company.whispir.sg
                description: string
                memberCount: '4'
                access: Open
                visibility: Public
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
            status: 1 to 1 of 1
            link:
              - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                rel: self
                method: GET
                host: api.au.whispir.com
                port: -1
      title: Distribution List Collection
      x-tags:
        - Distribution Lists
      properties:
        distributionLists:
          type: array
          description: List of distribution lists
          items:
            type: object
            properties:
              id:
                type: string
                x-stoplight:
                  id: 1mrkncd75d4x3
                example: 5AFEB61102963D7
                description: ID of the distribution list
                readOnly: true
              name:
                type: string
                x-stoplight:
                  id: yvrl8fp71fdj0
                example: My Distribution List
                description: 'Specifies the name of the distribution list. This has to be unique, and should not contain any special characters (except spaces) in it'
                readOnly: true
              mri:
                type: string
                x-stoplight:
                  id: 7s47dejdxbii0
                example: My_Distribution_List.company_name@list.company.whispir.sg
                description: |
                  Specifies the Message Resource Identifier of the Distribution List in Whispir
                readOnly: true
              description:
                type: string
                x-stoplight:
                  id: a9cllyqm4shza
                example: My Distribution list
                description: |
                  Specifies a description for other users to see what this distribution list should be used for.
                readOnly: true
              memberCount:
                type: string
                x-stoplight:
                  id: knhin445g0kzi
                example: '4'
                description: |
                  Total number of contacts in a Distribution List
                readOnly: true
              access:
                type: string
                x-stoplight:
                  id: wlnkz1z26wz2z
                example: Open
                description: |-
                  Allows you to specify the access type for this DL

                  Open: anyone can subscribe to this distribution list via the Whispir Contact Portal
                  ByApproval: anyone can subscribe using the Whispir Contact Portal. However, they are not officially on the list until their access is approved
                  Restricted: the distribution list is not visible in the Whispir Contact Portal
              visibility:
                type: string
                x-stoplight:
                  id: v13xu4yw42f5v
                example: Public
                description: |-
                  Allows you to specify the visibility for this DL

                  Public: Any user or active contact in any workspace can map themselves to this DL in the Whispir Contact Portal
                  Private: Only users or active contacts in the current workspace can map themselves to this DL
              link:
                $ref: '#/components/schemas/Links'
            required:
              - name
        status:
          type: string
          example: 1 to 1 of 1
          description: Provides the total number of records fetched. This attribute may return "No records found" when there are no callbacks available.
          readOnly: true
        link:
          $ref: '#/components/schemas/Links'
    Scenario:
      type: object
      x-tags:
        - Scenarios
      title: Scenario
      description: 'Scenarios allows you to simplify the message delivery process through automated, one-click communications.'
      properties:
        name:
          type: string
          description: Specifies the name of the scenario
          example: Fire Evacuation Block A
        description:
          type: string
          description: Specifies the description of the scenario
          example: Fire evacuation notification for A block residents
        allowedUsers:
          type: string
          description: 'Specifies the usage permission - 1)EVERYONE 2)SELECTEDUSERS When SELECTEDUSERS is provided, then `allowedUserIds` shall contain the userID of the allowed users.'
          enum:
            - EVERYONE
            - SELECTEDUSERS
          example: SELECTEDUSERS
        allowedUserIds:
          type: string
          description: Specifies the comma separated list of users who can run this scenario.Only contains value when the allowedUsers is set to `SELECTEDUSERS`
          example: 4DC922649AFE370C
        message:
          $ref: '#/components/schemas/Message'
        to:
          type: string
          description: Specifies the phone number or MRI or distribution list to which the message has to be sent
          example: '61400400400'
        subject:
          type: string
          description: Specifies the subject of the message
          example: Fire Evacuation
        label:
          type: string
          description: Specifies the label for the message (to view during reporting)
          example: fire-evacuation
        email:
          $ref: '#/components/schemas/Email'
        voice:
          $ref: '#/components/schemas/Voice'
        web:
          $ref: '#/components/schemas/Web'
        social:
          $ref: '#/components/schemas/Social'
      required:
        - name
        - description
        - message
      x-examples:
        example-1:
          name: Fire Evacuation Block A
          description: Fire evacuation notification for A block residents
          allowedUsers: EVERYONE
          allowedUserIds: 4DC922649AFE370C
          message:
            to: '61400400400'
            subject: Test Message
            body: This is the body of my test SMS message
          to: '61400400400'
          subject: Fire Evacuation
          label: fire-evacuation
          email:
            body: This is the body of my email message.
            footer: This is the footer of my message.
            type: text/plain
          voice:
            header: 'This is the introduction, read out to the recipient prior to any key press.'
            body: 'This is the body of the voice call, read out after the key press'
            type: 'Pin:7171,ConfCall:1800123123,ConfAccountNo:098711234,ConfPinNo:8181,ConfModPinNo:4242'
            footer: ''
            other: ''
            resources:
              attachment:
                - attachmentName: TestIcon.png
                  derefUri: iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==
                  attachmentDesc: My photo
          web:
            body: This is the content of my web publishing or Rich Push Message
            type: text/plain
          social:
            social:
              - id: social
                body: Facebook Content
                type: text/plain
    ScenarioCollection:
      type: object
      description: List of retrieved scenarios
      properties:
        scenarios:
          type: array
          description: Scenario object
          items:
            $ref: '#/components/schemas/Scenario'
      x-examples:
        example-1:
          value:
            scenarios:
              - name: Fire Evacuation Block A
                description: Fire evacuation notification for A block residents
                allowedUsers: SELECTEDUSERS
                allowedUserIds: 4DC922649AFE370C
                message:
                  to: '61400400400'
                  subject: Test Message
                  body: This is the body of my test SMS message
                to: '61400400400'
                subject: Fire Evacuation
                label: fire-evacuation
                email:
                  body: This is the body of my email message.
                  footer: This is the footer of my message.
                  type: text/plain
                voice:
                  header: 'This is the introduction, read out to the recipient prior to any key press.'
                  body: 'This is the body of the voice call, read out after the key press'
                  type: 'Pin:7171,ConfCall:1800123123,ConfAccountNo:098711234,ConfPinNo:8181,ConfModPinNo:4242'
                  footer: ''
                  other: ''
                  resources:
                    attachment:
                      - attachmentName: TestIcon.png
                        derefUri: iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==
                        attachmentDesc: My photo
                web:
                  body: This is the content of my web publishing or Rich Push Message
                  type: text/plain
                social:
                  social:
                    - id: social
                      body: Facebook Content
                      type: text/plain
      x-tags:
        - Scenarios
      title: Scenario Collection
    Callback:
      type: object
      x-tags:
        - Callbacks
      title: Callback
      description: 'The callback object, used to configure the callback (also known as webhook).'
      x-examples:
        Callback object example:
          id: 4452AC8359535C46
          name: Callback Name
          url: 'https://example.com/callback'
          auth:
            type: basicauth
            key: test34
          contentType: json
          removeHTML: disabled
          retriesEnabled: false
          email: me@example.com
          callbacks:
            reply: disabled
            undeliverable: disabled
          link:
            - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
              rel: self
              method: GET
              host: api.au.whispir.com
              port: -1
      properties:
        id:
          type: string
          maxLength: 32
          description: |-
            The id of the callback. 

            This is the value that should be passed when referring to the callback using the API endpoints
          example: 4452AC8359535C46
          readOnly: true
        name:
          type: string
          description: |-
            The name of the callback. 

            This is the value that should be passed in the message payload for triggering the callbacks
          example: Callback Name
          maxLength: 50
        url:
          type: string
          description: Specifies the service URL that API Callbacks should be forwarded to.
          example: 'https://example.com/callback'
          format: uri
        auth:
          type: object
          title: Callback Auth
          description: |-
            The authentication model details. You will receive - 

            For `queryparam`
            - `?Auth={{KeyValue}}`

            For `httpheader`
            - `X-Whispir-Callback-Key: {{KeyValue}}`

            For `basicauth`
            - `Authorization: Basic {{KeyValue}}`

            For `bearertoken`
            - `Authorization: Bearer {{KeyValue}}`
          properties:
            type:
              type: string
              enum:
                - queryparam
                - httpheader
                - basicauth
                - bearertoken
              default: queryparam
              description: The type of authentication allowed by Whispir at the Destination URL
              example: basicauth
            key:
              type: string
              description: The value that will be passed with the authentication key
              maxLength: 128
              example: test34
          required:
            - type
            - key
        contentType:
          type: string
          description: Specifies the content type that should be sent to this endpoint.
          enum:
            - json
            - xml
        removeHTML:
          type: string
          description: Specifies whether HTML should be stripped from responses.
          enum:
            - enabled
            - disabled
          default: disabled
        retriesEnabled:
          type: boolean
          description: Specifies whether Whispir should perform retries in the event there is a failure accessing the callback service.
          example: true
          default: false
        email:
          type: string
          description: |-
            Whispir notify this email address that a callback has failed (only when retries are disabled). 

            The email will contain the details of the callback content.
          example: me@example.com
          maxLength: 64
          format: email
        callbacks:
          type: object
          title: Callback Options
          description: The object to specify which events callbacks should be enabled for.
          required:
            - reply
            - undeliverable
          properties:
            reply:
              type: string
              enum:
                - enabled
                - disabled
              description: A boolean flag specifying whether message reply callbacks are enabled.
              default: disabled
            undeliverable:
              type: string
              enum:
                - enabled
                - disabled
              description: A boolean flag specifying whether undeliverable message callbacks are enabled.
              default: disabled
        link:
          $ref: '#/components/schemas/Links'
      required:
        - name
        - url
        - auth
        - contentType
        - removeHTML
        - retriesEnabled
        - email
        - callbacks
    CallbackCollection:
      description: List of callbacks
      type: object
      x-examples:
        example-1:
          value:
            status: 1 to 1 of 1
            callbacks:
              - id: D7D2295E2A08388C
                name: callback1
                url: 'https://e05237bf.ngrol.io/'
                retriesEnabled: false
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
            link:
              - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                rel: self
                method: GET
                host: api.au.whispir.com
                port: -1
      x-tags:
        - Callbacks
      title: Callback Collection
      properties:
        status:
          description: Provides the total number of records fetched. This attribute may return "No records found" when there are no callbacks available.
          type: string
          minLength: 1
          example: 1 to 1 of 1
          readOnly: true
        callbacks:
          description: A list of callbacks
          type: array
          uniqueItems: true
          minItems: 1
          items:
            $ref: '#/components/schemas/Callback'
          readOnly: true
        link:
          $ref: '#/components/schemas/Links'
    CallbackCall:
      description: A callback call object
      type: object
      x-examples:
        Example:
          id: 6AB8FF0111C32F1271E1165F3344AD73
          messageId: 2E585D7FA580335D5C1809F6DD2DFF0B
          status: SUCCESS
          messageLocation: 'https://api.au.whispir.com/messages/F4651CB151ACF0504FF09CB4D57922A5'
          from:
            name: Cynthia Pushie
            mobile: '61430430306'
            email: cren@whispir.com
            voice: '61430430306'
          responseMessage:
            channel: SMS
            acknowledged: '22/10/20 10:28'
            content: 'Delivered successfully to 61430430306 at 22/10/20 09:28'
          callback:
            id: 93528522590CDF9A
            name: PVTcallback
            url: 'https://0cfae5ba271e4b1e3f6f6e3767c50b21.m.pipedream.net'
            attemptedDate: '2022-03-21T09:26:11.327Z'
            statusCode: '200'
            statusMessage: OK
          link:
            - uri: 'https://api.au.whispir.com/callbacks/93528522590CDF9A/calls/6AB8FF0111C32F1271E1165F3344AD73'
              rel: updateCallbackHistory
              method: PUT
              type: 'application/vnd.whispir.api-call-v1+xml,application/vnd.whispir.api-call-v1+json'
              host: api.au.whispir.com
              port: -1
            - uri: 'https://api.au.whispir.com/callbacks/93528522590CDF9A/calls/6AB8FF0111C32F1271E1165F3344AD73'
              rel: self
              method: GET
              host: api.au.whispir.com
              port: -1
      title: Callback Call
      x-tags:
        - Callbacks
      properties:
        id:
          type: string
          description: The unique ID of the specific call within Whispir
          maxLength: 32
          example: C96962B74DC57EF30F00E7097AC81A45
          readOnly: true
        messageId:
          type: string
          minLength: 1
          description: The unique ID of the message within Whispir
          maxLength: 32
          example: 8D12688BFCC21BD51174C833F9BC9B9D
          readOnly: true
        status:
          type: string
          minLength: 1
          description: The status of this particular callback attempt.
          enum:
            - SUCCESS
            - FAILED
        messageLocation:
          example: 'https://api.au.whispir.com/messages/F4651CB151ACF0504FF09CB4D57922A5'
          type: string
          minLength: 1
          description: The fully qualified URL to the original message within Whispir
          maxLength: 256
          readOnly: true
        from:
          $ref: '#/components/schemas/Responder'
        responseMessage:
          $ref: '#/components/schemas/Response'
        callback:
          type: object
          title: Callback Invocation
          description: The details about this particular callback attempt
          properties:
            id:
              example: 93528522590CDF9A
              type: string
              minLength: 1
              description: The ID of the callback attempting to be invoked
              readOnly: true
            name:
              example: test callback
              type: string
              minLength: 1
              description: The name of the callback server attempting to be invoked
              readOnly: true
            url:
              example: 'https://google.com'
              type: string
              minLength: 1
              description: The URL of the callback server attempting to be invoked
              readOnly: true
            attemptedDate:
              example: '22/10/20 09:28'
              type: string
              minLength: 1
              description: The date/time that the callback server was attempted to be invoked
              readOnly: true
            statusCode:
              example: 200
              type: integer
              description: The statuscode that was returned from the callback service
              readOnly: true
            statusMessage:
              example: OK
              type: string
              minLength: 1
              description: The status message that was returned from the callback service
              readOnly: true
          readOnly: true
        link:
          $ref: '#/components/schemas/Links'
      required:
        - status
    CallbackCallCollection:
      type: object
      description: List of callback calls
      properties:
        calls:
          type: array
          description: A list of callbacks
          items:
            $ref: '#/components/schemas/CallbackCall'
        status:
          type: string
          example: 1 to 8 of 8
          description: Provides the total number of records fetched. This attribute may return "No records found" when there are no callbacks available.
        link:
          $ref: '#/components/schemas/Links'
      x-examples:
        Example:
          value:
            calls:
              - id: C96962B74DC57EF30F00E7097AC81A45
                messageId: 8D12688BFCC21BD51174C833F9BC9B9D
                status: SUCCESS
                messageLocation: string
                from:
                  name: John Wick
                  mri: support@whispir.com
                  mobile: '6140099499'
                  voice: string
                  email: string
                responseMessage:
                  channel: sms
                  acknowledged: string
                  undeliverable: string
                  content: string
                callback:
                  id: string
                  name: string
                  url: string
                  attemptedDate: string
                  statusCode: 200
                  statusMessage: string
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
            status: 1 to 8 of 8
            link:
              - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                rel: self
                method: GET
                host: api.au.whispir.com
                port: -1
      title: Callback Call Collection
      x-tags:
        - Callbacks
    Workspace:
      type: object
      x-tags:
        - Workspaces
      title: Workspace
      description: |-
        Workspaces allow application developers to create new work areas for the varying use cases of their application. For example they can be associated to the different business units of a company, so to silo the data of the different departments. In fact, the information, assets, contacts and actions performed in a workspace can’t be accessed from another one. This allows the applications to be independent and audited effectively with proper permissions and keys.

        Each of these work areas provides different functionalities - such as creating messages, executing scenarios or viewing distribution lists - and can be governed by user permissions. Users can be assigned access to these workspaces to restrict the control of information as needed.

        Every account on creation is given a default workspace called "My Company" but it is possible to create multiple workspaces suited for each application need. There is no limit on the number of workspaces.
      x-examples:
        example-1:
          id: 70F2492146292826
          projectName: A Space Odessey
          projectNumber: '2001'
          status: A
          billingcostcentre: Hollywood
          link:
            - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
              rel: self
              method: GET
              host: api.au.whispir.com
              port: -1
      properties:
        id:
          type: string
          example: 70F2492146292826
          description: Specifies the ID for the workspace that has been created
          readOnly: true
        projectName:
          type: string
          description: Specifies the name of the Workspace to be created.
          example: A Space Odessey
        projectNumber:
          type: string
          description: 'Specifies the reference ID for the workspace from the User Side. Generally not used. Note:This is not the actual workspace ID. It is just a custom reference ID given by you for your own purposes.'
          example: '2001'
        status:
          type: string
          description: Specifies the status of the Workspace being created. The status can be one of - 1) Active (A) 2)Disabled (D)
          example: A
        billingcostcentre:
          type: string
          description: Only applicable to customers with the Billing Cost Centre Module enabled. Allows the user to set a billing cost centre for the Workspace.
          example: Hollywood
        link:
          $ref: '#/components/schemas/Links'
      required:
        - projectName
        - status
    WorkspaceCollection:
      type: object
      description: List of workspaces
      properties:
        workspaces:
          type: array
          description: List of workspaces
          items:
            $ref: '#/components/schemas/Workspace'
          readOnly: true
        status:
          type: string
          description: Provides the total number of records fetched. This attribute may return "No records found" when there are no callbacks available.
          example: 'status: 1 to 1 of 1'
          readOnly: true
      x-examples:
        example-1:
          value:
            workspaces:
              - id: 70F2492146292826
                projectName: A Space Odessey
                projectNumber: '2001'
                status: A
                billingcostcentre: Hollywood
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
            status: 'status: 1 to 1 of 1'
      title: Workspace Collection
      x-tags:
        - Workspaces
    Activity:
      description: 'Activities are all the individual changes, tasks, calls, messages and so on performed in a given company workspace.'
      type: object
      x-examples:
        example-1:
          user: user
          time: '03/08/22 23:04'
          action: Logout
          description: Logged out
          status: Successful
          module: System
          workspaceName: Company
          fullname: Whispir Admin
          link:
            - uri: 'https://api.au.whispir.com/activities/0A398CFDB9DAB7FC'
              rel: self
              method: GET
              host: api.au.whispir.com
              port: -1
            - uri: 'https://api.au.whispir.com/activities/0A398CFDB9DAB7FC'
              rel: addActivityDetail
              method: POST
              type: 'application/vnd.whispir.activity-v1+json,application/vnd.whispir.activity-v1+xml'
              host: api.au.whispir.com
              port: -1
      x-tags:
        - Activities
      title: Activity
      properties:
        user:
          type: string
          description: ' The username of the person who performed this activity. This will usually be the API user invoking the creation.'
          example: whispir user
        time:
          type: string
          description: 'The date and time of the activity in the format:dd/mm/yy hh:mm. This will be defaulted to the time at which this activity is created.'
          example: '03/08/22 15:17'
        action:
          type: string
          description: Specifies the action performed during this activity.
          enum:
            - Create
            - Update
            - Move
            - Copy
            - Draft
            - Send
            - Modified
            - Delete
            - Contact Import File
            - Login
            - Approve
            - Reject
            - Dispatch
            - Register
            - Accept
            - Closed
            - Map
            - Un-map
            - Logout
        description:
          type: string
          description: The description of the activity. This is a free text that details about the activity.
          example: Logged out
        status:
          type: string
          description: Specifies the status of the activity.
          example: Successful
        module:
          type: string
          description: Specifies the module to which this activity belongs to.
          enum:
            - System
            - Message
            - Scheduled Message
            - User
            - Contact
            - Distribution List
            - Template
            - Workspace
            - Event
            - WebService
            - Settings
            - Conversation
            - Gateway
            - Workspace Mapping
            - Folders
            - Team
            - RSS
            - API Mapping
            - Asset
            - Instruction
          example: Conversation
        workspaceName:
          type: string
          description: The workspace in which this activity is performed. This will usually be the API user’s default workspace
          example: Company
        fullname:
          type: string
          example: Whispir User
          description: Fullname of the user
        link:
          $ref: '#/components/schemas/Links'
    ActivityCollection:
      description: List activities response object
      type: object
      x-examples:
        example-1:
          activities:
            - user: cadmin
              time: '04/08/22 11:19'
              action: Logout
              description: Logged out
              status: Successful
              module: System
              workspaceName: Company
              fullname: IUX Admin
              link:
                - uri: 'https://api.au.whispir.com/activities/726E75D22E359A8C'
                  rel: self
                  method: GET
                  host: api.au.whispir.com
                  port: -1
                - uri: 'https://api.au.whispir.com/activities/726E75D22E359A8C'
                  rel: addActivityDetail
                  method: POST
                  type: 'application/vnd.whispir.activity-v1+json,application/vnd.whispir.activity-v1+xml'
                  host: api.au.whispir.com
                  port: -1
          link: []
      properties:
        activities:
          description: List of activities
          type: array
          items:
            $ref: '#/components/schemas/Activity'
          readOnly: true
        link:
          $ref: '#/components/schemas/Links'
      title: Activity Collection
      x-tags:
        - Activities
    User:
      type: object
      x-tags:
        - Users
      title: User
      x-examples:
        Example:
          id: 4DC922649AFE370C
          userName: john.w
          firstName: John
          middleName: ''
          lastName: Wick
          title: ''
          nickname: Babayaga
          status: PENDING
          workMobilePhone1: '61400400400'
          workEmailAddress1: testUser@example.com
          workCountry: Australia
          timezone: Australia/Melbourne
          workMobilePhone2: '61500500500'
          workEmailAddress2: newUser@example.com
          workPhoneAreaCode1: '09'
          workPhone1: '5006000'
          workPhoneAreaCode2: '09'
          workPhone2: '5007000'
          workFaxAreaCode1: '09'
          workFax1: '5008000'
          workSatellitePhone: '61600600600'
          workOtherPhone: '61700700700'
          workAddress1: Level 15
          workAddress2: 360 Collins St
          workSuburb: Melboure
          workState: Victoria
          workPostCode: '3000'
          workPostalAddress1: Level 15
          workPostalAddress2: 360 Collins St
          workPostalSuburb: Melboure
          workPostalState: Victoria
          workPostalPostCode: '3000'
          personalEmailAddress1: personalPrimaryUser@example.com
          personalEmailAddress2: personalSecondaryUser@example.com
          personalAddress1: Level 15
          personalAddress2: 360 Collins St
          personalSuburb: Melboure
          personalState: Victoria
          personalPostCode: '3000'
          personalCountry: Australia
          personalPhoneAreaCode1: '09'
          personalPhone1: '5006000'
          personalPhoneAreaCode2: '09'
          personalPhone2: '5007000'
          personalFaxAreaCode1: '09'
          personalFax1: '5008000'
          otherPhoneAreaCode1: '09'
          otherPhone1: '5009000'
          otherMobile: '61900900900'
          otherFirstName: Harold
          otherLastName: Wickman
          otherTitle: Mr
          companyName: Whispir
          jobTitle: Software Engineer
          division: Technology
          businessUnit: Core Platform
          department: Research & Development
          teamName1: Optimus Prime
          teamName2: Bumblebee
          role1: Administrator
          role2: Analyst
          link:
            - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
              rel: self
              method: GET
              host: api.au.whispir.com
              port: -1
      description: The user object.
      properties:
        id:
          type: string
          description: The ID of the user.
          example: 4DC922649AFE370C
          readOnly: true
        userName:
          type: string
          description: Specifies the username for the account
          example: John.Wick
          writeOnly: true
        password:
          type: string
          description: 'Specifies the password for the account <p><b>Note:</b>The following are the rules for the password:</p><p><ul><li>Alpha Numeric [a-zA-Z0-9_]</li><li>Must have at least one uppercase and one lowercase character</li></ul></p>'
          example: string
          writeOnly: true
        firstName:
          type: string
          description: The first name of the user.
          example: John
        middleName:
          type: string
          description: The middle name of the user.
          example: Bjork
        lastName:
          type: string
          description: The last name of the user.
          example: Wick
        title:
          type: string
          description: The title to address the user with.
          example: Dr
        nickname:
          type: string
          description: Preferred name to be shown in the platfom interface
          example: Babayaga
        status:
          type: string
          description: Specifies the validity status of the user. The default status is PENDING. One cannot set the status while creation of account. Read `User State Machine` again mentioned above.</p>
          default: PENDING
          example: PENDING
          enum:
            - ACTIVE
            - A
            - INACTIVE
            - I
            - PENDING
            - P
            - SUSPENDED
            - B
            - DELETED
            - D
        workMobilePhone1:
          type: string
          example: '61400400400'
          description: The primary work mobile number of the user.
        workEmailAddress1:
          type: string
          example: testUser@example.com
          description: The primary work email address of the user.
        workCountry:
          type: string
          example: Australia
          description: The work country of the user.
        timezone:
          type: string
          example: Australia/Melbourne
          description: |-
            The time zone in which the user lives in. Values are relative to GMT.

            Supported values are:

            * Offset from GMT in the format `+/-NN`. For example, `+10`.
            * Worldwide time zone in the format `Country/City`. For example, `Australia/Melbourne`

            See the list of [worldwide time zones](https://en.wikipedia.org/wiki/List_of_time_zones_by_country).
        workMobilePhone2:
          type: string
          example: '61500500500'
          description: The secondary work mobile number of the user.
        workEmailAddress2:
          type: string
          example: newUser@example.com
          description: The secondary work email address of the user.
        workPhoneAreaCode1:
          type: string
          example: '09'
          description: The primary work phone number area code of the user.
        workPhone1:
          type: string
          example: '5006000'
          description: The primary work phone number of the user.
        workPhoneAreaCode2:
          type: string
          example: '09'
          description: The secondary work phone number area code of the user.
        workPhone2:
          type: string
          example: '5007000'
          description: The secondary work phone number of the user.
        workFaxAreaCode1:
          type: string
          example: '09'
          description: The work fax number area code of the user.
        workFax1:
          type: string
          example: '5008000'
          description: The work fax number of the user.
        workSatellitePhone:
          type: string
          example: '61600600600'
          description: The work satellite phone number of the user.
        workOtherPhone:
          type: string
          example: '61700700700'
          description: The work other phone number of the user.
        workAddress1:
          type: string
          example: Level 15
          description: The first work address line of the user.
        workAddress2:
          type: string
          example: 360 Collins St
          description: The second work address line of the user.
        workSuburb:
          type: string
          example: Melboure
          description: The work address suburb of the user.
        workState:
          type: string
          example: Victoria
          description: The work address state of the user.
        workPostCode:
          type: string
          example: '3000'
          description: The work address post code of the user.
        workPostalAddress1:
          type: string
          example: Level 15
          description: The first work postal address line of the user.
        workPostalAddress2:
          type: string
          example: 360 Collins St
          description: The second work postal address line of the user.
        workPostalSuburb:
          type: string
          example: Melboure
          description: The work postal address suburb of the user.
        workPostalState:
          type: string
          example: Victoria
          description: The work postal address state of the user.
        workPostalPostCode:
          type: string
          example: '3000'
          description: The work postal address post code of the user.
        personalEmailAddress1:
          type: string
          example: personalPrimaryUser@example.com
          description: The primary personal email address of the user.
        personalEmailAddress2:
          type: string
          example: personalSecondaryUser@example.com
          description: The secondary personal email address of the user.
        personalAddress1:
          type: string
          example: Level 15
          description: The first personal address line of the user.
        personalAddress2:
          type: string
          example: 360 Collins St
          description: The second personal address line of the user.
        personalSuburb:
          type: string
          example: Melboure
          description: The personal address suburb of the user.
        personalState:
          type: string
          example: Victoria
          description: The personal address state of the user.
        personalPostCode:
          type: string
          example: '3000'
          description: The personal address post code of the user.
        personalCountry:
          type: string
          example: Australia
          description: The personal address country of the user.
        personalPhoneAreaCode1:
          type: string
          example: '09'
          description: The primary personal phone number area code of the user.
        personalPhone1:
          type: string
          example: '5006000'
          description: The primary personal phone number of the user.
        personalPhoneAreaCode2:
          type: string
          example: '09'
          description: The secondary personal phone number area code of the user.
        personalPhone2:
          type: string
          example: '5007000'
          description: The secondary personal phone number of the user.
        personalFaxAreaCode1:
          type: string
          example: '09'
          description: The personal fax number area code of the user.
        personalFax1:
          type: string
          example: '5008000'
          description: The personal fax number of the user.
        otherPhoneAreaCode1:
          type: string
          example: '09'
          description: The other phone number area code of the user.
        otherPhone1:
          type: string
          example: '5009000'
          description: The other phone number of the user.
        otherMobile:
          type: string
          example: '61900900900'
          description: The other mobile number of the user.
        otherFirstName:
          type: string
          example: Harold
          description: The other first name of the user.
        otherLastName:
          type: string
          example: Wickman
          description: The other last name of the user.
        otherTitle:
          type: string
          example: Mr
          description: The other title to address the user with.
        companyName:
          type: string
          description: The company name of the user.
          example: Whispir
        jobTitle:
          type: string
          description: The job title of the user.
          example: Software Engineer
        division:
          type: string
          description: The division in the company to which the user is associated.
          example: Technology
        businessUnit:
          type: string
          description: The business unit in the company to which the user is associated.
          example: Core Platform
        department:
          type: string
          description: The department in the company to which the user is associated.
          example: Research & Development
        teamName1:
          type: string
          description: The primary team name of the user.
          example: Optimus Prime
        teamName2:
          type: string
          description: The secondary team name of the user.
          example: Bumblebee
        role1:
          type: string
          description: The primary role of the user.
          example: Administrator
        role2:
          type: string
          description: The secondary role of the user.
          example: Analyst
        link:
          $ref: '#/components/schemas/Links'
      required:
        - userName
        - password
        - firstName
        - lastName
        - workCountry
        - timezone
    UserCollection:
      type: object
      description: List users object
      x-examples:
        Example:
          value:
            users:
              - id: 4DC922649AFE370C
                firstName: John
                lastName: Wick
                companyName: Whispir
                workEmailAddress1: testUser@example.com
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
            status: 1 to 8 of 8
            link:
              - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                rel: self
                method: GET
                host: api.au.whispir.com
                port: -1
      title: User Collection
      x-tags:
        - Users
      properties:
        users:
          type: array
          description: List of retrieved users
          items:
            $ref: '#/components/schemas/User'
          readOnly: true
        status:
          type: string
          example: 1 to 20 of 73
          description: Provides the total number of records fetched. This attribute may return "No records found" when there are no users available.
          readOnly: true
        link:
          $ref: '#/components/schemas/Links'
    Event:
      type: object
      x-tags:
        - Events
      title: Event
      description: The event object.
      x-examples:
        Event object example:
          id: 421FEEBA93GF53A2
          eventLabel: 2701095 - Outage of Local Systems in Sydney
          status: Active
          eventFormList:
            - formName: MetroEvent
              eventFieldList:
                - name: summary
                  value: Outage of systems in Sydney
                - name: location
                  value: '0.0,0.0'
                - name: description
                  value: 'ATMs are non responsive, teams to be sent to investigate.'
                - name: status
                  value: Open
                - name: category
                  value: Internal
                - name: startDate
                  value: '11/09/2019 00:00:00'
                - name: actionOwner1
                  value: John Wick
                - name: actionDetails1
                  value: investigation to take place asap.
                - name: actionDate1
                  value: '11/09/2019 00:00:00'
                - name: severity
                  value: Severity 3 - Minor Outage (Some Service Degradation)
          link:
            - uri: 'https://api.au.whispir.com/workspaces/26C20B1A09XS3RA2/events/421FEEBA93GF53A2'
              host: 'https://api.au.whispir.com'
              port: -1
              rel: self
              method: GET
            - uri: 'https://api.au.whispir.com/workspaces/26C20B1A09XS3RA2/events/421FEEBA93GF53A2'
              host: 'https://api.au.whispir.com'
              port: -1
              rel: self
              method: PUT
              type: 'application/vnd.whispir.event-v1+xml,application/vnd.whispir.event-v1+json'
            - uri: 'https://api.au.whispir.com/workspaces/26C20B1A09XS3RA2/messages?label=2701095%20-%20Outage%20of%20Local%20Systems%20in%20Sydney'
              host: 'https://api.au.whispir.com'
              port: -1
              rel: retrieveEventMessages
              method: GET
      properties:
        id:
          type: string
          description: Id of the event
          example: 888E0A343770A7D1
          readOnly: true
        eventLabel:
          type: string
          description: Specifies the name of the label used for the messages sent under this event. This needs to match with the name of the event templates available
          example: 2701095 - Outage of Local Systems in Sydney
        status:
          type: string
          description: 'Specifies the status of the event. The status can be one of <ul><li>Active</li><li>Resolved<l></ul>Note:The default status is Open.'
          example: Open
          enum:
            - Open
            - Active
            - Resolved
          default: Open
        eventFormList:
          type: array
          description: Event form list
          items:
            type: object
            title: Form
            description: Constitutes the name of the form and its fields
            properties:
              formName:
                type: string
                example: Metro Event
                description: Specifies the name of the event form
              eventFieldList:
                type: array
                description: 'Contains a list of event fields, see create /POST event endpoint to learn more about the available fields'
                items:
                  type: object
                  title: Form Field
                  description: A key-value pair of name and its value
                  properties:
                    name:
                      type: string
                      description: Specifies the name of the event field
                      example: actionOwner1
                    value:
                      type: string
                      description: Specifies the value of a given field
                      example: John Wick
        link:
          $ref: '#/components/schemas/Links'
      required:
        - eventLabel
        - status
    EventCollection:
      type: object
      description: List of events
      properties:
        status:
          type: string
          description: Provides the total number of records fetched. This attribute may return "No records found" when there are no events available.
          example: 1 to 2 of 2
          readOnly: true
        events:
          type: array
          description: List of events
          items:
            $ref: '#/components/schemas/Event'
          readOnly: true
      x-examples:
        Events response example:
          value:
            events:
              - id: string
                eventLabel: 2701095 - Outage of Local Systems in Sydney
                status: Open
                eventFormList:
                  - formName: Metro Event
                    eventFieldList:
                      - name: string
                        value: string
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
            status: 1 to 2 of 2
      title: Event Collection
      x-tags:
        - Events
    Import:
      type: object
      x-tags:
        - Imports
      title: Import
      description: Import model object
      x-examples:
        Import resource example:
          resourceId: 4FBBC384BCE3DAABFE3
          importType: contact
          fieldMapping:
            importOptions:
              firstName: firstName
              lastName: lastName
              workMobilePhone1: workMobilePhone1
              workCountry: workCountry
              timezone: timeZone
          importMode: replace
      properties:
        resourceId:
          type: string
          description: 'The resource identifier returned from the POST to /resources. Resource referred to must be a valid CSV, XML, or JSON file.'
          example: 4FBBC384BCE3DAABFE3
        importType:
          type: string
          description: |-
            This defines the resource that will be created through this import process. 

            *'contact'* is the only supported *importType* at this stage.
          example: contact
        importOptions:
          type: object
          title: Field Mapping
          description: Mapping the data column in your resource file to the contact field value
          x-examples:
            example-1:
              firstName: firstName
              lastName: lastName
              workMobilePhone1: workMobilePhone1
              workCountry: workCountry
              timezone: timeZone
          required:
            - fieldMapping
          properties:
            fieldMapping:
              type: object
              x-stoplight:
                id: oflbbce2sozso
              required:
                - firstName
                - lastName
                - workMobilePhone1
                - workCountry
                - timezone
              description: Mapping the data column in your resource file to the contact field value
              properties:
                firstName:
                  example: firstName
                  type: string
                  x-stoplight:
                    id: 0gf6ef9xf3rhq
                  description: First Name of the Contact. Value of this field is used to map the field within the resource.
                lastName:
                  example: lastName
                  type: string
                  x-stoplight:
                    id: ay5ngshk4949s
                  description: Last Name of the Contact. Value of this field is used to map the field within the resource.
                workMobilePhone1:
                  example: workMobilePhone1
                  type: string
                  x-stoplight:
                    id: zrtjbsjjxn0tx
                  description: The mobile phone number of the Contact. Value of this field is used to map the field within the newly created resource.
                workCountry:
                  example: workCountry
                  type: string
                  x-stoplight:
                    id: s7mg3oen866oa
                  description: The country field of the contact. The value of this field is used to map to the field within the newly created contact.
                timezone:
                  example: timezone
                  type: string
                  x-stoplight:
                    id: dnpxzcqcd5pqd
                  description: The timezone field of the contact. The value of this field is used to map to the timezone field within the newly created contact.
        importMode:
          type: string
          description: The type of contact import that is occurring.
          example: replace
          enum:
            - replace
            - duplicate
            - ignore
      required:
        - resourceId
        - importType
        - importOptions
        - importMode
    CustomList:
      type: object
      x-examples:
        Custom List example:
          id: 4B4625BAEB7E4D58
          name: Day of Week
          type: INCIDENT
          createdDate: '09/06/15 10:18'
          sortType: As Displayed
          linked: disabled
          customlabellists:
            - name: Internal Systems
              value: Internal Systems
            - name: External Systems
              value: External Systems
            - name: Infrastructure
              value: Infrastructure
          link:
            - uri: 'https://api.au.whispir.com/customlists/4B4625BAEB7E4D58'
              rel: self
              method: GET
              host: api.au.whispir.com
              port: -1
      description: 'A custom list is a predefined list of options that can be inserted into a message or template. A list might be made up of capital city names, days of the week, incident types, business phone numbers and so on. Custom lists make it easy to add information quickly and consistently to your message content.'
      x-tags:
        - Custom Lists
      title: Custom List
      properties:
        id:
          type: string
          example: 4B4625BAEB7E4D58
          description: Specifies the unique ID of the list
          readOnly: true
        name:
          type: string
          example: Day of Week
          description: Specifies the name of the list
          readOnly: true
        type:
          type: string
          enum:
            - INCIDENT
            - MESSAGE
            - CONTACT
            - RSS
          example: MESSAGE
          description: Specifies the type
          readOnly: true
        createdDate:
          type: string
          example: '09/06/15 10:18'
          description: Specifies the creation date of the list
          readOnly: true
        sortType:
          type: string
          example: As Displayed
          enum:
            - As Displayed
            - Ascending
            - Descending
          description: Specifies the sorting order
          readOnly: true
        linked:
          type: string
          enum:
            - disabled
            - enabled
          example: enabled
          description: Specifies the linked status. When enabled the value selected for one channel is automatically applied on the other channels.
          readOnly: true
        customlabellists:
          type: array
          description: Contains the individual items that make up this list
          items:
            type: object
            title: List Label
            description: |-
              Contains the individual items that make up this list

              The ‘name’ is the text that is shown to the user
              The ‘value’ is the internally passed in value
            properties:
              name:
                type: string
                description: Specifies the text that is show to the user
                example: Internal Systems
                readOnly: true
              value:
                type: string
                description: Specifies the value that is passed internally
                example: Internal Systems
                readOnly: true
            readOnly: true
          readOnly: true
        link:
          $ref: '#/components/schemas/Links'
      readOnly: true
    CustomListCollection:
      type: object
      description: List of custom lists
      properties:
        status:
          type: string
          description: Provides the total number of records fetched. This attribute may return "No records found" when there are no callbacks available.
          example: 1 to 1 of 1
          readOnly: true
        customlabels:
          type: array
          description: A list of custom lists
          items:
            $ref: '#/components/schemas/CustomList'
          readOnly: true
      x-examples:
        custom lists response example:
          value:
            status: string
            customlabels:
              - id: 4B4625BAEB7E4D58
                name: Day of Week
                type: MESSAGE
                createdDate: '09/06/15 10:18'
                sortType: As Displayed
                linked: enabled
                link:
                  - uri: 'https://api.au.whispir.com/customlists/4B4625BAEB7E4D58'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
      title: Custom List Collection
      x-tags:
        - Custom Lists
    Auth:
      description: The create auth object.
      type: object
      properties:
        token:
          type: string
          description: The JWT token.
          example: your-generated-token-string
        link:
          $ref: '#/components/schemas/Links'
      x-examples:
        Example:
          value:
            token: your-generated-token-string
            link: []
      x-tags:
        - Auth
      title: Auth
    Links:
      type: array
      description: 'A [HATEOAS](https://en.wikipedia.org/wiki/HATEOAS) link array, describing all discoverable resources in relation to the original request.'
      x-examples:
        Example:
          - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses?view=detailed&filter=responserule'
            rel: detailedResponsesWithResponseRule
            method: GET
            host: api.au.whispir.com
            port: -1
      title: Links
      items:
        type: object
        title: Link
        description: The HATEOAS link object.
        properties:
          uri:
            description: The Universal Resource Identifier for the related resource.
            type: string
            example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
            format: uri
            readOnly: true
          rel:
            description: The description of the related resource.
            type: string
            example: self
            readOnly: true
          method:
            description: 'The [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) method required to request the related resource.'
            type: string
            example: GET
            readOnly: true
          host:
            description: The host of the related resource.
            type: string
            example: api.au.whispir.com
            readOnly: true
          port:
            description: The port of the related resource.
            type: number
            enum:
              - -1
            readOnly: true
      readOnly: true
    ApiError:
      description: The generic error object
      type: object
      x-examples:
        Example:
          errorSummary: Your request was malformed and could not be processed by the server. Please try again
          errorText: Bad Request
          errorDetail: 'java.io.EOFException: No content to map to Object due to end of input'
      properties:
        errorSummary:
          type: string
          description: The summary of the error encountered.
          example: Your request was malformed and could not be processed by the server. Please try again
          readOnly: true
        errorText:
          type: string
          description: The detailed description of the error encountered.
          minLength: 1
          example: Bad Request
          readOnly: true
        errorDetail:
          type: string
          description: The additional details describing the error.
          example: 'java.io.EOFException: No content to map to Object due to end of input'
          readOnly: true
      required:
        - errorSummary
        - errorText
        - errorDetail
      title: API Error
    ApiErrorNextGen:
      description: The generic error object returned by new downstream services
      x-stoplight:
        id: kqs62o435yv1y
      type: object
      x-examples:
        Example:
          status: 400
          message: 'Client specified an invalid argument, request body or query param'
          detail: 'Error in parameter "codeLength", number must be lesser than or equal to 15.'
      title: API Error - NextGen
      properties:
        status:
          type: number
          example: 400
          x-stoplight:
            id: m4av9l0ffa1zv
          description: The status code
          readOnly: true
        message:
          type: string
          minLength: 1
          example: 'Client specified an invalid argument, request body or query param'
          x-stoplight:
            id: 15teay67ciznw
          description: The detailed description of the error encountered.
          readOnly: true
        detail:
          type: string
          description: The additional details describing the error.
          example: The authenticationId is no longer valid
          x-stoplight:
            id: mw5c7dxstkn33
          readOnly: true
      required:
        - status
        - message
        - detail
    WhatsApp:
      title: WhatsApp
      x-stoplight:
        id: 7ajh2y2qhyjk8
      type: object
      x-tags:
        - Messages
      description: |
        ### Overview

        Customers can send templated WhatsApp messages via Whispir's API. 

        Templates must first be submitted for approval by WhatsApp in your WhatsApp Business Manager account before any template messages can be sent from Whispir. Please reach out to your Whispir account manager to help you get started.


        #### WhatsApp Messages via Rich Message Templates
        Note that from **October 2025** WhatsApp messages can also be configured in Whispir Rich Message Templates and used to send  via the Whispir API! 
        Please contact your Whispir account manager to see how you can have this feature enabled. 

        ##### Examples
        Sending via Rich Message Templates is shown in the following examples:
        * _WhatsApp Message via WhatsApp Enabled Rich Message Template_
        * _WhatsApp Bulk Message via Rich Message Template_
        * _WhatsApp Message via Rich Message Template with Field Overrides_

        Customers who have this feature enabled will also have access to using the new _parameters_ object, shown in the following examples:
        * _WhatsApp Message with Throttling, Alias, Web Link and Body Positional Parameters_
        * _WhatsApp Bulk Message with Web Link and Body Positional Parameters_

        **Overriding fields from Rich Message Templates (RMT)**

        Customers have the ability to provide the body positional parameters, alias etc. as part of a Rich Message Template (RMT).  
         
        By default, when sending via our API with a given RMT, all values will be collected from the provided RMT. (See _WhatsApp Message via WhatsApp Enabled Rich Message Template_ example)

        However, these values can also be overriden via the API when sending via the Rich Message Template (see _WhatsApp Message via Rich Message Template with Field Overrides_ example).

        In that sample payload, "subject", "features", and "whatsapp" fields will override what is defined in the provided Rich Message Template.

        For clarity and simplicity, however, it is recommended to choose to send your WhatsApp message either via:
        * a WhatsApp enabled Rich Message Template previously defined in our portal 
        * or providing a WhatsApp object in the payload with all the required details
      x-examples:
        WhatsApp Message Using an image:
          to: '61430933333'
          subject: message subject
          whatsapp:
            type: icebreaker
            name: account_update_example_image_p
            content:
              header:
                image:
                  link: 'http://placekitten.com/200/300'
              body:
                - text: John
                - text: ACTIVE
                - text: '619704512462'
        WhatsApp Message Using video:
          to: '61430933333'
          subject: message subject
          whatsapp:
            type: icebreaker
            name: account_update_example_video_p
            content:
              header:
                video:
                  link: 'https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-mp4-file.mp4'
              body:
                - text: John
                - text: '619704512462'
        WhatsApp Message Using text with fixed footer:
          to: '61430933333'
          subject: message subject
          whatsapp:
            type: icebreaker
            name: standard_demo_01
            content:
              body:
                - text: John
        WhatsApp Message Using Document:
          to: '61430933333'
          subject: message subject
          whatsapp:
            type: icebreaker
            name: account_update_example_doc_p
            content:
              header:
                document:
                  link: 'https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf'
              body:
                - text: John
                - text: '619704512462'
        WhatsApp Message Using Location:
          to: '61430933333'
          subject: message subject
          whatsapp:
            type: icebreaker
            name: account_update_example_loc_p
            content:
              header:
                location:
                  longitude: -122.425332
                  latitude: 37.758056
                  name: Facebook HQ
                  address: '1 Hacker Way, Menlo Park, CA 94025'
              body:
                - text: John
                - text: '619704512462'
        WhatsApp Message Using Image and Button (Quick Reply):
          to: '61430933333'
          subject: WhatsApp Message Subject
          whatsapp:
            type: icebreaker
            name: image_quick_reply
            content:
              header:
                image:
                  link: 'http://placekitten.com/200/300'
              body:
                - text: John
                - text: ACTIVE
                - text: '619704512462'
              button:
                - index: '0'
                  sub_type: quick_reply
                  payload: Yes-Button-Payload
                - index: '1'
                  sub_type: quick_reply
                  payload: No-Button-Payload
        WhatsApp Message Using Location and Link Button (static url):
          to: '639177176978'
          subject: message subject
          whatsapp:
            type: icebreaker
            name: location_cta_staticurl
            content:
              header:
                location:
                  longitude: -122.425332
                  latitude: 37.758056
                  name: Facebook HQ
                  address: '1 Hacker Way, Menlo Park, CA 94025'
              body:
                - text: John
                - text: '619704512462'
        'WhatsApp Message Using Link button (dynamic) ':
          to: '61430933333'
          subject: message subject
          whatsapp:
            type: icebreaker
            name: new_media_message_rules
            content:
              header:
                image:
                  link: 'http://placekitten.com/200/300'
              body:
                - text: John
              buttons:
                - index: '0'
                  sub_type: url
                  text: search?q=Whisprr
        WhatsApp Message Using Link button (static url + call phonenumber):
          to: '61430933333'
          subject: message subject
          whatsapp:
            type: icebreaker
            name: hsbc_alert
            content:
              body:
                - text: John
                - text: Everything is connected!
                - text: 'https://hsbc.com/renewal'
                - text: 'https://hsbc.com/terms'
                - text: 'https://hsbc.com/privacy'
        'WhatsApp Message with Throttling, Alias, Web Link and Body Positional Parameters':
          to: '61417123121,61417123122,61417123123'
          subject: WhatsApp Message Subject
          body: test WhatsApp @@recipient_first_name@@
          features:
            throttlingOptions:
              throttling: enabled
              configName: testThrottle
            aliasOption:
              aliasName: OnboardingMessageAlias
          web:
            body: <html><head><title>Test</title></head><body><p class='p1'><span class='s1'>Test</span></p></body></html>
            type: text/plain
          whatsapp:
            type: en
            name: onboarding_message
            parameters:
              - '@@first_name@@'
              - '@@date@@'
              - '@@sender_full_name@@'
              - '@@web_link@@'
        WhatsApp Bulk Message with Web Link and Body Positional Parameters:
          resource:
            resourceId: 422D0A8A4C73BBEA
            smsMappingField: mobile
          subject: WhatsApp Message Subject
          body: test WhatsApp Bulk @@FirstName@@ @@web_link@@
          web:
            body: <html><head><title>Test</title></head><body><p class='p1'><span class='s1'>Test</span></p></body></html>
            type: text/plain
          whatsapp:
            type: en
            name: onboarding_message
            parameters:
              - '@@firstname@@ and @@date@@'
              - '@@sender_full_name@@ and @@web_link@@'
        WhatsApp Message via WhatsApp Enabled Rich Message Template:
          to: '61417123121,61417123122,61417123123'
          messageTemplateName: RMT with WhatsApp Channel Enabled
        WhatsApp Bulk Message via Rich Message Template:
          resource:
            resourceId: 422D0A8A4C73BBEA
            smsMappingField: mobile
          messageTemplateName: Sample RMT with WhatsApp Channel Enabled
          subject: WhatsApp Message Subject
        WhatsApp Message via Rich Message Template with Field Overrides:
          to: '61417123121,61417123122,61417123123'
          messageTemplateName: Sample WhatsApp Enabled Rich Message Template
          subject: WhatsApp Message Subject
          features:
            aliasOption:
              aliasName: OverrideAlias
          whatsapp:
            type: en
            name: onboarding_message
            parameters:
              - '@@first_name@@'
              - '@@date@@'
              - '@@sender_full_name@@'
      x-internal: false
      required:
        - type
        - name
      properties:
        type:
          type: string
          enum:
            - template
          description: |-
            The type of WhatsApp message to be sent, e.g. "template".

            Whispir currently only supports type "template".
          example: template
        name:
          type: string
          description: |-
            The name of the template to be sent 
            > Must be the same as how it appears in your WhatsApp Business Manager
          example: account_update_example_image_p
        parameters:
          type: array
          x-stoplight:
            id: plfyb1qfo0aup
          description: |-
            Array of positional parameters that are used to personalise the body of the WhatsApp message. 

            For example, 
            "Hello {{1}}!" 
            would become 
            "Hello John!" 
            if "John" is the first positional parameter
          items:
            x-stoplight:
              id: knri1ijzksqjx
            type: string
        content:
          $ref: '#/components/schemas/WAContent'
    WAContent:
      title: WAContent
      x-stoplight:
        id: fklmr2skqadi5
      type: object
      description: 'The content of your message which may contain any text and media that will be sent to the recipient. The contents can include a header, a body, and buttons.'
      properties:
        header:
          $ref: '#/components/schemas/WAContentHeader'
        body:
          type: array
          description: The contents of your WhatsApp message
          items:
            title: Object
            type: object
          properties:
            text:
              type: string
              description: The value of the mapped placeholder in the WhatsApp template
              example: ACTIVE
        button:
          type: array
          description: |-
            The contents of your dynamic button.

            If the button subtype is “url” you will need the following parameters:
            “Index”, “sub_type”, “text”

            If the button subtype is a “quick_reply”, you will need the following parameters:
            “Index”, “sub_type”, “payload"
          items:
            $ref: '#/components/schemas/WAContentButton'
      required:
        - body
      x-examples:
        Example 1:
          header:
            image:
              link: 'http://placekitten.com/200/300'
          body:
            - text: John
            - text: ACTIVE
            - text: '+619702873117'
          button:
            - index: '0'
              sub_type: quick_reply
              payload: Yes-Button-Payload
            - index: '1'
              sub_type: quick_reply
              payload: No-Button-Payload
    WAContentHeader:
      title: WAContentHeader
      x-stoplight:
        id: hevlc9qwqt4y3
      type: object
      x-examples:
        Image Example:
          header:
            image:
              link: 'http://placekitten.com/200/300'
        Video Example:
          video:
            link: 'https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-mp4-file.mp4'
        Document Example:
          document:
            link: 'https://s3-eu-west-1.amazonaws.com/hughhopkins.co.uk/sample_media/Sf+flight+itinerary.pdf'
        Location Example:
          location:
            longitude: -122.425332
            latitude: 37.758056
            name: Facebook HQ
            address: '1 Hacker Way, Menlo Park, CA 94025'
      description: 'The header of your message can include one type of media content e.g. image, video, document and location.'
      properties:
        image:
          title: Object
          type: object
          description: Link to image location
          properties:
            link:
              type: string
              description: Url string of the image
              example: 'http://placekitten.com/200/300'
        video:
          title: Object
          type: object
          description: Link to video location
          properties:
            link:
              type: string
              description: Url string of the video
              example: 'https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-mp4-file.mp4'
        document:
          title: Object
          type: object
          description: Link to document location
          properties:
            link:
              type: string
              description: Url string of the document
              example: 'https://s3-eu-west-1.amazonaws.com/hughhopkins.co.uk/sample_media/Sf+flight+itinerary.pdf'
        location:
          title: Object
          type: object
          description: '“Longitude”, "latitude", "name", and "address"'
          properties:
            longitude:
              type: number
              description: Longitude value of the location
              example: -122.425
            latitude:
              type: number
              description: Latitude value of the location
              example: -122.425
            name:
              type: string
              description: Name of the location
              example: Facebook HQ
            address:
              type: string
              description: Address of the location
              example: '1 Hacker Way, Menlo Park, CA 94025'
    WAContentButton:
      title: WAContentButton
      x-stoplight:
        id: 8rugv1dziyhzp
      type: object
      description: |-
        The contents of your dynamic button.

        If the button subtype is “url” you will need the following parameters:
        “Index”, “sub_type”, “text”

        If the button subtype is a “quick_reply”, you will need the following parameters:
        “Index”, “sub_type”, “payload
      x-examples:
        Example 1:
          button:
            - index: '0'
              sub_type: quick_reply
              payload: Yes-Button-Payload
            - index: '1'
              sub_type: url
              payload: 'https://google.com'
      properties:
        index:
          type: string
          description: The index value of the button this object represents
          example: '0'
        sub_type:
          type: string
          enum:
            - quick_reply
            - url
          description: The type of dynamic button i.e. "quick_reply" or "url"
          example: url
        text:
          type: string
          description: |-
            the url destination when the button is clicked
            > required when `sub_type` value is `url`
          example: 'https://abc.com'
        payload:
          type: string
          description: |-
            Name of the quick reply buttons configured within your WhatsApp Business Manager account.
            > required when `sub_type` value is `quick_reply`
          example: yes-button-payload
      required:
        - index
        - sub_type
    Otp:
      title: OTP
      x-stoplight:
        id: nuvbdaf0v8emj
      type: object
      description: The OTP object returned when generating and verifying whispir verify codes
      x-examples:
        Example 1:
          id: r4hDZ2fKD4jzY4L-_sbqk
          channel: sms
          codeLength: 6
          to: '+1234567890'
          expiresAt: '2023-11-16T15:17:24.589Z'
          status: pending
          links:
            verify: 'https://au.api.whispir.com/v1/otp/r4hDZ2fKD4jzY4L-_sbqk/verify-code'
      properties:
        id:
          type: string
          x-stoplight:
            id: adfqdr65w6nzf
          description: The ID of the OTP transaction that has been created.
          example: r4hDZ2fKD4jzY4L-_sbqk
        channel:
          type: string
          x-stoplight:
            id: lksi3vq801ckh
          description: Channel where to send the one time passwords.
          example: sms
        codeLength:
          type: integer
          x-stoplight:
            id: w5dc76twa5nvm
          description: Indicates the span of the code to be generated.
          example: 6
        to:
          type: string
          x-stoplight:
            id: crmdruuiqxv84
          description: Indicates the phone number of the recipient.
          example: '+1234567890'
        expiresAt:
          type: string
          x-stoplight:
            id: aomkfl455w3h1
          description: Timestamp when the code will expire in UTC format.
          example: '2023-11-16T15:17:24.589Z'
        status:
          type: string
          x-stoplight:
            id: e48ecbkib2c03
          description: Current status of the otp transaction.
          example: pending
        links:
          type: object
          x-stoplight:
            id: 4f7vzevuodobn
          description: 'Links related to the resource, verify link is provided to make it easy for UI integrations.'
          example: {}
          properties:
            verify:
              type: string
              description: The link to verify the code.
              x-stoplight:
                id: wx4ogpxsj4x6s
              example: 'https://au.api.whispir.com/v1/otp/r4hDZ2fKD4jzY4L-_sbqk/verify-code'
      required:
        - id
        - channel
        - codeLength
        - to
        - expiresAt
        - status
        - links
    OptOutOption:
      title: OptOutOption
      type: object
      description: |-
        The opt-out option payload is optional in line with the Email Distribution List standardization making it a requirement for recipients to opt out of email lists easily, which will add up to a sender's reputation and deliverability.

        The `rmsUnsubscribeUrl` is a URL link to the web channel unsubscribe content for `GET` requests, and for one-click unsubscribe functionality via `POST` requests.
        This is in line with the [RFC-2369](https://www.ietf.org/rfc/rfc2369.txt) (*The Use of URLs as Meta-Syntax for Core Mail List Commands and their Transport through Message Header Fields*).
        This will append the `List-Unsubscribe` header in the email message for distribution lists with the URL `rmsUnsubscribeUrl` info as its value.

        The `oneClickApiMapping` property requires you to have an existing API Mapping and have access to its details. This API Mapping is triggered for one-click unsubscribe functionality.
        This is in line with the [RFC-8058](https://www.ietf.org/rfc/rfc8058.txt) (*Signaling One-Click Functionality for List Email Headers*).
        This will append the `List-Unsubscribe-Post` header in the email message for distribution lists with the `List-Unsubscribe=One-Click` header as its `POST` endpoint for one-click.

        Both the `rmsUnsubscribeUrl` and `oneClickApiMapping` properties are optional, but `rmsUnsubscribeUrl` is required to enable unsubscribe, `oneClickApiMapping` is required to enable one-click unsubscribe.
      x-examples:
        rmsUnsubscribeUrl: '@@web_link@@'
        oneClickApiMapping: 2ab64862
      x-tags:
        - Email
      properties:
        rmsUnsubscribeUrl:
          type: string
          example: '@@web_link@@#unsubscribe'
          description: |-
            This is a URL link to the web channel unsubscribe content for `GET` requests,
            and for one-click unsubscribe functionality via `POST` requests.
        oneClickApiMapping:
          type: string
          example: 2ab64862
          description: |-
            This is the API mapping code or ID triggered for one-click unsubscribe functionality.
            This code can be retrieved from the API Mapping page.
  parameters:
    X-Api-Key:
      name: X-Api-Key
      in: header
      x-isApiKey: true
      required: true
      schema:
        type: string
      description: The API key for authentication.
    workspaceId:
      name: workspaceId
      in: path
      schema:
        type: string
        pattern: '^[A-F0-9]+'
        example: 9A4C5521FFC7B15B
      description: The identifier for the workspace.
      required: true
    limit:
      name: limit
      in: query
      required: false
      schema:
        type: number
        default: 20
        maximum: 20
      description: The number of records to be returned.
    offset:
      name: offset
      in: query
      required: false
      schema:
        type: number
        default: 0
      description: The record number to start returning from.
    Template-Content-Type:
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.template-v1+json
        enum:
          - application/vnd.whispir.template-v1+json
          - application/vnd.whispir.template-v1+xml
      description: Application specific mime-type.
      name: Content-Type
      x-isContentType: true
    Template-Accept:
      name: Accept
      x-isContentType: true
      in: header
      schema:
        type: string
        default: application/vnd.whispir.template-v1+json
        enum:
          - application/vnd.whispir.template-v1+json
          - application/vnd.whispir.template-v1+xml
      description: Application specific mime-type.
      required: true
    Callback-Content-Type:
      name: Content-Type
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.api-callback-v1+json
        enum:
          - application/vnd.whispir.api-callback-v1+json
          - application/vnd.whispir.api-callback-v1+xml
      description: Application specific mime-type.
    Callback-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.api-callback-v1+json
        enum:
          - application/vnd.whispir.api-callback-v1+json
          - application/vnd.whispir.api-callback-v1+xml
      description: Application specific mime-type.
    Contact-Content-Type:
      name: Content-Type
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.contact-v1+json
        enum:
          - application/vnd.whispir.contact-v1+json
          - application/vnd.whispir.contact-v1+xml
      description: Application specific mime-type.
    Contact-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.contact-v1+json
        enum:
          - application/vnd.whispir.contact-v1+json
          - application/vnd.whispir.contact-v1+xml
      description: Application specific mime-type.
    Unified-Content-Type:
      name: Content-Type
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/json
        enum:
          - application/json
      description: Application specific mime-type.
    Unified-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/json
        enum:
          - application/json
      description: Application specific mime-type.
    Resource-Content-Type:
      name: Content-Type
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.resource-v1+json
        enum:
          - application/vnd.whispir.resource-v1+json
          - application/vnd.whispir.resource-v1+xml
      description: Application specific mime-type.
    Resource-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.resource-v1+json
        enum:
          - application/vnd.whispir.resource-v1+json
          - application/vnd.whispir.resource-v1+xml
      description: Application specific mime-type.
    ResponseRule-Content-Type:
      name: Content-Type
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.responserule-v1+json
        enum:
          - application/vnd.whispir.responserule-v1+json
          - application/vnd.whispir.responserule-v1+xml
      description: Application specific mime-type.
    ResponseRule-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.responserule-v1+json
        enum:
          - application/vnd.whispir.responserule-v1+json
          - application/vnd.whispir.responserule-v1+xml
      description: Application specific mime-type.
    Workspace-Content-Type:
      name: Content-Type
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.workspace-v1+json
        enum:
          - application/vnd.whispir.workspace-v1+json
          - application/vnd.whispir.workspace-v1+xml
      description: Application specific mime-type.
    Workspace-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.workspace-v1+json
        enum:
          - application/vnd.whispir.workspace-v1+json
          - application/vnd.whispir.workspace-v1+xml
      description: Application specific mime-type.
    DistributionList-Content-Type:
      name: Content-Type
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.distributionlist-v1+json
        enum:
          - application/vnd.whispir.distributionlist-v1+json
          - application/vnd.whispir.distributionlist-v1+xml
      description: Application specific mime-type.
    DistributionList-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.distributionlist-v1+json
        enum:
          - application/vnd.whispir.distributionlist-v1+json
          - application/vnd.whispir.distributionlist-v1+xml
      description: Application specific mime-type.
    Scenario-Content-Type:
      name: Content-Type
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.scenario-v1+json
        enum:
          - application/vnd.whispir.scenario-v1+json
          - application/vnd.whispir.scenario-v1+xml
      description: Application specific mime-type.
    Scenario-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.scenario-v1+json
        enum:
          - application/vnd.whispir.scenario-v1+json
          - application/vnd.whispir.scenario-v1+xml
      description: Application specific mime-type.
    Event-Content-Type:
      name: Content-Type
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.event-v1+json
        enum:
          - application/vnd.whispir.event-v1+json
          - application/vnd.whispir.event-v1+xml
      description: Application specific mime-type.
    Event-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.event-v1+json
        enum:
          - application/vnd.whispir.event-v1+json
          - application/vnd.whispir.event-v1+xml
      description: Application specific mime-type.
    CustomList-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.customlist-v1+json
        enum:
          - application/vnd.whispir.customlist-v1+json
          - application/vnd.whispir.customlist-v1+xml
      description: Application specific mime-type.
    Import-Content-Type:
      name: Content-Type
      x-isContentType: true
      in: header
      schema:
        type: string
        default: application/vnd.whispir.importcontact-v1+json
        enum:
          - application/vnd.whispir.importcontact-v1+json
          - application/vnd.whispir.importcontact-v1+xml
      description: Application specific mime-type.
      required: true
    Import-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.importcontact-v1+json
        enum:
          - application/vnd.whispir.importcontact-v1+json
          - application/vnd.whispir.importcontact-v1+xml
      description: Application specific mime-type.
    Message-Content-Type:
      name: Content-Type
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.message-v1+json
        enum:
          - application/vnd.whispir.message-v1+json
          - application/vnd.whispir.bulkmessage-v1+json
          - application/vnd.whispir.message-v1+xml
          - application/vnd.whispir.bulkmessage-v1+xml
      description: Application specific mime-type.
    Message-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.message-v1+json
        enum:
          - application/vnd.whispir.message-v1+json
          - application/vnd.whispir.bulkmessage-v1+json
          - application/vnd.whispir.message-v1+xml
          - application/vnd.whispir.bulkmessage-v1+xml
      description: Application specific mime-type.
    MessageStatus-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.messagestatus-v1+json
        enum:
          - application/vnd.whispir.messagestatus-v1+json
          - application/vnd.whispir.messagestatus-v1+xml
      description: Application specific mime-type.
    MessageResponse-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      description: Application specific mime-type.
      schema:
        type: string
        default: application/vnd.whispir.messageresponse-v1+json
        enum:
          - application/vnd.whispir.messageresponse-v1+json
          - application/vnd.whispir.messageresponse-v1+xml
    Auth-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.auth-v1+json
        enum:
          - application/vnd.whispir.auth-v1+json
          - application/vnd.whispir.auth-v1+xml
      description: Application specific mime-type
    Auth-Content-Type:
      name: Content-Type
      x-isContentType: true
      in: header
      required: true
      description: Application specific mime-type
      schema:
        type: string
        default: application/vnd.whispir.auth-v1+json
        enum:
          - application/vnd.whispir.auth-v1+json
          - application/vnd.whispir.auth-v1+xml
    Activity-Content-Type:
      name: Content-Type
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.activity-v1+json
        enum:
          - application/vnd.whispir.activity-v1+json
          - application/vnd.whispir.activity-v1+xml
      description: Application specific mime-type.
    Activity-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.activity-v1+json
        enum:
          - application/vnd.whispir.activity-v1+json
          - application/vnd.whispir.activity-v1+xml
      description: Application specific mime-type.
    sortOrder:
      name: sortOrder
      in: query
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
      description: The order in which you require the results to be returned. Either ‘asc’ or ‘desc’
    sortFields:
      name: sortFields
      in: query
      required: false
      schema:
        type: string
        example: 'lastName,jobTitle'
      description: 'The fields that you require the ordering to be performed on. Multiple fields can be provided, separated by a comma.'
    User-Content-Type:
      name: Content-Type
      x-isContentType: true
      in: header
      description: Application specific mime-type.
      required: true
      schema:
        type: string
        default: application/vnd.whispir.user-v1+json
        enum:
          - application/vnd.whispir.user-v1+json
          - application/vnd.whispir.user-v1+xml
    User-Accept:
      name: Accept
      x-isContentType: true
      in: header
      description: User accept.
      required: true
      schema:
        type: string
        default: application/vnd.whispir.user-v1+json
        enum:
          - application/vnd.whispir.user-v1+json
          - application/vnd.whispir.user-v1+xml
    CallbackCall-Content-Type:
      name: Content-Type
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.api-call-v1+json
        enum:
          - application/vnd.whispir.api-call-v1+json
          - application/vnd.whispir.api-call-v1+xml
      description: Application specific mime-type.
    CallbackCall-Accept:
      name: Accept
      x-isContentType: true
      in: header
      required: true
      schema:
        type: string
        default: application/vnd.whispir.api-call-v1+json
        enum:
          - application/vnd.whispir.api-call-v1+json
          - application/vnd.whispir.api-call-v1+xml
      description: Application specific mime-type.
    Json-Accept:
      name: Accept
      in: header
      required: true
      schema:
        type: string
        default: application/json
        enum:
          - application/json
      description: Application specific mime-type.
    Json-Content-Type:
      name: Content-Type
      in: header
      required: true
      schema:
        type: string
        default: application/json
        enum:
          - application/json
      description: Application specific mime-type.
  responses:
    User:
      description: User endpoint response
      content:
        application/vnd.whispir.user-v1+json:
          schema:
            $ref: '#/components/schemas/User'
          examples:
            Example:
              value:
                id: 4DC922649AFE370C
                userName: John.Wick
                password: string
                firstName: John
                middleName: ''
                lastName: Wick
                title: ''
                nickname: string
                status: P
                workMobilePhone1: '61400400400'
                workEmailAddress1: testUser@example.com
                workCountry: Australia
                timezone: Australia/Melbourne
                workMobilePhone2: '61500500500'
                workEmailAddress2: newUser@example.com
                workPhoneAreaCode1: '09'
                workPhone1: '5006000'
                workPhoneAreaCode2: '09'
                workPhone2: '5007000'
                workFaxAreaCode1: '09'
                workFax1: '5008000'
                workSatellitePhone: '61600600600'
                workOtherPhone: '61700700700'
                workAddress1: Level 15
                workAddress2: 360 Collins St
                workSuburb: Melboure
                workState: Victoria
                workPostCode: '3000'
                workPostalAddress1: Level 15
                workPostalAddress2: 360 Collins St
                workPostalSuburb: Melboure
                workPostalState: Victoria
                workPostalPostCode: '3000'
                personalEmailAddress1: personalPrimaryUser@example.com
                personalEmailAddress2: personalSecondaryUser@example.com
                personalAddress1: Level 15
                personalAddress2: 360 Collins St
                personalSuburb: Melboure
                personalState: Victoria
                personalPostCode: '3000'
                personalCountry: Australia
                personalPhoneAreaCode1: '09'
                personalPhone1: '5006000'
                personalPhoneAreaCode2: '09'
                personalPhone2: '5007000'
                personalFaxAreaCode1: '09'
                personalFax1: '5008000'
                otherPhoneAreaCode1: '09'
                otherPhone1: '5009000'
                otherMobile: '61900900900'
                otherFirstName: Harold
                otherLastName: Wickman
                otherTitle: Mr
                companyName: Whispir
                jobTitle: Software Engineer
                division: Technology
                businessUnit: Core Platform
                department: Research & Development
                teamName1: Optimus Prime
                teamName2: Bumblebee
                role1: Administrator
                role2: Analyst
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
      headers:
        Content-Type:
          $ref: '#/components/headers/User-Content-Type'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
        Location:
          schema:
            type: string
            example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/users/747AB7E716C1802B6476784AEB5C9BB8'
          description: The URI to fetch details of the resource.
    Users:
      description: List users endpoint response
      content:
        application/vnd.whispir.user-v1+json:
          schema:
            $ref: '#/components/schemas/UserCollection'
          examples:
            Example:
              value:
                users:
                  - id: 4DC922649AFE370C
                    firstName: John
                    middleName: Bjork
                    lastName: Wick
                    userName: johnw
                    password: foobar
                    title: Dr
                    nickname: Babayaga
                    status: PENDING
                    workMobilePhone1: '61400400400'
                    workEmailAddress1: testUser@example.com
                    workCountry: Australia
                    timezone: Australia/Melbourne
                    workMobilePhone2: '61500500500'
                    workEmailAddress2: newUser@example.com
                    workPhoneAreaCode1: '09'
                    workPhone1: '5006000'
                    workPhoneAreaCode2: '09'
                    workPhone2: '5007000'
                    workFaxAreaCode1: '09'
                    workFax1: '5008000'
                    workSatellitePhone: '61600600600'
                    workOtherPhone: '61700700700'
                    workAddress1: Level 15
                    workAddress2: 360 Collins St
                    workSuburb: Melboure
                    workState: Victoria
                    workPostCode: '3000'
                    workPostalAddress1: Level 15
                    workPostalAddress2: 360 Collins St
                    workPostalSuburb: Melboure
                    workPostalState: Victoria
                    workPostalPostCode: '3000'
                    personalEmailAddress1: personalPrimaryUser@example.com
                    personalEmailAddress2: personalSecondaryUser@example.com
                    personalAddress1: Level 15
                    personalAddress2: 360 Collins St
                    personalSuburb: Melboure
                    personalState: Victoria
                    personalPostCode: '3000'
                    personalCountry: Australia
                    personalPhoneAreaCode1: '09'
                    personalPhone1: '5006000'
                    personalPhoneAreaCode2: '09'
                    personalPhone2: '5007000'
                    personalFaxAreaCode1: '09'
                    personalFax1: '5008000'
                    otherPhoneAreaCode1: '09'
                    otherPhone1: '5009000'
                    otherMobile: '61900900900'
                    otherFirstName: Harold
                    otherLastName: Wickman
                    otherTitle: Mr
                    companyName: Whispir
                    jobTitle: Software Engineer
                    division: Technology
                    businessUnit: Core Platform
                    department: Research & Development
                    teamName1: Optimus Prime
                    teamName2: Bumblebee
                    role1: Administrator
                    role2: Analyst
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                status: 1 to 20 of 73
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
      headers:
        Content-Type:
          $ref: '#/components/headers/User-Content-Type'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
    Template:
      description: Template endpoint response.
      content:
        application/vnd.whispir.template-v1+json:
          schema:
            $ref: '#/components/schemas/Template'
          examples:
            Example:
              value:
                id: ABD927D9E0F9A92
                messageTemplateName: Sample SMS Template
                messageTemplateDescription: Template to provide an example on whispir.io
                responseTemplateId: responseTemplateId
                subject: Test SMS Message
                body: This is the body of my test SMS message
                email:
                  body: This is the body of my email message.
                  footer: This is the footer of my message.
                  type: text/plain
                  resources:
                    attachments:
                      - attachmentName: TestIcon.png
                        attachmentDesc: MyPhoto
                        derefUri: iVBORw0KGgoAAAANSUhEUgAAABQAAAASCAIAAADUsmlHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAMvSURBVDhPTVT5S1RhFD3fezOOOePTXHKriWgjsogWC1TSMuuHIFqoX0KsIIgSWwiq/6FFU8MKK6KyXYSKpkUKR4QMSSpCLQpyxHHUZpztzdu63xub5vKWj/fu+c6599z3mMfjSU9P13UdZoiCaLfZYQWiUGKq1WrBLEBDOBpWNTWeQyEIwvT0NAsEAgROPKXFxceNbQOtv4ShkKCkaZZ5kYU1Sw6dqT0NMTkLBIbf7zf+xaOuJzgG4RmyPyP/Kwq/oWAYeT+R6gYOofnmlUQmLQjI6JQkifasu368KdCQWwFEwBiYQOIgiDBETDFIORh/iZ0De55cehgXQJIphce9d/ebJhuyV0P3QY9Cj/HDUKhseIPomP/CW2QYB42nSx+db76YUM9IusPhYHVM2g5Bpo5xNuIkZibCF8On0oGVjhWabmR8EBx5GDuHaItsy0zhzA6bo/H5ZSyDMQ1d4YQa0Sqc1hdAe3E7IYkqp9tiUcHGkXIQZ8+fm+k5uXK3/46YAV3mMMLEt/BHUJ1Vua9oH+WV9ayLyLpVhRYFkT8d4mUzRuI0DAcHmQngSLrGoBJ/GC/L31JSy/cm91ifXTcboYDJGLX+1kI6WS3AQFSRCUDvwhGEwubiD1yVLkLKWuxoT50kzGwab6Ru6HIsahpiwTybkwTLU9iUU1Ezf394CmuyV20p2kLg8mcbRHLLxGimLlWFFMpMc6TRFlx29aJqePBgx4M3u7tubb1dMXfjw6rHhOwb+/jhV3+qNtMFKspQEZnA+oxSPr9UdjgUllV59pHZhSUFI/We5AnMv5o7bvhsFu5f3DlmR7ATr/a+rtq2mVulqEqmlFlbUuv5MbqudW0C7PrhGpvwidRhIoyXqiHoRam/tGrT5n9Wmfcb9TfmBOf0DXy80H0h/uKU6yQRcqlmk+mji0RhbbN2XOpAygzF/9nmfp4oc4+4y6vLqRnuUTdsfNqYFRop/4JFw4t723qz52YlZpvPd/K30vm+03nAie1ADXAYOADsgHOXs/laix7RkzMJyJJ/BjQ09lQ7me8f9/cP9nsnvemzpOIFy3PzclkK0wyNgvDEHP8Z/AXQ58rAz69IBAAAAABJRU5ErkJggg==
                voice:
                  header: 'This is the introduction, read out to the recipient prior to any key press.'
                  body: 'This is the body of the voice call, read out after the key press'
                  type: 'Pin:7171,ConfCall:1800123123,ConfAccountNo:098711234,ConfPinNo:8181,ConfModPinNo:4242'
                web:
                  body: This is the content of my web publishing or Rich Push Message
                  type: text/plain
                social:
                  social:
                    - id: social
                      body: Facebook Content
                      type: text/plain
                type: defaultNoReply
                features:
                  pushOptions:
                    notifications: enabled
                    escalationMins: '3'
                    appId: appId
                dlr:
                  period: ''
                  rule: ''
                  type: ''
                  publishToWeb: false
                  expiryDay: 0
                  expiryHour: 0
                  expiryMin: 0
                  feedIds: ''
                  bool: false
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/618CAD33669AD31A/templates/3148356543415EE7'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
                tags: internal
      headers:
        Content-Type:
          $ref: '#/components/headers/Template-Content-Type'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
        Location:
          schema:
            type: string
            example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/templates/747AB7E716C1802B6476784AEB5C9BB8'
          description: The URI to fetch details of the resource.
    400BadRequest:
      description: |-
        Invalid or missing request parameters.

        Inspect the request parameters and ensure that all required parameters are supplied.

        Note the error text in the response and update the request accordingly.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            Example:
              value:
                errorSummary: Your request was malformed and could not be processed by the server. Please try again
                errorText: Bad Request
                errorDetail: 'java.io.EOFException: No content to map to Object due to end of input'
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
    401Unauthorized:
      description: |-
        Invalid or no credentials passed in the request.

        Inspect the authorisation header and ensure that a valid authentication has been provided.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            Example:
              value:
                errorSummary: Your username and password combination was incorrect. Please check your authentication details and try again
                errorText: Unauthorized
                errorDetail: ''
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
    403Forbidden:
      description: |-
        Authorisation credentials passed and accepted but the account doesn't have permission.

        * Inspect the authorisation header and ensure that a valid authentication has been provided.
        * Returned when HTTP is used instead of HTTPS.
        * Returned when invalid API key is used.
        * Returned when you have tried to make more API calls than your allowed quota (QPS). Refer to API rate limits.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            Example:
              value:
                errorSummary: ''
                errorText: Forbidden
                errorDetail: ''
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
    404NotFound:
      description: |-
        The requested URL doesn't exist.

        The requested resource was not found. Inspect the ID in the URL that was used and ensure that it's valid.

        Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            Example:
              value:
                errorSummary: The resource that you have requested does not exist. Please check the identifier and try again
                errorText: Not Found
                errorDetail: ''
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
    415UnsupportedMediaType:
      description: |-
        The request was unsuccessful because the requested content type is not supported by the API.

        The application client can use this response to determine if it's asking for a supported version of a resource. On receiving this response, the client can query the developer documentation to determine the appropriate version for the requested resource.

        In most cases, this is due to the user not supplying the correct Accept or Content-Type header for the requested URL.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            Example:
              value:
                errorSummary: 'The media type you have supplied in the request does not match any of the available on the server. Please check the documentation for the correct media-type definitions, or contact support@whispir.com to determine what media-type you should be using'
                errorText: Unsupported Media Type
                errorDetail: 'javax.ws.rs.NotSupportedException: Cannot consume content type'
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
    422UnprocessibleEntity:
      description: |-
        The request is formed correctly but due to some condition it can’t be processed. For example, email is required and it's not provided in the request.

        The request did not contain all the information required to perform this method. Check your request for the required fields to be passed in and try again. The offending fields will be specified in the error text of the response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            Example:
              value:
                errorSummary: 'Your request did not contain all of the information required to perform this method. Please check your request for the required fields to be passed in and try again. Alternatively, contact your administrator or support@whispir.com for more information'
                errorText: 'A Template name already exists in the current Workspace, please select another name and try again.'
                errorDetail: ''
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
    500InternalServerError:
      description: |-
        An internal error occurred when processing the request.

        Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team.
      headers:
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            Example:
              value:
                errorSummary: ''
                errorText: Internal Server Error
                errorDetail: ''
    Callback:
      description: The Callback object
      content:
        application/vnd.whispir.api-callback-v1+json:
          schema:
            $ref: '#/components/schemas/Callback'
          examples:
            Callback object:
              value:
                id: 4452AC8359535C46
                name: Callback Name
                url: 'https://example.com/callback'
                auth:
                  type: queryparam
                  key: string
                contentType: json
                removeHTML: disabled
                retriesEnabled: true
                email: me@example.com
                callbacks:
                  reply: disabled
                  undeliverable: disabled
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
        Location:
          schema:
            type: string
            example: 'https://api.au.whispir.com/callbacks/747AB7E716C1802B6476784AEB5C9BB8'
          description: The URI to fetch details of the resource.
    501MethodNotImplemented:
      description: |-
        The HTTP method being used has not yet been implemented for the requested resource.

        The method being used is not implemented for this resource. Check the documentation for the specific resource type.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            Example:
              value:
                errorSummary: 'The method that you have tried to use is not implemented for this resource. Please check the documentation, or contact your administrator. Alternatively you can get further information by contacting support@whispir.com'
                errorText: Not Implemented
                errorDetail: ''
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
    405MethodNotAllowed:
      description: |-
        The requested resource doesn't support the supplied verb.

        Inspect the HTTP method that was used in the request and ensure that it's valid for the resource being requested.
      headers:
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
          examples:
            Example:
              value:
                errorSummary: The method that you have tried to use is not allowed for this resource
                errorText: Method Not Allowed
                errorDetail: ''
    413EntityTooLarge:
      description: |-
        The request payload was too large.

        The maximum allowable request size is 10MB (10485760 bytes).
      headers:
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
      content:
        application/json:
          schema:
            type: string
            description: The request length error message.
            enum:
              - HTTP content length exceeded 10485760 bytes.
          examples:
            Example:
              value: HTTP content length exceeded 10485760 bytes.
    CallbackCalls:
      description: Example response
      content:
        application/vnd.whispir.api-call-v1+json:
          schema:
            $ref: '#/components/schemas/CallbackCallCollection'
          examples:
            Example:
              value:
                calls:
                  - id: C96962B74DC57EF30F00E7097AC81A45
                    messageId: 8D12688BFCC21BD51174C833F9BC9B9D
                    status: SUCCESS
                    messageLocation: string
                    from:
                      name: John Wick
                      mri: support@whispir.com
                      mobile: '6140099499'
                      voice: string
                      email: string
                    responseMessage:
                      channel: sms
                      acknowledged: string
                      undeliverable: string
                      content: string
                    callback:
                      id: string
                      name: string
                      url: string
                      attemptedDate: string
                      statusCode: 200
                      statusMessage: string
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                status: 1 to 8 of 8
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
      headers:
        Content-Type:
          $ref: '#/components/headers/CallbackCall-Content-Type'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
    Contact:
      description: Example response
      content:
        application/vnd.whispir.contact-v1+json:
          schema:
            $ref: '#/components/schemas/Contact'
          examples:
            Example:
              value:
                firstName: John
                lastName: Wick
                workMobilePhone1: '61400400400'
                workEmailAddress1: testUser@example.com
                workCountry: Australia
                timezone: Australia/Melbourne
                title: Dr
                workMobilePhone2: '61500500500'
                workEmailAddress2: newUser@example.com
                workPhoneAreaCode1: '09'
                workPhone1: '5006000'
                workPhoneAreaCode2: '09'
                workPhone2: '5007000'
                workFaxAreaCode1: '09'
                workFax1: '5008000'
                workSatellitePhone: '61600600600'
                workOtherPhone: '61700700700'
                workAddress1: Level 15
                workAddress2: 360 Collins St
                workSuburb: Melboure
                workState: Victoria
                workPostCode: '3000'
                workPostalAddress1: Level 15
                workPostalAddress2: 360 Collins St
                workPostalSuburb: Melboure
                workPostalState: Victoria
                workPostalPostCode: '3000'
                personalEmailAddress1: personalPrimaryUser@example.com
                personalEmailAddress2: personalSecondaryUser@example.com
                personalAddress1: Level 15
                personalAddress2: 360 Collins St
                personalSuburb: Melboure
                personalState: Victoria
                personalPostCode: '3000'
                personalCountry: Australia
                personalPhoneAreaCode1: '09'
                personalPhone1: '5006000'
                personalPhoneAreaCode2: '09'
                personalPhone2: '5007000'
                personalFaxAreaCode1: '09'
                personalFax1: '5008000'
                otherPhoneAreaCode1: '09'
                otherPhone1: '5009000'
                otherMobile: '61900900900'
                otherFirstName: Harold
                otherLastName: Wickman
                otherTitle: Mr
                status: A
                companyName: Whispir
                jobTitle: Software Engineer
                division: Technology
                businessUnit: Core Platform
                department: Research & Development
                teamName1: Optimus Prime
                teamName2: Bumblebee
                role1: Administrator
                role2: Analyst
                locations:
                  - latitude: 41.9028
                    longitude: -12.4964
                    type: CurrentLocation
                messagingoptions:
                  - channel: sms
                    enabled: true
                    primary: WorkMobilePhone1
                    secondary: WorkMobilePhone1
                    tertiary: WorkMobilePhone1
                type: PROJECT
                mri: '61400400400'
                devices: []
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/673A8E38D34BBF0C/contacts/47F08A08482A5AA40F5A99CE69FB0C16'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
                lastModifiedTime: '2022-03-29T16:30:18+11:00'
      headers:
        Content-Type:
          $ref: '#/components/headers/Contact-Content-Type'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
        Location:
          schema:
            type: string
            example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/contacts/747AB7E716C1802B6476784AEB5C9BB8'
          description: The URI to fetch details of the resource.
    Contacts:
      description: Example response
      content:
        application/vnd.whispir.contact-v1+json:
          schema:
            $ref: '#/components/schemas/ContactCollection'
          examples:
            Example:
              value:
                status: 1 to 8 of 8
                contacts:
                  - firstName: John
                    lastName: Wick
                    workMobilePhone1: '61400400400'
                    workEmailAddress1: testUser@example.com
                    workCountry: Australia
                    timezone: Australia/Melbourne
                    title: Dr
                    workMobilePhone2: '61500500500'
                    workEmailAddress2: newUser@example.com
                    workPhoneAreaCode1: '09'
                    workPhone1: '5006000'
                    workPhoneAreaCode2: '09'
                    workPhone2: '5007000'
                    workFaxAreaCode1: '09'
                    workFax1: '5008000'
                    workSatellitePhone: '61600600600'
                    workOtherPhone: '61700700700'
                    workAddress1: Level 15
                    workAddress2: 360 Collins St
                    workSuburb: Melboure
                    workState: Victoria
                    workPostCode: '3000'
                    workPostalAddress1: Level 15
                    workPostalAddress2: 360 Collins St
                    workPostalSuburb: Melboure
                    workPostalState: Victoria
                    workPostalPostCode: '3000'
                    personalEmailAddress1: personalPrimaryUser@example.com
                    personalEmailAddress2: personalSecondaryUser@example.com
                    personalAddress1: Level 15
                    personalAddress2: 360 Collins St
                    personalSuburb: Melboure
                    personalState: Victoria
                    personalPostCode: '3000'
                    personalCountry: Australia
                    personalPhoneAreaCode1: '09'
                    personalPhone1: '5006000'
                    personalPhoneAreaCode2: '09'
                    personalPhone2: '5007000'
                    personalFaxAreaCode1: '09'
                    personalFax1: '5008000'
                    otherPhoneAreaCode1: '09'
                    otherPhone1: '5009000'
                    otherMobile: '61900900900'
                    otherFirstName: Harold
                    otherLastName: Wickman
                    otherTitle: Mr
                    status: A
                    companyName: Whispir
                    jobTitle: Software Engineer
                    division: Technology
                    businessUnit: Core Platform
                    department: Research & Development
                    teamName1: Optimus Prime
                    teamName2: Bumblebee
                    role1: Administrator
                    role2: Analyst
                    locations:
                      - latitude: 41.9028
                        longitude: -12.4964
                        type: CurrentLocation
                    messagingoptions:
                      - channel: sms
                        enabled: true
                        primary: WorkMobilePhone1
                        secondary: WorkMobilePhone1
                        tertiary: WorkMobilePhone1
                    type: PROJECT
                    mri: '61400400400'
                    devices: []
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/673A8E38D34BBF0C/contacts/47F08A08482A5AA40F5A99CE69FB0C16'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
      headers:
        Content-Type:
          $ref: '#/components/headers/Contact-Content-Type'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
    Key:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Key'
          examples:
            Example:
              value:
                id: 7f6a3d23-11f3-406c-9d72-8e8a80c248e4
                type: basic
                userId: d7d429e0-7e1e-4b03-ba34-e486483e76f2
                clientId: ead5ac28-47df-4d52-9d4f-de4b5e3d31a8
                accountId: 30ab9bb0-373c-4f6c-b24d-1e4160af98b4
                enabled: true
                description: Key used by Engineering for testing
                createdTime: '2023-01-25T02:25:33+0000'
                lastModifiedTime: '2022-03-29T16:30:18+11:00'
      headers:
        Content-Type:
          $ref: '#/components/headers/Unified-Content-Type'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
        Location:
          schema:
            type: string
            example: 'https://api.au.whispir.com/keys/e2295960-1ccb-45e4-a012-bb06c4bd3fdc'
          description: The URI to fetch details of the resource.
    Keys:
      description: Example response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/KeyCollection'
          examples:
            Example:
              value:
                keys:
                  - id: 7f6a3d23-11f3-406c-9d72-8e8a80c248e4
                    type: basic
                    description: Key used by Engineering for testing
                    secret: sk_yHyTZ***************************************Wjds
                    createdTime: '2023-01-25T02:25:33+0000'
                    lastModifiedTime: '2022-03-29T16:30:18+11:00'
      headers:
        Content-Type:
          $ref: '#/components/headers/Unified-Content-Type'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
    Workspace:
      description: Example workspace object response
      content:
        application/vnd.whispir.workspace-v1+json:
          schema:
            $ref: '#/components/schemas/Workspace'
          examples:
            example-1:
              value:
                id: 70F2492146292826
                projectName: A Space Odessey
                projectNumber: '2001'
                status: A
                billingcostcentre: Hollywood
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
      headers:
        Content-Type:
          $ref: '#/components/headers/Workspace-Content-Type'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
        Location:
          $ref: '#/components/headers/Location'
    Workspaces:
      description: Example of a list of workspaces response
      content:
        application/vnd.whispir.workspace-v1+json:
          schema:
            $ref: '#/components/schemas/WorkspaceCollection'
          examples:
            example-1:
              value:
                workspaces:
                  - id: 70F2492146292826
                    projectName: A Space Odessey
                    projectNumber: '2001'
                    status: A
                    billingcostcentre: Hollywood
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                status: 'status: 1 to 1 of 1'
      headers:
        Content-Type:
          $ref: '#/components/headers/Workspace-Content-Type'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
    Resource:
      description: Resource endpoint response
      content:
        application/vnd.whispir.resource-v1+json:
          schema:
            $ref: '#/components/schemas/Resource'
          examples:
            example-1:
              value:
                id: 9B9E2425AAFEEE49E9D9112B6BAC22A9
                name: sample.json
                scope: private
                mimeType: application/json
                derefUri: eyAKICAgICJzYW1wbGUiOiB0cnVlCn0=
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
      headers:
        Content-Type:
          $ref: '#/components/headers/Resource-Content-Type'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
        Location:
          $ref: '#/components/headers/Location'
    Resources:
      description: List of resources
      content:
        application/vnd.whispir.resource-v1+json:
          schema:
            $ref: '#/components/schemas/ResourceCollection'
          examples:
            example-1:
              value:
                status: 1 to 2 of 2
                resources:
                  - id: 9B9E2425AAFEEE49E9D9112B6BAC22A9
                    name: sample.json
                    scope: private
                    mimeType: application/json
                    derefUri: eyAKICAgICJzYW1wbGUiOiB0cnVlCn0=
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
      headers:
        Content-Type:
          $ref: '#/components/headers/Resource-Content-Type'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
    DistributionList:
      description: Example workspace object response
      content:
        application/vnd.whispir.distributionlist-v1+json:
          schema:
            $ref: '#/components/schemas/DistributionList'
          examples:
            Example Static DL:
              value:
                id: B27ABC9D8E98A9B
                name: My Distribution List
                description: string
                access: Open
                visibility: Public
                contactIds: string
                userIds: string
                distListIds: string
                type: static
            Example Dynamic DL:
              value:
                id: B27ABC9D8E98A9B
                name: My Distribution List
                description: ''
                access: Open
                visibility: Public
                contactIds: ''
                userIds: ''
                distListIds: ''
                type: static
      headers:
        Content-Type:
          $ref: '#/components/headers/Workspace-Content-Type'
        Content-Length:
          $ref: '#/components/headers/DistributionList-Content-Type'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
        Location:
          $ref: '#/components/headers/Location'
    DistributionLists:
      description: List distribution lists response
      content:
        application/vnd.whispir.distributionlist-v1+json:
          schema:
            $ref: '#/components/schemas/DistributionListCollection'
          examples:
            Example Dynamic Distribution List:
              value:
                distributionLists:
                  - id: 5AFEB61102963D7
                    name: My Distribution List
                    mri: My_Distribution_List.company_name@list.company.whispir.sg
                    description: string
                    memberCount: '4'
                    access: Open
                    visibility: Public
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                    distListIds: string
                    distlistdetails:
                      - id: 123ADAB420493B83
                        name: John Smith
                        type: User
                        link:
                          - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                            rel: self
                            method: GET
                            host: api.au.whispir.com
                            port: -1
                status: 1 to 1 of 1
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
      headers:
        Content-Type:
          $ref: '#/components/headers/Workspace-Content-Type'
        Content-Length:
          $ref: '#/components/headers/DistributionList-Content-Type'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
        Location:
          $ref: '#/components/headers/Location'
    CustomLists:
      description: Example response
      content:
        application/vnd.whispir.customlist-v1+json:
          schema:
            $ref: '#/components/schemas/CustomListCollection'
          examples:
            custom lists response example:
              value:
                status: string
                customlabels:
                  - id: 4B4625BAEB7E4D58
                    name: Day of Week
                    type: MESSAGE
                    createdDate: '09/06/15 10:18'
                    sortType: As Displayed
                    linked: enabled
                    link:
                      - uri: 'https://api.au.whispir.com/customlists/4B4625BAEB7E4D58'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
      headers:
        Content-Type:
          $ref: '#/components/headers/CustomList-Content-Type'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
        Location:
          $ref: '#/components/headers/Location'
    CustomList:
      description: Example responses
      content:
        application/vnd.whispir.customlist-v1+json:
          schema:
            $ref: '#/components/schemas/CustomList'
          examples:
            custom list response example:
              value:
                id: 4B4625BAEB7E4D58
                name: Day of Week
                type: MESSAGE
                createdDate: '09/06/15 10:18'
                sortType: As Displayed
                linked: enabled
                customlabellists:
                  - name: Internal Systems
                    value: Internal Systems
                  - name: External Systems
                    value: External Systems
                  - name: Infrastructure
                    value: Infrastructure
                link:
                  - uri: 'https://api.au.whispir.com/customlists/4B4625BAEB7E4D58'
                    rel: self
                    method: GET
                    host: api.au.whispir.com
                    port: -1
      headers:
        Content-Type:
          $ref: '#/components/headers/CustomList-Content-Type'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Expires:
          $ref: '#/components/headers/Expires'
        Location:
          $ref: '#/components/headers/Location'
    Events:
      description: List of events response example
      content:
        application/vnd.whispir.event-v1+json:
          schema:
            $ref: '#/components/schemas/EventCollection'
          examples:
            Events response example:
              value:
                events:
                  - id: string
                    eventLabel: 2701095 - Outage of Local Systems in Sydney
                    status: Open
                    eventFormList:
                      - formName: Metro Event
                        eventFieldList:
                          - name: string
                            value: string
                    link:
                      - uri: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8/messageresponses'
                        rel: self
                        method: GET
                        host: api.au.whispir.com
                        port: -1
                status: 1 to 2 of 2
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Expires:
          $ref: '#/components/headers/Expires'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
    Event:
      description: Example Event response
      content:
        application/vnd.whispir.event-v1+json:
          schema:
            $ref: '#/components/schemas/Event'
          examples:
            example-1:
              value:
                id: 421FEEBA93GF53A2
                eventLabel: 2701095 - Outage of Local Systems in Sydney
                status: Active
                eventFormList:
                  - formName: MetroEvent
                    eventFieldList:
                      - name: summary
                        value: Outage of systems in Sydney
                      - name: location
                        value: '0.0,0.0'
                      - name: description
                        value: 'ATMs are non responsive, teams to be sent to investigate.'
                      - name: status
                        value: Open
                      - name: category
                        value: Internal
                      - name: startDate
                        value: '11/09/2019 00:00:00'
                      - name: actionOwner1
                        value: John Wick
                      - name: actionDetails1
                        value: investigation to take place asap.
                      - name: actionDate1
                        value: '11/09/2019 00:00:00'
                      - name: severity
                        value: Severity 3 - Minor Outage (Some Service Degradation)
                link:
                  - uri: 'https://api.au.whispir.com/workspaces/26C20B1A09XS3RA2/events/421FEEBA93GF53A2'
                    host: 'https://api.au.whispir.com'
                    port: -1
                    rel: self
                    method: GET
                  - uri: 'https://api.au.whispir.com/workspaces/26C20B1A09XS3RA2/events/421FEEBA93GF53A2'
                    host: 'https://api.au.whispir.com'
                    port: -1
                    rel: self
                    method: PUT
                    type: 'application/vnd.whispir.event-v1+xml,application/vnd.whispir.event-v1+json'
                  - uri: 'https://api.au.whispir.com/workspaces/26C20B1A09XS3RA2/messages?label=2701095%20-%20Outage%20of%20Local%20Systems%20in%20Sydney'
                    host: 'https://api.au.whispir.com'
                    port: -1
                    rel: retrieveEventMessages
                    method: GET
      headers:
        Access-Control-Allow-Origin:
          $ref: '#/components/headers/Access-Control-Allow-Origin'
        Expires:
          $ref: '#/components/headers/Expires'
        Cache-Control:
          $ref: '#/components/headers/Cache-Control'
        Content-Length:
          $ref: '#/components/headers/Content-Length'
        Content-Type:
          $ref: '#/components/headers/Content-Type'
        Location:
          $ref: '#/components/headers/Location'
    400BadRequestNextGen:
      description: |-
        Invalid or missing request parameters.

        Inspect the request parameters and ensure that all required parameters are supplied.

        Note the error text in the response and update the request accordingly.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorNextGen'
          examples:
            Example 1:
              value:
                status: 400
                message: 'Client specified an invalid argument, request body or query param'
                detail: The authenticationId is no longer valid
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
          description: Origins allowed to perform cross-origin requests.
        Content-Length:
          schema:
            type: number
          description: Length of the response content.
        Content-Type:
          schema:
            type: string
          description: The content type of the request header.
        Cache-Control:
          schema:
            type: string
          description: 'The directives that control caching in browsers and shared caches (e.g. Proxies, CDNs).'
        Expires:
          schema:
            type: string
          description: The date/time after which the response is considered expired.
    404NotFoundNextGen:
      description: |-
        The requested URL doesn't exist.

        The requested resource was not found. Inspect the ID in the URL that was used and ensure that it's valid.

        Also, inspect the Accept and Content-Type headers that are being used to make sure they’re correct for the URL that is being requested.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorNextGen'
          examples:
            Example 1:
              value:
                status: 404
                message: A specified resource is not found
                detail: OTP Record FgOzgoe6YAEaWPDW1PDKi associated with +6390756529232 does not exist
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: string
          description: Origins allowed to perform cross-origin requests.
        Content-Length:
          schema:
            type: number
          description: Length of the response content.
        Content-Type:
          schema:
            type: string
          description: The content type of the request header.
        Cache-Control:
          schema:
            type: string
          description: 'The directives that control caching in browsers and shared caches (e.g. Proxies, CDNs).'
        Expires:
          schema:
            type: string
          description: The date/time after which the response is considered expired.
    500InternalServerErrorNextGen:
      description: |-
        An internal error occurred when processing the request.

        Attempt the request again and if the HTTP 500 error re-occurs contact the Whispir Support Team.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiErrorNextGen'
          examples:
            Example 1:
              value:
                status: 500
                message: Server error
                detail: Your request could not be processed by the server at the moment. Please try again or contact your company administrator.
      headers:
        Content-Type:
          schema:
            type: string
          description: The content type of the request header.
        Content-Length:
          schema:
            type: number
          description: Length of the response content.
        Access-Control-Allow-Origin:
          schema:
            type: string
          description: Origins allowed to perform cross-origin requests.
        Cache-Control:
          schema:
            type: string
          description: 'The directives that control caching in browsers and shared caches (e.g. Proxies, CDNs).'
        Expires:
          schema:
            type: string
          description: The date/time after which the response is considered expired.
  headers:
    Location:
      description: The URI to fetch details of the resource.
      required: true
      schema:
        type: string
        example: 'https://api.au.whispir.com/workspaces/9A4C5521FFC7B15B/messages/747AB7E716C1802B6476784AEB5C9BB8'
    Access-Control-Allow-Origin:
      description: Origins allowed to perform cross-origin requests.
      required: true
      schema:
        type: string
        enum:
          - '*'
        example: '*'
    Content-Length:
      description: Length of the response content.
      required: true
      schema:
        type: number
        example: 4111
    Content-Type:
      description: The content type of the request header.
      required: true
      schema:
        type: string
        example: application/vnd.whispir.message-v1+json
    Cache-Control:
      description: 'The directives that control caching in browsers and shared caches (e.g. Proxies, CDNs).'
      required: true
      schema:
        type: string
        example: max-age=0
    Expires:
      description: The date/time after which the response is considered expired.
      required: true
      schema:
        type: string
        example: 'Mon, 21 Mar 2022 03:18:32 GMT'
    Message-Content-Type:
      description: Application specific mime-type.
      required: true
      schema:
        type: string
        example: application/vnd.whispir.message-v1+json
        enum:
          - application/vnd.whispir.message-v1+json
          - application/vnd.whispir.message-v1+xml
    MessageStatus-Content-Type:
      description: Application specific mime-type.
      required: true
      schema:
        type: string
        example: application/vnd.whispir.messagestatus-v1+json
        enum:
          - application/vnd.whispir.messagestatus-v1+json
          - application/vnd.whispir.messagestatus-v1+xml
    MessageResponse-Content-Type:
      description: Application specific mime-type.
      required: true
      schema:
        type: string
        example: application/vnd.whispir.messageresponse-v1+json
        enum:
          - application/vnd.whispir.messageresponse-v1+json
          - application/vnd.whispir.messageresponse-v1+xml
    Template-Content-Type:
      description: Application specific mime-type.
      required: true
      schema:
        type: string
        example: application/vnd.whispir.template-v1+json
        enum:
          - application/vnd.whispir.template-v1+json
          - application/vnd.whispir.template-v1+xml
    User-Content-Type:
      description: Application specific mime-type.
      required: true
      schema:
        type: string
        example: application/vnd.whispir.user-v1+json
        enum:
          - application/vnd.whispir.user-v1+json
          - application/vnd.whispir.user-v1+xml
    Callback-Content-Type:
      description: Application specific mime-type.
      required: true
      schema:
        type: string
        example: application/vnd.whispir.api-callback-v1+json
        enum:
          - application/vnd.whispir.api-callback-v1+json
          - application/vnd.whispir.api-callback-v1+xml
    CallbackCall-Content-Type:
      required: true
      schema:
        type: string
        example: application/vnd.whispir.api-call-v1+json
        enum:
          - application/vnd.whispir.api-call-v1+json
          - application/vnd.whispir.api-call-v1+xml
      description: Application specific mime-type.
    Resource-Content-Type:
      required: true
      schema:
        type: string
        example: application/vnd.whispir.resource-v1+json
        enum:
          - application/vnd.whispir.resource-v1+json
          - application/vnd.whispir.resource-v1+xml
      description: Application specific mime-type.
    Contact-Content-Type:
      required: true
      schema:
        type: string
        example: application/vnd.whispir.contact-v1+json
        enum:
          - application/vnd.whispir.contact-v1+json
          - application/vnd.whispir.contact-v1+xml
      description: Application specific mime-type.
    Unified-Content-Type:
      required: true
      schema:
        type: string
        example: application/json
        enum:
          - application/json
      description: Application specific mime-type.
    Event-Content-Type:
      required: true
      schema:
        type: string
        example: application/vnd.whispir.event-v1+json
        enum:
          - application/vnd.whispir.event-v1+json
          - application/vnd.whispir.event-v1+xml
      description: Application specific mime-type.
    Activity-Content-Type:
      required: true
      schema:
        type: string
        example: application/vnd.whispir.activity-v1+json
        enum:
          - application/vnd.whispir.activity-v1+json
          - application/vnd.whispir.activity-v1+xml
      description: Application specific mime-type.
    ResponseRule-Content-Type:
      required: true
      schema:
        type: string
        example: application/vnd.whispir.responserule-v1+json
        enum:
          - application/vnd.whispir.responserule-v1+json
          - application/vnd.whispir.responserule-v1+xml
      description: Application specific mime-type.
    Scenario-Content-Type:
      required: true
      schema:
        type: string
        example: application/vnd.whispir.scenario-v1+json
        enum:
          - application/vnd.whispir.scenario-v1+json
          - application/vnd.whispir.scenario-v1+xml
      description: Application specific mime-type.
    DistributionList-Content-Type:
      required: true
      schema:
        type: string
        example: application/vnd.whispir.distributionlist-v1+json
        enum:
          - application/vnd.whispir.distributionlist-v1+json
          - application/vnd.whispir.distributionlist-v1+xml
      description: Application specific mime-type.
    Workspace-Content-Type:
      required: true
      schema:
        type: string
        example: application/vnd.whispir.workspace-v1+json
        enum:
          - application/vnd.whispir.workspace-v1+json
          - application/vnd.whispir.workspace-v1+xml
      description: Application specific mime-type.
    CustomList-Content-Type:
      required: true
      schema:
        type: string
        example: application/vnd.whispir.customlist-v1+json
        enum:
          - application/vnd.whispir.customlist-v1+json
          - application/vnd.whispir.customlist-v1+xml
      description: Application specific mime-type.
    Import-Content-Type:
      required: true
      schema:
        type: string
        example: application/vnd.whispir.importcontact-v1+json
        enum:
          - application/vnd.whispir.importcontact-v1+json
          - application/vnd.whispir.importcontact-v1+xml
      description: Application specific mime-type.
    Auth-Content-Type:
      required: true
      schema:
        type: string
        example: application/vnd.whispir.auth-v1+json
        enum:
          - application/vnd.whispir.auth-v1+json
          - application/vnd.whispir.auth-v1+xml
      description: Application specific mime-type.
